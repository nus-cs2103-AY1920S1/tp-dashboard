[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d ExerHealth"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T09-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T09-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T09-2/main/badge.svg?branch\u003dmaster[Coverage]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "https://app.netlify.com/sites/exerhealth/deploys[image:https://api.netlify.com/api/v1/badges/8b51ce83-a6ec-4994-8014-1c4b30aa3cd6/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* ExerHealth is a one-stop platform for students who wish to embark on a journey of health and fitness."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* This application has a GUI but is optimised for students who prefer to work with a Command Line Interface(CLI)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* If you can type fast and wish to maintain a healthy lifestyle, Exerhealth is that one app for you!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* Original source code, AddressBook-Level3, was created by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 3,
      "-": 27,
      "kwekke": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "mainClassName \u003d \u0027seedu.exercise.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerHealth was developed by the https://github.com/AY1920S1-CS2103T-T09-2[ExerHealth] team based on"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "the AddressBook code base done by the https://se-edu.github.io/docs/Team.html[se-edu] team."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d Gary Lim Yan Peng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::garylyp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "{empty}[https://github.com/garylyp[github]] [\u003c\u003cgarylyp#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Responsibilities: Overall project coordination"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d Kwek Kee En"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::kwekke.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "{empty}[https://github.com/kwekke[github]] [\u003c\u003ckwekke#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Responsibilities: Quality of various project documents"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d Tan Chee Peng"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::t-cheepeng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "{empty}[https://github.com/t-cheepeng[github]] [\u003c\u003ct-cheepeng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Responsibilities: Integration of project items"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d Chai Jie Tung"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::jietung.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "{empty}[https://github.com/jietung[github]] [\u003c\u003cjietung#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Responsibilities: Code quality, deliverable and deadlines"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d Ho Wei Haw"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::weihaw08.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "{empty}[https://github.com/weihaw08[github]] [\u003c\u003cweihaw08#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "weihaw08": 25
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T09-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Email us* : You can also reach us at `e0310551 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d ExerHealth - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "By: `Team ExerHealth`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/exercise/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/exerecise/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jietung"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete t/exercise i/1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": ".Component interactions for `delete t/exercise i/1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kwekke"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/exercise/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kwekke"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ExerciseListPanel`, `ExerciseCard` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/exercise/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garylyp"
        },
        "content": "link:{repoURL}/src/main/java/seedu/exercise/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garylyp"
        },
        "content": ".  `Logic` uses the `ExerciseBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding an exercise/regime)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kwekke"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/exercise/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The `Model`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "* stores a `PropertyBook` object that represents the custom properties defined by the user."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* stores the Exercise Book data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* stores the Exercise Database Book Data"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* stores the Regime Book data."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* stores the Schedule Book data."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExercise\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/exercise/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* can save the Resource Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "* can save the Property Book data in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Resource Book data consists of Exercise Book, Regime Book and Schedule Book data"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Classes used by multiple components are in the `seedu.exercise.commons` package."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The undo/redo mechanism is facilitated by the `events` package consisting of `EventHistory`, `EventFactory`,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "garylyp"
        },
        "content": "`EventPayload` and the various `Event` classes."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The `EventHistory` is a singleton class used to store a history of successfully executed commands as `Event` objects."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Instances of `Event` are stored in either the `undoStack` or the `redoStack` depending on the user\u0027s course of action."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The `EventHistory` class has two primary methods namely `undo(Model model)` and `redo(Model model)`:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* `eventHistory.undo(model)` -- Undoes the `Event` at the top of the `undoStack`, executes it, and pushes it to the top of the `redoStack`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* `eventHistory.redo(model)` -- Redoes the `Event` at the top of the `redoStack`, executes it, and pushes it to the top of the `undoStack`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "garylyp"
        },
        "content": "These operations are utilised in the `UndoCommand` and `RedoCommand` respectively."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The following steps will describe the full life-cycle of executing an UndoableCommand, and subsequently"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "garylyp"
        },
        "content": "the UndoCommand and RedoCommand."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Step 1: When an `UndoableCommand` is executed, relevant information will be added into a newly initialized"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "garylyp"
        },
        "content": "`EventPayload`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The `EventPayload` is a wrapper class to store key information about the particular `Command` object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "garylyp"
        },
        "content": "For instance, if an `EditCommand` has been executed, the `EventPayload` will store the `originalExercise`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "garylyp"
        },
        "content": "as well as the `editedExercise`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Step 2: The `UndoableCommand` is used to generate a an `Event` with the help of the `EventFactory`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The `Event` is then added to the undo stack of the `EventHistory`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The `EventFactory` checks for the command word of the `UndoableCommand` to decide a specific `Event` object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "garylyp"
        },
        "content": "to generate. It will pass the `EventPayload` into the constructor of the `Event` so that the `Event` captures"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "garylyp"
        },
        "content": "the key information of the `UndoableCommand`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Step 3: The user, upon realizing that a mistake has been made, can then execute the `UndoCommand`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Step 4: The `UndoCommand` executes `eventHistory.undo(model)`, which prompts the `EventHistory` instance"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "garylyp"
        },
        "content": "to pop the next `Event` to undo from the undo stack. Once the `Event` is undone, it will be pushed to the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "garylyp"
        },
        "content": "top of the redo stack."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Step 5: The user, upon realizing a second mistake made, can then execute the `RedoCommand`. This execution"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "garylyp"
        },
        "content": "behaves similarly to step 4, except that the next `Event` is taken from the top of the redo stack."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "garylyp"
        },
        "content": "For step 4 and 5, if any of the respective stack is empty when it is needed, a `CommandException` will be thrown"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "garylyp"
        },
        "content": "and a `CommandResult` feedback will be displayed to inform of the user that there are no commands to undo or redo"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "garylyp"
        },
        "content": "at the moment."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The following two Sequence Diagrams show a sample flow of the execution when an `EditCommand`, which is an"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "garylyp"
        },
        "content": "`UndoableCommand`, has been executed and subsequently undone."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The first diagram (Figure 9) describes the process of storing an `EditEvent` to `EventHistory` during the execution of the"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "garylyp"
        },
        "content": "`EditCommand`. Observe that the `EventPayload` serves as the main channel of communication of data between the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "garylyp"
        },
        "content": "`Command` and the `Event`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".The process of storing an `EditEvent` to `EventHistory`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "garylyp"
        },
        "content": "image::UndoableCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The second diagram (Figure 10) here describes the process of undoing the `EditCommand` executed above using the `UndoCommand`. The"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "garylyp"
        },
        "content": "`UndoCommand` will only communicate with the `EventHistory` once to ensure the `EventHistory` takes care of the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "garylyp"
        },
        "content": "execution and updating of the undo and redo stack it holds internally."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".The process of undoing the `EditCommand`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Given below is a Class Diagram (Figure 11) to show the associations between Event, Command and Model. It is specifically designed"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "garylyp"
        },
        "content": "such that only instances that implement the `Event` and `Command` interface will need to handle the `model` class."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The only commands that implements the `UndoableCommand` are `AddCommand`, `DeleteCommand`, `EditCommand`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "garylyp"
        },
        "content": "and `ClearCommand` and they each stores an `EventPayload` instance."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".The associations between Event, Command and Model"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "garylyp"
        },
        "content": "image::EventClassDiagram.png[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The following Activity Diagram (Figure 12) summarizes what happens when a user enter undoable commands,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "garylyp"
        },
        "content": "the undo command and the redo command."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".The workflow when a user enters an undoable command and performs undo/redo"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 1: (current choice)** Implements undo and redo of each Command in a separate Event object stored in the EventHistory"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Will use less memory as each frame is represented by an Event object instead of the entire model which consists of"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Exercise books and Regime books."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Open for extensions and close to modifications as the Event interface only contains undo and redo methods, and can"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "garylyp"
        },
        "content": "be easily implemented when new Undoable commands are introduced."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Obeys Single Responsibility Principle as Commands simply have to execute what it does and does not need to know"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "garylyp"
        },
        "content": "how it is undone or redone"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Have to store the payload of Command objects to be accessed by Event objects"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "garylyp"
        },
        "content": "(e.g. for `delete`, the exercise being deleted)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Will use less memory"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Violates Single Responsibility Principle as Commands need to know implementation for how it can be undone or redone."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 3 (current choice):** Saves the entire model consisting of the exercise and regime books."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Easy to implement."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Unnecessary storage of irrelevant details such as schedule list."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 1 (current choice):** Use a singleton EventHistory to store stacks of Events generated by a EventFactory."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Ensures only one instance of EventHistory exists"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** The EventFactory relies on the Factory pattern and helps to eliminate coupling while"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "garylyp"
        },
        "content": "enabling ease of extension to future events that need to be generated"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Singletons are difficult to test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Singletons may break if the program is multi-threaded"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 2:** Use a list to store the history of resource book states."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Very trivial"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*** Difficult to monitor multiple resource books (e.g. Regime books and Exercise books) as they all"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "garylyp"
        },
        "content": "manage different types of resources that can be altered by commands."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d\u003d Design Patterns"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "garylyp"
        },
        "content": "The Undo/Redo feature implementation is based on the Singleton, Command, and Factory design patterns"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* *Singleton*"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** To help ensure that only one copy of `EventHistory` exists during the execution of the program"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Allows easier access by the various command classes"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* *Command*"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Extensions to add a new `Event` is easy and can be done without changing the existing code"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* *Factory*"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Suitable for the context of taking in a particular Command and returning a corresponding Event"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** Reduces coupling between Command classes and Event classes"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Resolve feature"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "The resolve feature is used when there is a scheduling conflict that happens within ExerHealth. This feature will alter the state of the program. The state is known by `MainApp` and it is either `State.IN_CONFLICT` or `State.NORMAL`. Only when the state is `State.IN_CONFLICT` will `resolve` commands be allowed."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "For the implementation of the resolve feature, the `ResolveCommand` will hold a `Conflict` object which is then passed into `Model`. The concrete implementation, `ModelManager` then resolves the conflict that is being held there. Each `Conflict` object will hold 1 conflicting `schedule` and 1 `schedule` that was originally scheduled on the date."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Shown below is the class diagram for the implementation of the `Resolve` feature."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".Class diagram for Resolve Command"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "image::ScheduleResolveClassDiagram.png[]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "With regards to the flow of the program for a scheduling conflict, the steps are laid out below:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Step 1. User enters a `schedule` command that will cause a scheduling conflict. The `ScheduleCommand` will change `MainApp` state to `State.IN_CONFLICT`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "`schedule` can conflict with another `schedule` when the dates from the 2 schedules are the same. The method `model.hasSchedule()` returns `true` if that happens."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Step 2. A `CommandResult` object is returned to `MainWindow` where the flag `showResolve` is set to `true`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Step 3. Upon receipt of the object, `MainWindow` will show the resolve window and the user is required to resolve the conflict."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "The `ResolveWindow` will block all inputs to `MainWindow` and only allow `resolve` command to be entered."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Shown below is the sequence diagram for when a scheduling conflict happens:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".Sequence diagram when a scheduling conflict happens"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "image::ScheduleConflict.png[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Step 5. When the user is prompted with the `ResolveWindow`, all the conflicting exercises will be shown in one page. The previously `scheduled regime` on the left and the `conflicting regime` on the right."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Step 6. Once the user issue a `resolve` command correctly, the `model` and `storage` of ExerHealth will be updated to reflect the changes. A new regime will be added for the user from the `resolve`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "The `ResolveWindow` will only take one valid `resolve` command and `Ui` will close the `ResolveWindow` immediately after the command finishes. The newly made schedule will result in a new `regime` being added to the user\u0027s `RegimeList`, so the name of the `regime` in the `resolve` command cannot have any conflicts with current names in `RegimeList`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Step 7. The `ResolveWindow` then closes upon successful `resolve` and the application continues."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "The following activity diagram summarizes what happens when a user enters a `schedule` command:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".Activity diagram for when a user enters a `schedule` command"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "image::ScheduleActivityDiagram.png[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Signalling Schedule Conflict"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 1 (current choice): ** Using `CommandResult` object"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "*** Makes use of existing objects in codebase making it easier to implement"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "*** UI does not have to handle logic when encountering schedule conflicts. It only has to show the `ResolveWindow` and pass the data accordingly."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "*** If we have to signal different types of outcomes to the UI, the `CommandResult` class will become bloated."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 2: ** throw `ScheduleException`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "*** Easy to implement. `ScheduleCommand` just has to throw an exception and `UI` catches it."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "*** `UI\u0027s` execute methods will contain multiple `try/catch` which acts like a control flow mechanism which increases code smell."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "*** If there is a need to pass down information from executed Commands, an exception is unable to convey any sort of complex information that the `UI` can act on. Thus, encapsulating information in an object will be more open to extension compared to throwing an exception."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d Custom feature"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "This feature is facilitated by both `PropertyBook` and `CustomProperty`. Whenever a user"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "adds a newly defined custom property, a `CustomProperty` object will be created which is stored in"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "`PropertyBook`. Its corresponding prefix and full name will be tracked by `PropertyBook` to avoid"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "clashes in their uses."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "To keep track of the custom properties and its relevant information, the following are used:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "1. `CUSTOM_PROPERTIES`: A list containing all of the `CustomProperty` objects that"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "have been created."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "2. `prefixes`: A set containing all of the `Prefix` objects associated with existing exercise\u0027s"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "properties."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "3. `fullNames`: A set containing the full names of the existing exercise\u0027s properties."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The following methods are also implemented in `PropertyBook` to aid in the addition of a new custom property:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "1. `PropertyBook#isPrefixUsed(Prefix)`: Checks if the given prefix has been used by a property."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "2. `PropertyBook#isFullNameUsed(String)`: Checks if the given name has been used by a property."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "3. `PropertyBook#addCustomProperty(CustomProperty)`: Adds the new custom property. Each time a custom property is"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "added, the prefix set in `Prefix` is also updated."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The first three methods are exposed in the `Model` interface as `Model#isPrefixUsed(Prefix)`,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "`Model#isFullNameUsed(String)` and `Model#addCustomProperty(CustomProperty)` respectively."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "These associations are illustrated in a class diagram (Figure 16)."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".Class diagram of the associations of `PropertyBook`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::CustomClassDiagram.png[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The following sequence diagram (Figure 17) illustrates how the custom operation works when a custom"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "property is *successfully added*."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".Sequence diagram of a successful addition of a custom property"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::EditedCustomSequenceDiagram.png[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "However, not all additions of a custom property will be successful. The next activity diagram"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "(Figure 18) shows the workflow when a new custom property is defined."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".Activity diagram of the workflow when a new custom property is added"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "image::CustomActivityDiagram.png[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Tracking custom properties"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 1 (Current choice)**: Store the custom properties in a list and store their full"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "names and prefixes in a set."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "** Pros: Storing the full names and prefixes separately provides an efficient way to check if a"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "full name or a prefix has been used."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "** Cons: It may incur additional memory usage since the full name and prefix of each `CustomProperty`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "object are stored multiple times."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 2**: Store only a list of custom properties"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "** Pros: Less memory used as no duplicates in terms of prefix and full names are stored."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "** Cons: It may require more time to check if a full name or a prefix has been used as one has to"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "iterate through the whole list."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Ultimately, choice 1 is chosen as it provides a faster way of checking if a full name or a prefix has"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "been used. Also, keeping track of the prefixes separately allows us to simply pass them in when adding or"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "editing an exercise."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Representing the custom properties"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 1 (Current choice)**: Represent the custom property as an object that contains"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "3 information - its prefix, its name and its parameter type."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "** Pros: This allows us to distinguish custom properties from default properties. Furthermore, these"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "objects can be stored in a data structure which can be passed around when adding or editing an exercise."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "** Cons: Each exercise has to store the value of each custom property separately from the custom property"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "itself."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 2**: Create a `Property` class which will contain the following information: name, constraint"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "message, value and prefix. The default properties will be stored separately in a Java class and will be initialised"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "every time the app starts."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "** Pros: This ensures that there is a consistency in terms of how an exercise property is represented"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "and it also allows the property value to be stored together."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "** Cons: Methods have to be introduced to identify custom properties from the default ones."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Ultimately, choice 1 is selected as we believe it is more important to distinguish the custom properties"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "from the default ones. This separation ensures that methods meant to operate on custom properties are unable"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "to operate on default properties."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d Suggest"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kwekke"
        },
        "content": "The suggest feature is used to recommend exercises to both beginners and experienced users."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kwekke"
        },
        "content": "The user is allowed to specify what type of suggestions to see."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kwekke"
        },
        "content": "The following activity diagram summarizes what happens when a user enters a suggest command:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kwekke"
        },
        "content": "image::SuggestActivityDiagram.png[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kwekke"
        },
        "content": "The following sequence diagram shows the sequence flow from the when a user enters a valid `SuggestPossibleCommand`:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kwekke"
        },
        "content": "image::SuggestSequenceDiagram.png[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kwekke"
        },
        "content": "From the sequence diagram:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kwekke"
        },
        "content": "1. When the `LogicManager` receive the `execute` command, it calls the `parseCommand` method of `ExerciseBookParser`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kwekke"
        },
        "content": "2. `ExerciseBookParser` will receive `suggest` as the command type and instantiate `SuggestCommandParser` to further parse the command."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kwekke"
        },
        "content": "3. `SuggestCommandParser` will receive `s/possible` as the suggest type and instantiate `SuggestPossibleCommand` with `muscles` and `customProperties` as constructor parameters."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kwekke"
        },
        "content": "4. The `SuggestPossibleCommand` object is then returned to `SuggestCommandParser`, `ExerciseBookParser` and lastly back to `LogicManager` to execute."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kwekke"
        },
        "content": "5. `LogicManager` will proceed to call execute `SuggestPossibleCommand`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kwekke"
        },
        "content": "6. When `SuggestPossibleCommand` is executed, it calls a self invocated method, `getPredicate`, which is created based on the `targetMuscles` and `targetCustomProperties`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kwekke"
        },
        "content": "7. `SuggestPossibleCommand` then calls the `updateSuggestedExerciseList` method in `ModelManager`, passing in the predicate to filter the list of suggest exercises."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kwekke"
        },
        "content": "8. `SuggestPossibleCommand` creates a new `CommandResult` to be returned."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of predicate creation"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 1 (current choice): ** `SuggestPossibleCommand` to handle the predicates."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kwekke"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kwekke"
        },
        "content": "*** Easy to implement and understand. The class `SuggestPossibleCommand` contains the parsing and creation of the predicate all in one place."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kwekke"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kwekke"
        },
        "content": "*** Violation of SRP as `SuggestPossibleCommand`, in addition to updating the model, has to create the predicate."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* **Choice 2: ** Predicate Factory class to handles all predicates."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kwekke"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kwekke"
        },
        "content": "*** Adheres to SRP and Separation of Concern (SoC)."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kwekke"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kwekke"
        },
        "content": "*** May increase coupling because classes that use predicates have to depend on this class."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jietung"
        },
        "content": "Statistics of exercises will be displayed in charts. Supported chart types are Pie Chart, Line Chart and Bar Chart."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jietung"
        },
        "content": "StatsFactory will create Statistic using given parameters."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The figure (Figure 19) below shows the class diagram of statistics:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".Class diagram of the classes behind the statistics feature"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jietung"
        },
        "content": "image::StatisticClassDiagram.png[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The next figure (Figure 20) shows the activity diagram when user enter a `stats` command:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".Workflow when a user enters a `stats` command"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jietung"
        },
        "content": "image::StatisticActivityDiagram.png[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jietung"
        },
        "content": "Given below is an example usage scenario of statistics feature."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jietung"
        },
        "content": "Step 1: User enters a `stats` command to see statistics of exercises."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jietung"
        },
        "content": "Step 2: The `stats` command calls Model#getExerciseBookData to get data of all exercises and pass to `Statistic`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jietung"
        },
        "content": "Step 3: `Statistic` will process and generate data."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jietung"
        },
        "content": "Step 4: Data will be passed back to `Ui` and `Ui` will generate and display chart."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Shown below is the sequence diagram (Figure 21) when user enters a valid `stats` command:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ".Sequence diagram of a `stats` command"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jietung"
        },
        "content": "image::StatisticSequenceDiagram.png[]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* exercises on a regular basis"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* actively monitors exercise records"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* develops exercise regimes for the future"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* provides an integrated platform to track and access past exercise records"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* shows more complex data analytics than the statistics a standard tracking app provides"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* allows flexible and conflict-free scheduling of planned exercises"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* provides exercise suggestions based on past activities"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"\u003c3%,\u003c10%,\u003c30%,\u003c40%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |student who exercises |monitors the types and quantity of the exercises I have completed |remember and have different variations to my exercises"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |athletic student |have a way to store all my exercises and their relative intensities |make reference to past exercises while scheduling future exercises"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |frequent gym-goer |keep track of my rep counts |know how hard I have pushed and how far I am from my target reps"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |student who wants to get stronger |keep track of my the muscles my gym exercise works on |plan what kind of muscle groups I should target to get stronger"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |amateur at exercising |have the app come up with exercises for me based on my user profile |better plan future regimes based on my previous attempt"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |student who just got into exercising |have some sample training plans |have a starting point for my exercise regime"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |frequent gym-goer with targets |see my progression for every exercise and the date I completed them |see how much I have improved"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |Student who loves visual data |visualise my exercise statistics |understand all my relevant data immediately"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |student who is very busy |have the app detect clashes in my exercising schedules |reschedule some of my exercises somewhere else"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |person who likes customization |add in new attributes for exercises |tailor the app for my personal use"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |careless athletic student |be able to have a way to undo my actions |easily undo my command when I accidentally delete one of my training plans"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |careless athletic student |be able to have a way to redo my actions |simply redo my undone command when I realize I undid an important exercise"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* * *` |athletic student who has a fixed training plan |have a way to store this training plan permanently |save some trouble of constantly updating the app whenever I want to begin on that training plan"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* *` |student who is impatient |have simple commands |input new entries quickly"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* *` |health-conscious student |keep track of my daily calories burnt |monitor my calorie count over a specific duration"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* *` |student who wants to get stronger |Know what kind of muscles I have been training for the past month |take note of which muscles I have been focusing for training"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* *` |student who wants to track exercises quickly and efficiently |be able to add exercises from history |add the same thing without having to type it all out"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* *` |student who wants a balanced exercise regime |have the app auto suggest some forms of exercise |easily find new exercises to do"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* *` |athletic student |be able to modify my current training schedule |easily adapt my previous training plans into better plans that can help improve my physique"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* *` |athlete who wants to improves |save notes from my previous session |reflect and modify my training regime accordingly to suit my pace"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`* *` |athletic student who loves to do things my way |be able to define my own command syntax |type the commands for the various features much easily and quickly"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |athletic student who uses the app often |have an auto-complete or input suggestion feature |easily add in reused exercises conveniently without having to type them out fully again"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |student who likes to keep things neat |be able to archive my older exercises |be more focused on recent exercises"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |student who just got into gyming |receive some tips on good gym practices |avoid injuring myself during training"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |student who just got into sports |Understand the most important tips on good exercise habits |maximise the benefits of my exercises"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |student who wants to get stronger |be advised on how much increment I should make for each exercise |train progressively"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |athletic student |be able to keep track of my recovery period |avoid doing harm to my body from excessive training"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |forgetful student |be reminded of when i have to exercise |set aside time for exercising"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |frequent gym-goer |be reminded of my exercise schedules |remember to go for my sessions"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |athletic student |monitor the list of equipment I need for each session |remember what I need for subsequent exercise sessions of the same kind"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |frequent gym-goer |store my workout music playlist |access my favourite gym workout playlist conveniently when gyming"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |student with a busy schedule |be able to export my files |to resolve conflicts between my exercise and work schedule"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |student who is very lazy |be able to mass import all my exercises data from other platforms |save the trouble of inputting an entire list of existing entries one by one"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|`*` |student who uses mobile running apps |import data from other application |avoid the time-consuming process of adding all exercises manually"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "garylyp"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "garylyp"
        },
        "content": "(For all use cases below, the *System* is the `ExerHealth` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d UC01: Statistics (bar chart)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*System:* ExerHealth"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Actor:* user"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "garylyp"
        },
        "content": "1. User adds multiple exercises to the ExerHealth tracker"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "garylyp"
        },
        "content": "2. User requests to see a bar chart of the most frequently"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "garylyp"
        },
        "content": "done exercises within a range of date"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "garylyp"
        },
        "content": "3. ExerHealth shows user the breakdown of exercises and"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "garylyp"
        },
        "content": "their respective frequency for the date range"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d UC02: Schedule"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*System:* ExerHealth"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Actor:* user"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "garylyp"
        },
        "content": "1. User requests for the list of exercises."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "garylyp"
        },
        "content": "2. ExerHealth displays the list of exercises it is tracking."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "garylyp"
        },
        "content": "3. User adds 1 or more exercises to a \u003c\u003cregime, regime\u003e\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "garylyp"
        },
        "content": "4. ExerHealth adds the regime to the user\u0027s list of regime and display successful addition"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "garylyp"
        },
        "content": "5. User \u003c\u003cschedule, schedules\u003e\u003e a regime at a date"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "garylyp"
        },
        "content": "6. ExerHealth schedules regime at the date and displays successful scheduling"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* 5a. ExerHealth detects more than one regime at the date"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** 5a1. ExerHealth displays resolve window to user"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** 5a2. User enters which exercises they wish to schedule at the date from the conflicting regimes"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** 5a3. ExerHealth schedules the newly made regime at the date and closes resolve window"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "garylyp"
        },
        "content": "+"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d UC03: Suggest"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*System:* Exerhealth"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Actor:* user"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "garylyp"
        },
        "content": "1. User asks for suggestions"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "garylyp"
        },
        "content": "2. System searches database for previous exercises done"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "garylyp"
        },
        "content": "3. System creates a suggestion based on search and request type"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "garylyp"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* 1a. User does not have history"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** 1a1. System provides user with preset suggestions"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "garylyp"
        },
        "content": "+"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d UC04: Configure Command"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*System:* ExerHealth"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Actor:* user"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "garylyp"
        },
        "content": "1. User requests to add in a new user-defined \u003c\u003cproperty, property\u003e\u003e for exercises"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "garylyp"
        },
        "content": "2. ExerHealth adds in the user-defined property for all exercises"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "garylyp"
        },
        "content": "3. User adds a new exercise with the newly specified prefix and argument"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "garylyp"
        },
        "content": "for the property"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* 1a. ExerHealth detects that the user-defined property is a duplicate"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "garylyp"
        },
        "content": "of another property for exercises"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** 1a1. ExerHealth informs the user that his/her new property is a"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "garylyp"
        },
        "content": "duplicate of a current property."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d UC05: Undo"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*System:* ExerHealth"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Actor:* user"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "garylyp"
        },
        "content": "1. User executes an undoable command"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "garylyp"
        },
        "content": "2. ExerHealth performs the change"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "garylyp"
        },
        "content": "3. User undoes the latest command"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "garylyp"
        },
        "content": "4. ExerHealth undoes the latest change"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Steps 3-4 can be repeated for as many times as required until there is"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "garylyp"
        },
        "content": "no undoable command left to undo"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* 3a. The undo history is empty"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** 3a1. ExerHealth informs user that undo is not allowed at this point"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "garylyp"
        },
        "content": "+"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d UC06: Redo"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*System:* ExerHealth"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Actor:* user"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "garylyp"
        },
        "content": "1. User undoes the latest command"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "garylyp"
        },
        "content": "2. ExerHealth undoes the latest change"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "garylyp"
        },
        "content": "3. User redoes the latest undoable command that was undone"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "garylyp"
        },
        "content": "4. ExerHealth redoes the command again"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "garylyp"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Steps 3-4 can be repeated for as many times as required until there are no more"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "garylyp"
        },
        "content": "undoable command left to redo"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "garylyp"
        },
        "content": "+"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "garylyp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* 3a. There is no action to redo as the user has not executed undo before"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "garylyp"
        },
        "content": "** 3a1. ExerHealth informs user that redo is not allowed at this point"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "garylyp"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "garylyp"
        },
        "content": ".  Should be able to hold up to 1000 exercises without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "garylyp"
        },
        "content": ".  Should work without requiring an installer."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "garylyp"
        },
        "content": ".  Should not depend on a remote server."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "garylyp"
        },
        "content": ".  Should be for a single user i.e. (not a multi-user product)."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[[regime]] Regime::"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "garylyp"
        },
        "content": "A specific set of exercises that are to be done together. For example,"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "a *Legs* regime at the gym can include multiple exercises such as"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "garylyp"
        },
        "content": "squats, hamstring curl and calf raises."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[[schedule]] Schedule::"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Planning of an exercise on a later day."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[[property]] Property::"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "garylyp"
        },
        "content": "An attribute of an exercise item. Pre-defined attributes include name,"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "garylyp"
        },
        "content": "quantity, units and calories."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "[[prefix]] Prefix::"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The term that comes before each parameter in the command. For example, the"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "prefix in `p/Number` is `p/`."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "garylyp"
        },
        "content": "   Expected: Shows the GUI with a set of sample exercises. The window size may not be optimum."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Deleting an exercise"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ". Deleting an exercise while all exercises are listed"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".. Prerequisites: List all exercises using the `list` command. Multiple exercises in the list."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".. Test case: `delete t/exercise i/1` +"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "   Expected: First exercise is deleted from the list. Details of the deleted exercise shown in the status message."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".. Test case: `delete t/exercise i/0` +"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "   Expected: No exercise is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".. Prerequisites: Must have ran `ExerHealth` at least once and have `exercisebook.json`."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".. Open up `exercisebook.json` with any text editor and change one of the dates to `//`, representing an invalid date. +"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "   Expected: `ExerHealth` will start with an empty exercise book due to data corruption. Exercise Panel will be empty."
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 77,
      "garylyp": 325,
      "jietung": 26,
      "-": 304,
      "kwekke": 51,
      "weihaw08": 94
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": ". Run the `seedu.exercise.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "e.g. `seedu.exercise.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "e.g. `seedu.exercise.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "e.g. `seedu.exercise.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d ExerHealth - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "By: `Team ExerHealth`      Since: `Sep 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Wish to get the summer body that the contestants in your school’s"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "beauty pageant has? Want to shed some weight that you have gained"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "from stress-eating?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Well wait no more! ExerHealth is a one-stop platform for students"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "who wish to embark on a journey of health and fitness. This application"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "is optimised for students who prefer to work with a Command Line"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Interface (CLI) while still having the benefits of a Graphical User"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Interface (GUI). If you can type fast and wish to maintain a healthy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "lifestyle, ExerHealth is that one app for you!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Interested? Jump to \u003c\u003cQuick Start\u003e\u003e to get started! Enjoy!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": ".  Download the latest `exerhealth.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for ExerHealth."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* *`get t/exercise`* : gets all the exercises ExerHealth is tracking."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* **`add`**`t/exercise n/Push ups d/1/10/2019 c/123` : adds a exercise named `Push ups` to ExerHealth."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `stats t/CAT_NAME`,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": "`CAT_NAME` is a parameter which can be used as `stats t/exercise`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* Words in `lower_case` are the compulsory keywords that inform ExerHealth about the category of"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garylyp"
        },
        "content": "information being added. e.g. `add t/exercise n/EXERCISE_NAME`, `t/exercise` is a keyword that informs ExerHealth about adding to the exercise tracker."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* Items in square brackets are optional e.g `d/date [c/CALORIES]` can be used as `d/1/10/2019 c/123`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": "or as `d/1/10/2019`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[m/MUSCLE]...`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "can be used as `{nbsp}` (i.e. 0 times), `m/glutes`, `m/glutes m/chest` etc."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME d/DATE c/CALORIES`,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": "`d/DATE c/CALORIES n/NAME` is also acceptable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Adding exercise/regime information: `add`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Adding exercise information +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Adds the relevant exercise information into ExerHealth."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "You can enter the following additional information for each exercise:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* Calories burnt in kcal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* Quantity of exercises completed and its units of measure"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* Muscle group(s) that are being worked out"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Format: `add t/exercise n/EXERCISE_NAME d/DATE [c/CALORIES] [q/QUANTITY] [u/UNITS] [m/MUSCLE]...`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* Dates that are entered have to be of the form `dd/MM/yyyy`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* The day of each date must be between 1 and 31 inclusive."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* The month of each date must be between 1 and 12 inclusive."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* If the day of the month entered is within the above range but exceeds the number of days present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "in that particular month, the date will be treated as the last day of that particular month e.g. if"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "`31/02/2019` is entered, it will be treated as `28/02/2019`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `add t/exercise n/Run d/19/09/2019`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `add t/exercise n/Swimming d/19/09/2019 c/2000`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `add t/exercise n/Bench press d/19/09/2019 c/500 q/50 u/reps m/Chest`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Adding exercises to scheduling regime +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Adds exercises from the exercises you have added into a new exercise regime."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "If a regime of the same name already exists, exercises will be added to the same scheduling regime."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jietung"
        },
        "content": "Format: `add t/regime n/REGIME_NAME [i/INDEX]...`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `add t/regime n/power sets i/1 i/2 i/3`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Adds the 1st, 2nd and 3rd exercise in the list to the regime named `power sets`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `add t/regime n/cardio i/4`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Adds the 4th exercise in the list to the regime named `cardio`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Listing all exercises : `list`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Retrieves all categories of information - Exercise and Regime - from ExerHealth."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "If you provide a category name, only information from that category will be shown."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "You can also include start and end dates to restrict the range of dates."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "If no dates are supplied, the most recent week of information from each category will be shown."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Format: `list [t/CAT_NAME] [s/START_DATE] [e/END_DATE]`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `list t/exercise`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `list t/regime`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `list t/exercise s/12/12/2019 e/17/12/2019`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Edit exercise information: `edit`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Edits the relevant exercise information into ExerHealth."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "You can edit all the possible information for exercises except for custom properties."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* The date entered for this command must follow the same requirements as that of `add` command."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* Edits the exercise at the specified `INDEX`. The index refers to the index number shown in the displayed exercise list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Format: `edit t/exercise i/INDEX [n/EXERCISE_NAME] [d/DATE] [c/CALORIES] [q/QUANTITY] [u/UNITS] [m/MUSCLE]...`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `edit t/exercise i/2 n/Running d/20/09/2019`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Edits the name and the date of the 2nd exercise to `Running` and `20/09/2019` respectively."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `edit t/exercise i/4 n/Swim d/21/09/2019 c/100`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Edits the name, date and calories burnt of the 4th exercise to `Swim`, `21/09/2019` and `100` respectively."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `edit t/exercise i/3 n/Bench press d/22/09/2019 c/240 q/10 u/sets m/Chest`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Edits the name, date, calories burnt, quantity, units and muscle group trained of the 3rd exercise to `Bench press`,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "`22/09/2019`, `240`, `10`, `sets` and `Chest` respectively."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003d\u003d\u003d Locating exercises by name: `find`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jietung"
        },
        "content": "Finds exercises whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jietung"
        },
        "content": "* The search is case insensitive. e.g `run` will match `Run`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jietung"
        },
        "content": "* The order of the keywords does not matter. e.g. `Bench Press` will match `Press Bench`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jietung"
        },
        "content": "* Only full words will be matched e.g. `Runs` will not match `Run`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jietung"
        },
        "content": "* Exercises matching at least one keyword will be returned (i.e. `OR` search). e.g. `Bench Press` will return `Incline Bench Press`, `Decline Bench Press`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jietung"
        },
        "content": "* `find bench press`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jietung"
        },
        "content": "* `find run`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003d\u003d\u003d Delete health information : `delete`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting exercise information"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jietung"
        },
        "content": "Deleting a certain exercise information from ExerHealth."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jietung"
        },
        "content": "Format: `delete t/exercise i/INDEX`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jietung"
        },
        "content": "* Deletes the exercise at the specified `INDEX`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jietung"
        },
        "content": "* The index refers to the index number shown in the displayed exercise list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jietung"
        },
        "content": "* `delete t/exercise i/2`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting exercise from scheduling regime"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jietung"
        },
        "content": "Deletes exercises from a certain scheduling regime."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jietung"
        },
        "content": "Format: `delete t/exercise n/REGIME_NAME [i/INDEX]...`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jietung"
        },
        "content": "****"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jietung"
        },
        "content": "* Deletes the exercise at the specified `INDEX`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jietung"
        },
        "content": "* If index is not provided, the command deletes the entire scheduling regime"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jietung"
        },
        "content": "* The index refers to the index number shown in the displayed regime list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jietung"
        },
        "content": "* The index, if provided, *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jietung"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jietung"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jietung"
        },
        "content": "* `delete t/regime n/cardio i/2` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jietung"
        },
        "content": "Deletes the exercise indexed 2 in the cardio regime"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jietung"
        },
        "content": "* `delete t/regime n/legs` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jietung"
        },
        "content": "Deletes the entire regime named legs"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Clears all entries from the exercise tracker. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003d\u003d\u003d Display statistics : `stats`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jietung"
        },
        "content": "Display the statistics of exercises."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jietung"
        },
        "content": "Format: `stats t/CAT_NAME h/CHART_TYPE [s/START_DATE] [d/END_DATE]`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jietung"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jietung"
        },
        "content": "* Supported chart types: Pie Chart, Line Chart, Bar Chart"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jietung"
        },
        "content": "* If no `START_DATE` and `END_DATE` are provided, the recent 7 days of history will be used."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jietung"
        },
        "content": "* If any date is provided, both `START_DATE` and `END_DATE` dates must be there."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jietung"
        },
        "content": "****"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jietung"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jietung"
        },
        "content": "* `stats t/exercise h/piechart`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jietung"
        },
        "content": "* `stats t/calories h/linechart`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jietung"
        },
        "content": "* `stats t/exercise h/barchart s/20/09/2019 e/27/09/2019`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d Undo previous command: `undo`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Undo the previous command entered."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "garylyp"
        },
        "content": "If there is no previous command, undo will do nothing."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "garylyp"
        },
        "content": "\u003d\u003d\u003d Redo undo-ed command: `redo`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Redo the previous command that was undo-ed by user."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "garylyp"
        },
        "content": "If there is no undo history, redo command will do nothing."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "garylyp"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Custom properties: `custom`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Adding custom properties"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Adds in a custom property which you can define for the exercises."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Once a new custom property is created, you can simply use the prefix name which you defined for the"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "property to the `add` and `edit` command to include information for the new property."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "* The prefix name can only contain alphabets and should not contain spaces."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* You must choose exactly one of the following as the parameter type for your custom property:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "`Text`, `Number`, `Date`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* Every word in the full name of each custom property will be changed to Start Case style, where the first letter of each"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "word is capitalised with the other letters in lower case e.g. `enD DaTe` will be changed to `End Date`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* The date entered for the custom properties must follow the same requirements as that of `add` command."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* You need not include the custom properties when adding a new exercise to the app."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Format: `custom s/PREFIX_NAME f/FULL_NAME p/PARAMETER_TYPE`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `custom s/a f/Ratings p/Number`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Creates a `Ratings` property for each exercise."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Information for this property can be updated for each exercise by using `a/NUMBER` in the relevant command where `NUMBER` refers to"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "a number."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `custom s/b f/rEmaRk p/Text`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Creates a `Remark` property for each exercise."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Information for this property can be updated for each exercise by using `b/TEXT` in the relevant command where"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "`TEXT` refers to a text sentence."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `custom s/c f/End Date p/Date`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Creates a `End Date` property for each exercise."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Information for this property can be updated for each exercise by using `s/DATE` in the relevant command where"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "`DATE` refers to a date."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Using `Ratings` as an example, you can now perform the following actions after adding it:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `add t/exercise n/Run d/01/10/2019 a/5`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Adds an exercise with the name `Run`, date `01/10/2019` and ratings `5` into the app."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `edit t/exercise i/4 a/3`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Edits the ratings of the 4th exercise in the list to `3`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Removing custom properties"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Removes a custom property which you have previously defined."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "This removes the custom property from all exercises."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "`FULL_NAME` denotes the name of the previously defined custom property."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Format: `custom r/FULL_NAME`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `custom r/Ratings`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `custom r/Remark`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Scheduling exercises: `schedule`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Schedules a regime"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Schedules an exercise regime for a certain date. If regime clashes with another scheduled regime, users will be prompted to resolve the conflict via a popup window. Refer to \u003c\u003cresolve\u003e\u003e for details on resolving scheduling conflicts."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Format: `schedule n/REGIME_NAME d/DATE`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `schedule n/cardio d/19/9/2019`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Completes a schedule regime"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Once a scheduled regime is completed, users can add that regime to the exercise tracker. The schedule is then deleted from the scheduling list."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Format: `schedule i/INDEX_OF_REGIME_IN_SCHEDULE`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `schedule i/2`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "[[resolve]]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Resolving scheduling conflicts: `resolve`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Taking one of the conflicting regimes completely"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Takes the scheduled regime or the conflicting regime completely and discarding the other. Neither regimes will be completely deleted from the user’s collection."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Format: `resolve n/REGIME_TO_TAKE`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `resolve n/cardio`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d\u003d Taking some exercises from some regime"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Takes some exercises from the scheduled regime and some from the conflicting regime to make a brand new regime. The new regime that is a result of the combination will be added  to the user’s collection and scheduled at the date of conflict. This new regime will also be added to the user’s collection of regimes"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Format: `resolve n/REGIME_NAME [i/INDEX_OF_EXERCISE_IN_SCHEDULED]... [r/INDEX_OF_EXERCISE_IN_CONFLICTING]...`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "****"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* Takes the exercise at the specified `INDEX`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* A new regime with `REGIME_NAME` will be created and added to user\u0027s collection"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `REGIME_NAME` must be a new name that does not exist in user\u0027s collection"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* The index refers to the index number shown in the displayed conflict resolving window."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* i/ is for index of the scheduled regime"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* r/ is for index of the conflicting regime"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "****"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* `resolve d/date n/cardios i/1 i/2 i/3 r/4 r/2`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Takes exercise 1, 2, 3 from scheduled regime and exercise 2, 4 from conflicting regime and adds them to a new regime called cardios"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d Suggesting ideas: `suggest`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d\u003d Suggest basic exercises"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Recommends exercises from ExerHealth\u0027s inbuilt database for beginners."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Format: `suggest s/basic`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d\u003d Suggest possible exercises"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Suggests exercises matching specified tags."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Based on matching muscle tags"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Format: `suggest s/possible m/MUSCLE`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* `suggest s/possible m/chest`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kwekke"
        },
        "content": "A list of exercises with chest muscle tag will be displayed."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* `suggest s/possible m/chest m/tricep`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kwekke"
        },
        "content": "A list of exercises tagged with chest or triceps will be displayed."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Based on matching custom properties `[Coming in v2.0]`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d\u003d Suggest intensity"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Recommends an increased quantity for the indexed exercise/regime based on its past record."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Format: `suggest intensity t/exercise i/INDEX`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kwekke"
        },
        "content": "`suggest intensity t/regime i/INDEX`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kwekke"
        },
        "content": "****"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* Takes the exercise at the specified `INDEX`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* i/ is for index of the scheduled regime"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kwekke"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* `suggest intensity t/exercise 1`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Displays the recommended quantity for the indexed exercise."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* `suggest intensity t/regime 1`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Displays the recommended quantity for all the exercises in the indexed regime."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ExerHealth data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Remind to do exercises `[coming in v2.0]`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Reminds you to do exercises."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003d\u003d\u003d Autocomplete of commands `[coming in v2.0]`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Autocompletes the commands while typing."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003d\u003d\u003d Importing data `[coming in v2.0]`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Imports data to update inbuilt database of exercises."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Add* : `add t/exercise n/EXERCISE_NAME d/DATE [c/CALORIES] [q/QUANTITY] [u/UNITS] [m/MUSCLE]...` +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `add t/exercise n/Bench press d/19/09/2019 c/500 q/50 u/reps m/Chest`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *List* : `list [t/CAT_NAME] [s/START_DATE] [e/END_DATE]`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `list t/exercise s/12/12/2019 e/17/12/2019`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Edit* : `edit t/exercise i/INDEX [n/EXERCISE_NAME] [d/DATE] [c/CALORIES] [q/QUANTITY] [u/UNITS] [m/MUSCLE]... `"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `edit t/exercise i/3 n/Bench press d/22/09/2019 c/240 q/10 u/sets m/Chest`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `find bench press`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Delete* : `delete t/exercise i/INDEX`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `delete t/exercise i/2`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Stats* : `stats t/CAT_NAME h/CHART_TYPE [s/START_DATE] [d/END_DATE]`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `stats t/exercise h/barchart s/20/09/2019 e/27/09/2019`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Schedule* : `schedule n/REGIME_NAME d/DATE`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `schedule n/cardio d/19/9/2019`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Resolve* : `resolve n/REGIME_TO_TAKE`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `resolve n/cardio`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* *Suggest basic* : `suggest s/basic`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* *Suggest possible* : `suggest s/possible [m/MUSCLE]...`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `suggest t/possible m/chest`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kwekke"
        },
        "content": "* *Suggest intensity* : `suggest s/intensity i/INDEX`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kwekke"
        },
        "content": "eg. `suggest intensity 1`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "* *Custom* : `custom s/PREFIX_NAME f/FULL_NAME p/PARAMETER_TYPE`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "e.g. `custom s/c f/End Date p/Date`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 205,
      "garylyp": 48,
      "jietung": 56,
      "-": 127,
      "weihaw08": 5,
      "kwekke": 53
    }
  },
  {
    "path": "docs/diagrams/ArchitectureDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UI UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Main MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Class \"Log Center\" as Logs UI_COLOR_T2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Hidden #FFFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$documents\u003e\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Main -up-\u003e UI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Main -left-\u003e Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "UI -\u003e Logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "UI -right-\u003e Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -\u003e Storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -down-\u003e Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Logs -right- Commons"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Hidden .down.\u003e Commons"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Hidden .down.\u003e Commons"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Hidden .down.\u003e Commons"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Storage .right.\u003eFile"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "User --\u003e UI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Main -[Hidden]-\u003e Hidden"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 3,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete t/exercise i/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete t/exercise i/1\"\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteExercise(e)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveExerciseBook(exerciseBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 4,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ReadOnlyResourceBook .down.\u003e \"{abstract}\\nResource\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ReadOnlyResourceBook o-right-\u003e \"1\" UniqueResourceList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "UniqueResourceList o--\u003e \"{abstract}\\nResource\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise -up-|\u003e\"{abstract}\\nResource\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Regime -up-|\u003e\"{abstract}\\nResource\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Schedule -up-|\u003e\"{abstract}\\nResource\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise *--\u003e \"1\" Date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise *--\u003e \"1\" Calories"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise *--\u003e \"1\" Quantity"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise *--\u003e \"1\" Unit"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise *--\u003e \"0..*\" Muscle"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise *--\u003e \"0..*\" CustomProperty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "CustomProperty *--\u003e \"1\" Prefix"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": "CustomProperty *--\u003e \"1\" \"\u003c\u003cenumeration\u003e\u003e\\nParameterType\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": "enum \"\u003c\u003cenumeration\u003e\u003e\\nParameterType\" {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    TEXT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    NUMBER,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    DATE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Regime *-left-\u003e \"1\" UniqueResourceList : regimeExercises"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Regime *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Schedule *-right-\u003e \"1\" Regime"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Schedule *--\u003e \"1 \" Date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "kwekke": 30
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "if () then ([is undoableCommand])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    :Executes command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    :Clears redo stack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    :Adds event to undo stack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "else"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    if () then ([is undo or redo command])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if () then ([is undo command])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            if () then ([undo stack not empty])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                :Pops event from"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    undo stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                : Executes undo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                method of event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                : Pushes event to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    redo stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            else([else])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        else([is redo command])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            if () then ([redo stack not empty])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            :Pops event from"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                 redo stack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            : Executes redo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            method of event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            : Pushes event to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                undo stack;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            else([else])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "         endif"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     else([else])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        :Executes command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "garylyp": 28,
      "-": 8
    }
  },
  {
    "path": "docs/diagrams/CustomActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ":User defines prefix, full name and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "parameter type of the new custom property;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ":Check if prefix, full name and parameter type are valid;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "if () then ([all are valid])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    :Check if prefix and full name are available;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if () then([prefix and full name are available])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            :Update prefix and full name in PropertyBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            :Add new custom property;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            :Inform user that prefix or full name is used;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    :Inform user that input is invalid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 22
    }
  },
  {
    "path": "docs/diagrams/CustomClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "hide Model fields"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "hide ModelManager members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "hide Prefix members"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "hide CustomProperty members"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "interface Model \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    isPrefixUsed(Prefix)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    isFullNameUsed(String)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    addCustomProperty(CustomProperty)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "class ModelManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "class PropertyBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    - {static} List\u003cCustomProperty\u003e CUSTOM_PROPERTIES"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    - Set\u003cPrefix\u003e prefixes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    - Set\u003cString\u003e fullNames"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    + isPrefixUsed(Prefix)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    + isFullNameUsed(String)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    + addCustomProperty(CustomProperty)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Model \u003c|.. ModelManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ModelManager --\u003e \"1\" PropertyBook: holds \u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "PropertyBook o-Left-\u003e \"*\" CustomProperty: tracks \u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "PropertyBook \u003c.Left. Prefix: updates \u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 34
    }
  },
  {
    "path": "docs/diagrams/CustomSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "box \"Logic\" LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    participant \":ExerciseBookParser\" as ExerciseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    participant \":CustomCommandParser\" as CustomCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    participant \":CustomProperty\" as CustomProperty LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    participant \":CustomCommand\" as CustomCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "box \"Model\" MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    participant \":Model\" as Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "-\u003e LogicManager: execute(\"custom s/r f/Rating p/Number\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "LogicManager -\u003e ExerciseBookParser: parseCommand(\"custom s/r f/Rating p/Number\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate ExerciseBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "create CustomCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerciseBookParser -\u003e CustomCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate CustomCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommandParser --\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate CustomCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerciseBookParser -\u003e CustomCommandParser: parse(\" s/r f/Rating p/Number\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate CustomCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "create CustomProperty"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommandParser -\u003e CustomProperty"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate CustomProperty"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomProperty --\u003e CustomCommandParser: toAdd"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate CustomProperty"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "create CustomCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommandParser -\u003e CustomCommand: new CustomCommand(toAdd)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate CustomCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommand --\u003e CustomCommandParser: cc"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate CustomCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommandParser --\u003e ExerciseBookParser: cc"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate CustomCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommandParser -[hidden]-\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "destroy CustomCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerciseBookParser --\u003e LogicManager: cc"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate ExerciseBookParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "LogicManager -\u003e CustomCommand: execute()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate CustomCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommand -\u003e Model: addCustomProperty(toAdd)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "Model --\u003e CustomCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CommandResult --\u003e CustomCommand: result"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "CustomCommand --\u003e LogicManager: result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate CustomCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003c-- LogicManager :result"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 77
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "participant \":ExerciseBookParser\" as ExerciseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "[-\u003e LogicManager : execute(\"delete t/exercise i/1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "LogicManager -\u003e ExerciseBookParser : parseCommand(\"delete t/exercise i/1\"\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate ExerciseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ExerciseBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "DeleteCommandParser --\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ExerciseBookParser -\u003e DeleteCommandParser : parse(\"t/exercise i/1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "DeleteCommandParser --\u003e ExerciseBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ExerciseBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "deactivate ExerciseBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "DeleteCommand -\u003e Model : deleteExercise(e)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 12,
      "-": 57
    }
  },
  {
    "path": "docs/diagrams/EventClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    package Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Interface UndoableCommand \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Class XYZCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    package Event {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Interface Event \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Class XYZEvent"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        class EventFactory"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        class EventHistory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        class EventPayload"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        class HiddenEvent #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    package Model{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    XYZCommand .up.|\u003e UndoableCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    XYZCommand *--\u003e EventPayload : stores \u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    Command .up.\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    note left of XYZCommand: XYZCommand \u003d \\nAddCommand, \\nDeleteCommand, \\nEditCommand, \\nClearCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    XYZEvent .up.|\u003e Event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    XYZEvent .right.\u003e \"1\" EventPayload : extracts \u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    Event ..\u003e Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EventFactory ..\u003e XYZEvent : creates \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EventFactory .up.\u003e Event #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EventFactory ..\u003e UndoableCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EventHistory .up.\u003e EventFactory"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EventHistory ..\u003e UndoableCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EventHistory *-up-\u003e \"0..*\" Event"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    note bottom of XYZEvent: XYZEvent \u003d \\nAddExerciseEvent, \\nDeleteRegime, \\nEditEvent, etc"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "garylyp": 49
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Class ExerciseBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "LogicManager --\u003e\"1\" ExerciseBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ExerciseBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Class ModelManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UserPrefs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    Class XYZReadOnlyResourceBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    Class XYZUniqueResourceList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    Package Resource {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        class \"{abstract}\\nResource\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        Class Exercise"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        Class Regime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        Class Schedule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    Package Property {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Class PropertyBook"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ModelManager o-right-\u003e \"1\" PropertyBook"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Exercise -up-|\u003e \"{abstract}\\nResource\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Regime -up-|\u003e \"{abstract}\\nResource\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Schedule -left-|\u003e \"{abstract}\\nResource\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ModelManager o-left-\u003e \"4\" XYZReadOnlyResourceBook"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": "XYZReadOnlyResourceBook o--\u003e XYZUniqueResourceList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "XYZUniqueResourceList o--\u003e \"0..*\" \"{abstract}\\nResource\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ModelManager o-down-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwekke"
        },
        "content": "UserPrefs .right.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "kwekke": 23,
      "weihaw08": 2
    }
  },
  {
    "path": "docs/diagrams/RedoActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": ":User executes redo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "if () then ([redo stack not empty])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": ":Pop Event from"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    redo stack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ": Executes redo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "method of Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": ": Push Event to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    undo stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "else([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "garylyp": 20
    }
  },
  {
    "path": "docs/diagrams/ScheduleActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "skinparam activityShape rectangle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ":Entered schedule command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "if () then ([Conflict])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    :ResolveWindow pops up;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    repeat"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        :User enters commands;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if () then ([ResolveCommand])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            if () then ([Valid Name])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                :resolve conflict and\\ncreate new regime\\n with valid name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            else ([Invalid name])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                :show invalid name message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        else ([Not ResolveCommand])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            :show invalid command message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    repeat while (conflict resolved?) is (no)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -\u003e yes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    :ResolveWindow close;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "else ([No Conflict])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ":Schedule a regime\\n successfully;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "-\u003e Program resumes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 27
    }
  },
  {
    "path": "docs/diagrams/ScheduleConflictSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "@startuml ScheduleConflict"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "title __Schedule Conflict__"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "actor User USER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "participant \"__:Ui__\" as Ui UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "participant \"__:Logic__\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "participant \"__:Model__\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "User -[USER_COLOR]\u003e Ui: schedule n/cardio d/12/12/2012"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Ui -[UI_COLOR]\u003e Logic: execute(\"n/cardio d/12/12/2012\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Logic -[LOGIC_COLOR]\u003e Model: hasSchedule(schedule)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Model --[MODEL_COLOR]\u003e Logic: true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Logic --[LOGIC_COLOR]\u003e Ui: CommandResult(\"Schedule Conflict\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Ui -[UI_COLOR]\u003e Ui: createResolveWindow()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Ui --[UI_COLOR]\u003e User"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 30
    }
  },
  {
    "path": "docs/diagrams/ScheduleResolveClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "hide Conflict members"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "hide Schedule members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "hide ResolveCommand members"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "hide Model fields"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "hide ModelManager members"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "class Conflict {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "class Schedule {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "class ResolveCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    resolveConflict(Conflict)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "class ModelManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Conflict *-left-\u003e \"1\" Schedule : conflicting \u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Conflict *--\u003e \"1\" Schedule : scheduled \u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ResolveCommand -left\u003e Model : calls \u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ResolveCommand --\u003e \"1 \" Conflict"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ModelManager -right-\u003e \" 0...1  \" Conflict : resolves \u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 32
    }
  },
  {
    "path": "docs/diagrams/ScheduleResolveSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "@startuml ScheduleResolve"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "title __Schedule Resolve__"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "actor User USER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "participant \"__:Ui__\" as Ui UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "participant \"__:Logic__\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "participant \"__:Model__\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "participant \"__:Storage__\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "ref over User"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Schedule Conflict"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "end ref"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "User -[USER_COLOR]\u003e Ui: resolve n/cardio2 i/1 r/2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Ui UI_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Ui -[UI_COLOR]\u003e Logic: execute(\"n/cardio2 i/1 r/2\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Logic -[LOGIC_COLOR]\u003e Model: resolveConflict(conflict)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Model --[MODEL_COLOR]\u003e Logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Logic -[LOGIC_COLOR]\u003e Storage: saveBook()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Storage -[STORAGE_COLOR]\u003e Storage: saveToFile()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e Logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Logic --[LOGIC_COLOR]\u003e Ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Ui -[UI_COLOR]\u003e Ui: closeResolveWindow()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "activate Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "Ui --[UI_COLOR]\u003e User"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "deactivate Ui"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 47
    }
  },
  {
    "path": "docs/diagrams/StatisticActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "-Entered stats command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "if () then ([Valid Category Type])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "    if () then ([Valid Chart type])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if() then ([no date provided])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "        -set dates as \\n past 7 days"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "        -filter exercises for \\n the past 7 days"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "        else ([dates provided])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "        -filter exercises \\n within the \\n given dates"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -generate statistic"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -generate chart"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -display chart"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "    else ([Invalid chart type])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -invalid chart \\n type message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "else ([Invalid Category Type])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "-invalid category \\n message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "stop"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jietung": 29
    }
  },
  {
    "path": "docs/diagrams/StatisticClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "package Statistic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "    class Statistic"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "    class StatsFactory"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "    StatsFactory - Statistic : creates \u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "class StatsFactory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -ObservableList\u003cExercise\u003e exercises"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -String chart"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -String category"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -Date startDate"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -Date endDate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "    +generateStatistics() : Statistic"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -getTotalExerciseQuantiity()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -getTotalCalories()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -getFilteredExercise"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "class Statistic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -String category"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -String chart"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -ArrayList\u003cString\u003e properties"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "    -ArrayList\u003cDouble\u003e values"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "    +getCategory() : String"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "    +getChart() : String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "    +getProperties() : ArrayList\u003cString\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "    +getValues() : ArrayList\u003cDouble\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jietung": 33
    }
  },
  {
    "path": "docs/diagrams/StatisticSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "@startuml Statistic"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "title __Statistic__"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "actor User USER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "participant \"__:Ui__\" as Ui UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "participant \"__:Logic__\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "participant \"__:Model__\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "participant \"__:Statistic__\" as Statistic #ABC"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "User -[USER_COLOR]\u003e Ui: stats t/exercise h/piechart"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "activate Ui UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "Ui -[UI_COLOR]\u003e Logic: execute(\"t/exercise h/piechart\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "activate Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "Logic -[LOGIC_COLOR]\u003e Model: getExerciseBook()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "Model -[MODEL_COLOR]\u003e Statistic: generateStatistic(exerciseBook)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "activate Statistic #ABC"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "return statistic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "Model -[MODEL_COLOR]\u003e Logic: statistic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "Logic --[LOGIC_COLOR]\u003e Ui: statistic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "Ui --[UI_COLOR]\u003e User"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "deactivate Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jietung": 33
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    package bookstorage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Interface XYZResourceBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    package resource {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        class \"{abstract}\\nXYZJsonAdaptedResource\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    package serializablebook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        class \"{abstract}\\nXYZSerializableResourceBook\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Interface PropertyBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Class StorageManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    class JsonPropertyBookStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    class JsonSerializablePropertyBook"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "StorageManager o--\u003e \"4 \" XYZResourceBookStorage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "StorageManager o--\u003e \"1\" UserPrefsStorage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "StorageManager o-\u003e \"1\" PropertyBookStorage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\"{abstract}\\nXYZSerializableResourceBook\" o-left-\u003e \"0...* \" \"{abstract}\\nXYZJsonAdaptedResource\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "XYZResourceBookStorage --\u003e \"{abstract}\\nXYZSerializableResourceBook\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "JsonUserPrefsStorage ..|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "JsonPropertyBookStorage ..|\u003e PropertyBookStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "JsonPropertyBookStorage -up-\u003e JsonSerializablePropertyBook"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 21,
      "-": 14,
      "weihaw08": 6
    }
  },
  {
    "path": "docs/diagrams/SuggestActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": "skinparam activityShape rectangle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": ":Entered suggest command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": ":check if suggest type is valid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "if() then ([Valid suggest type])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "if() then ([suggest type \u003d\u003d \"basic\"])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    :updates list to show basic exercises;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "else ([suggest type \u003d\u003d \"possible\"])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    if() then ([valid arguments])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        :Form predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        :updates list to show exercises with matching predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    else ([Invalid arguments])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        :show invalid arguments message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": "else ([Invalid suggest type])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    :show invalid suggest type message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "-\u003e Program resumes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kwekke": 24
    }
  },
  {
    "path": "docs/diagrams/SuggestSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "participant \":ExerciseBookParser\" as ExerciseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "participant \":SuggestCommandParser\" as SuggestCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "participant \"s:SuggestPossibleCommand\" as SuggestPossibleCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "[-\u003e LogicManager : execute(\"suggest s/possible m/Leg\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": "LogicManager -\u003e ExerciseBookParser : parseCommand(\"suggest s/possible m/Leg\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate ExerciseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "create SuggestCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ExerciseBookParser -\u003e SuggestCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate SuggestCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestCommandParser --\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate SuggestCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ExerciseBookParser -\u003e SuggestCommandParser : parse(\"s/possible m/Leg\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate SuggestCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "create SuggestPossibleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestCommandParser -\u003e SuggestPossibleCommand : (muscles, customProperties)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate SuggestPossibleCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestPossibleCommand --\u003e SuggestCommandParser : s"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate SuggestPossibleCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestCommandParser --\u003e ExerciseBookParser : s"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate SuggestCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestCommandParser -[hidden]-\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "destroy SuggestCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ExerciseBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate ExerciseBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwekke"
        },
        "content": "LogicManager -\u003e SuggestPossibleCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate SuggestPossibleCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestPossibleCommand --\u003e SuggestPossibleCommand : getPredicate()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate SuggestPossibleCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestPossibleCommand --\u003e SuggestPossibleCommand :p"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate SuggestPossibleCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestPossibleCommand -\u003e Model : updateSuggestedExerciseList(p)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Model --\u003e SuggestPossibleCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwekke"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestPossibleCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwekke"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwekke"
        },
        "content": "CommandResult --\u003e SuggestPossibleCommand : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwekke"
        },
        "content": "SuggestPossibleCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate SuggestPossibleCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwekke"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwekke"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kwekke"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kwekke": 76
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Class ResolveWindow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Class LeftRightDisplay"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Class XYZResourceListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "Class XYZResourceCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": "MainWindow *--\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": "MainWindow *--\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": "MainWindow *--\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "MainWindow *--\u003e ResolveWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "MainWindow *--\u003e \"4\" XYZResourceListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "XYZResourceListPanel *--\u003e XYZResourceCard"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "HelpWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ResolveWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwekke"
        },
        "content": "LeftRightDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwekke"
        },
        "content": "XYZResourceListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwekke"
        },
        "content": "XYZResourceCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwekke"
        },
        "content": "XYZResourceCard ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwekke"
        },
        "content": "UiManager --\u003e Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwekke"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwekke"
        },
        "content": "ResolveWindow -\u003e LeftRightDisplay"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwekke"
        },
        "content": "HelpWindow -[hidden]- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwekke"
        },
        "content": "CommandBox -[hidden]- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "kwekke": 23
    }
  },
  {
    "path": "docs/diagrams/UndoActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": ":User executes undo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "if () then ([undo stack not empty])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": ":Pop Event from"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    undo stack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ": Executes undo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "method of Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": ": Push Event to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    redo stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "else([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "garylyp": 20
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "title Sequence Diagram for Undo Command on Edit Exercise"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":ExerciseBookParser\" as ExerciseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":EventHistory\" as EventHistory LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":EditEvent\" as EditEvent LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[-\u003e LogicManager : execute(\"undo\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    LogicManager -\u003e ExerciseBookParser : parseCommand(\"undo\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    activate ExerciseBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        create UndoCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        ExerciseBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        activate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        UndoCommand --\u003e ExerciseBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deactivate UndoCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    ExerciseBookParser --\u003e LogicManager : command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    deactivate ExerciseBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    LogicManager -\u003e UndoCommand : execute(model)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    activate UndoCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        UndoCommand -\u003e EventHistory : undo(model)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        activate EventHistory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            EventHistory -\u003e EditEvent : undo(model)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            activate EditEvent"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                EditEvent -\u003e Model : set(editedExercise, originalExercise)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                activate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                EditEvent -[hidden]-\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                Model --\u003e EditEvent"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            EditEvent --\u003e EventHistory"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            deactivate EditEvent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory --\u003e UndoCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        deactivate EventHistory"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        UndoCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        CommandResult --\u003e UndoCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    UndoCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    deactivate UndoCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    UndoCommand -[hidden]-\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    destroy UndoCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "garylyp": 42,
      "-": 31
    }
  },
  {
    "path": "docs/diagrams/UndoableCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "title Sequence Diagram for Edit Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":EditCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":EventHistory\" as EventHistory LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":EventFactory\" as EventFactory LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":EditEvent\" as EditEvent LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \":EventPayload\" as EventPayload LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[-\u003e EditCommand : execute(model)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    create EventPayload"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EditCommand -\u003e EventPayload"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    activate EventPayload"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    return payload"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EditCommand -\u003e EventPayload : put(KEY_ORIGINAL_EXERCISE, originalExercise)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    activate EventPayload"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EditCommand -\u003e EventPayload : put(KEY_EDITED_EXERCISE, editedExercise)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    activate EventPayload"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EditCommand -\u003e EventHistory : addCommandToUndoStack(command)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    activate EventHistory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory -\u003e EventFactory : commandToEvent(command)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        activate EventFactory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            create EditEvent"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            EventFactory -\u003e EditEvent : editEvent(payload)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            activate EditEvent"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                EditEvent -\u003e EventPayload : get(KEY_ORIGINAL_EXERCISE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                activate EventPayload"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                EditEvent -\u003e EventPayload : get(KEY_EDITED_EXERCISE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                activate EventPayload"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return event"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return event"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EventHistory --\u003e EditCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    deactivate EventHistory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EditCommand -\u003e Model : set(originalExercise, editedExercise)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EditCommand -[hidden]-\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    return"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EditCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    CommandResult --\u003e EditCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garylyp"
        },
        "content": "[\u003c-- EditCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garylyp"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garylyp"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "garylyp": 78
    }
  },
  {
    "path": "docs/team/garylyp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d Gary Lim Yan Peng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d PROJECT: ExerHealth"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerHealth is a desktop application used for tracking and scheduling the user\u0027s exercises."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "weihaw08": 5
    }
  },
  {
    "path": "docs/team/jietung.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d Chai Jie Tung - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d PROJECT: ExerHealth"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerHealth is a desktop application used for tracking and scheduling the user\u0027s exercises."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "weihaw08": 5
    }
  },
  {
    "path": "docs/team/kwekke.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d Kwek Kee En - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d PROJECT: ExerHealth"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerHealth is a desktop application used for tracking and scheduling the user\u0027s exercises."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "weihaw08": 5
    }
  },
  {
    "path": "docs/team/t-cheepeng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d Tan Chee Peng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d PROJECT: ExerHealth"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerHealth is a desktop application used for tracking and scheduling the user\u0027s exercises."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "weihaw08": 5
    }
  },
  {
    "path": "docs/team/weihaw08.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d Ho Wei Haw - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003d\u003d PROJECT: ExerHealth"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "ExerHealth is a desktop application used for tracking and scheduling the user\u0027s exercises."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "weihaw08": 5
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.exercise.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "`seedu.exercise.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/seedu/exercise/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/exercise/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/exercise/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.LogicManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.util.DefaultPropertyBookUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.JsonPropertyBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.PropertyBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.StorageBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonExerciseBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonRegimeBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonScheduleBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.ui.Ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.ui.UiManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Additionally, the MainApp wil keep track of the state of the program."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static State state;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ExerciseBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonExerciseBookStorage exerciseBookStorage \u003d new JsonExerciseBookStorage(userPrefs.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonExerciseBookStorage exerciseDatabaseStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            new JsonExerciseBookStorage(userPrefs.getAllExerciseBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonRegimeBookStorage regimeBookStorage \u003d new JsonRegimeBookStorage(userPrefs.getRegimeBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonScheduleBookStorage scheduleBookStorage \u003d new JsonScheduleBookStorage(userPrefs.getScheduleBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        PropertyBookStorage propertyBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonPropertyBookStorage(userPrefs.getPropertyBookFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        storage \u003d new StorageBook(exerciseBookStorage, exerciseDatabaseStorage, regimeBookStorage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            scheduleBookStorage, userPrefsStorage, propertyBookStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s exercise book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * The data from the sample exercise book will be used instead if {@code storage}\u0027s exercise book is not found,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * or an empty exercise book will be used instead if errors occur when reading {@code storage}\u0027s exercise book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e initialData \u003d readExerciseData(storage, storage.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cRegime\u003e initialRegimeData \u003d readRegimeData(storage, storage.getRegimeBookFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e initialDatabase \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            readExerciseData(storage, storage.getExerciseDatabaseFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cSchedule\u003e initialScheduleData \u003d readScheduleData(storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        PropertyBook initialPropertyBook \u003d getInitialPropertyBook(storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new ModelManager(initialData, initialRegimeData,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            initialDatabase, initialScheduleData, userPrefs, initialPropertyBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns a {@code ReadOnlyResourceBook\u003cRegime\u003e} using the file at {@code path}. \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * The data is read from {@code storage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ReadOnlyResourceBook\u003cRegime\u003e readRegimeData(Storage storage, Path path) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Optional\u003cReadOnlyResourceBook\u003cRegime\u003e\u003e regimeBookOptional;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cRegime\u003e regimeData;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            regimeBookOptional \u003d storage.readRegimeBook(path);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            if (regimeBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RegimeBook\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            regimeData \u003d regimeBookOptional.orElseGet(SampleDataUtil::getSampleRegimeBook);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RegimeBook\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            regimeData \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RegimeBook\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            regimeData \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return regimeData;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns a {@code ReadOnlyResourceBook\u003cExercise\u003e} using the file at {@code path}. \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * The data is read from {@code storage}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ReadOnlyResourceBook\u003cExercise\u003e readExerciseData(Storage storage, Path path) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e exerciseBookOptional;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e exerciseData;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jietung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            exerciseBookOptional \u003d storage.readExerciseBook(path);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            if (exerciseBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExerciseBook\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jietung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            exerciseData \u003d exerciseBookOptional.orElseGet(SampleDataUtil::getSampleExerciseBook);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jietung"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            logger.warning(\"Data file not in correct format. Will be starting with an empty ExerciseBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            exerciseData \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jietung"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExerciseBook\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            exerciseData \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return exerciseData;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns a {@code PropertyBook} from {@code storage}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ReadOnlyResourceBook\u003cSchedule\u003e readScheduleData(Storage storage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Optional\u003cReadOnlyResourceBook\u003cSchedule\u003e\u003e scheduleBookOptional;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cSchedule\u003e initialScheduleData;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            scheduleBookOptional \u003d storage.readScheduleBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            if (!scheduleBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ScheduleBook\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            initialScheduleData \u003d scheduleBookOptional.orElseGet(SampleDataUtil::getSampleScheduleBook);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ScheduleBook\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            initialScheduleData \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ScheduleBook\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            initialScheduleData \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return initialScheduleData;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private PropertyBook getInitialPropertyBook(Storage storage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Optional\u003cPropertyBook\u003e propertyBookOptional;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        PropertyBook initialPropertyBook;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            propertyBookOptional \u003d storage.readPropertyBook();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (propertyBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                logger.info(\"Data for PropertyBook not found. Will be starting with a\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                    + \" default PropertyBook\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            initialPropertyBook \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                propertyBookOptional.orElseGet(DefaultPropertyBookUtil::getDefaultPropertyBook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + \" a default PropertyBook\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            initialPropertyBook \u003d getDefaultPropertyBook();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + \"a default PropertyBook\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            initialPropertyBook \u003d getDefaultPropertyBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return initialPropertyBook;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExerciseBook\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        logger.info(\"Starting ExerciseBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        state \u003d State.NORMAL;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jietung"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Exercise Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static State getState() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Sets the current state of the program."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Only subclasses of {@code Command} can and should call this method."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static void setState(State newState) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireAllNonNull(newState);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        state \u003d newState;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 39,
      "jietung": 29,
      "-": 138,
      "weihaw08": 87,
      "kwekke": 23
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 800;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 2,
      "jietung": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final String LOG_FILE \u003d \"exerhealth.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "jietung": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX \u003d \"The exercise index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_INVALID_REGIME_DISPLAYED_INDEX \u003d \"The regime index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_INVALID_SCHEDULE_DISPLAYED_INDEX \u003d \"The schedule index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_EXERCISES_LISTED_OVERVIEW \u003d \"%1$d exercises listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_INVALID_CONTEXT \u003d \"Unable to issue %1$s here\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 2,
      "jietung": 2,
      "-": 10,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/State.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Represents the current state of the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Only subclasses of {@code Command} can alter the state of the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * The main state is held in {@link MainApp}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public enum State {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    IN_CONFLICT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    NORMAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 13
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/ValidationRegex.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Encapsulates the different validation regex that help to check if an input is correct."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ValidationRegex {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String ONLY_NUMBERS \u003d \"\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String ONLY_ALPHABETS_AND_SPACE \u003d \"^[ A-Za-z]+$\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String ONLY_ALPHABETS \u003d \"^[A-Za-z]+$\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String ONLY_ALPHABETS_NUMBERS_AND_SPACE \u003d \"^[ A-Za-z0-9]+$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 13
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/core/index/IndexUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Utility methods for dealing with {@link Index}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class IndexUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static \u003cT\u003e boolean isIndexOutOfBounds(Index index, List\u003cT\u003e list) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return index.getZeroBased() \u003e\u003d list.size();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Checks if any of the indexes in {@code indexList} is out of bounds of the given {@code list}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static \u003cT\u003e boolean areIndexesOutOfBounds(List\u003cIndex\u003e indexList, List\u003cT\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        for (Index index : indexList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            if (isIndexOutOfBounds(index, list)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 25
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final String UNEXPECTED_STATE \u003d \"State of program is not %1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Checks that {@code state} of the program is valid. Used for validating a particular"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * state of the program in a method."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @throws IllegalStateException if {@code MainApp\u0027s} state is not as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static void requireMainAppState(State state) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(state);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (MainApp.getState() !\u003d state) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new IllegalStateException(String.format(UNEXPECTED_STATE, state.toString()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 16,
      "jietung": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Appends two list together into a new list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static \u003cT\u003e List\u003cT\u003e append(List\u003cT\u003e first, List\u003cT\u003e second) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireAllNonNull(first, second);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        List\u003cT\u003e result \u003d new ArrayList\u003c\u003e(first);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        result.addAll(second);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static \u003cT\u003e boolean areListsEmpty(List\u003cT\u003e first, List\u003cT\u003e second) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return first.isEmpty() \u0026\u0026 second.isEmpty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 16,
      "jietung": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/exercise/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.conflict.Conflict;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the ExerciseBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * @see seedu.exercise.model.Model#getExerciseBookData()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ReadOnlyResourceBook\u003cExercise\u003e getExerciseBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of exercises."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns the RegimeBook."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * @see seedu.exercise.model.Model#getAllRegimeData()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ReadOnlyResourceBook\u003cRegime\u003e getRegimeBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "    ObservableList\u003cRegime\u003e getFilteredRegimeList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of schedules"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    ObservableList\u003cSchedule\u003e getFilteredScheduleList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns the user prefs\u0027 exercise book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns the user prefs\u0027 regime book file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jietung"
        },
        "content": "    Path getRegimeBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Returns an unmodifiable view of the suggested list of exercises."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    ObservableList\u003cExercise\u003e getSuggestedExerciseList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Returns the conflict that needs to be resolved in {@code Model}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * This method should only be called when {@code MainApp}\u0027s state is {@link State#IN_CONFLICT}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    Conflict getConflict();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 13,
      "jietung": 18,
      "-": 36,
      "weihaw08": 15,
      "kwekke": 6
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_CONTEXT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.requireMainAppState;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.ResolveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.ExerciseBookParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.conflict.Conflict;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final ExerciseBookParser exerciseBookParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "        exerciseBookParser \u003d new ExerciseBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Command command \u003d exerciseBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!isCommandExecutedInCorrectState(command)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_CONTEXT, command.getClass().getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            saveAllData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cExercise\u003e getExerciseBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return model.getExerciseBookData();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cRegime\u003e getRegimeBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return model.getAllRegimeData();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public ObservableList\u003cRegime\u003e getFilteredRegimeList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return model.getFilteredRegimeList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return model.getFilteredScheduleList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return model.getExerciseBookFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public Path getRegimeBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return model.getRegimeBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public ObservableList\u003cExercise\u003e getSuggestedExerciseList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return model.getSuggestedExerciseList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Conflict getConflict() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireMainAppState(State.IN_CONFLICT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return model.getConflict();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Saves all book data from ExerHealth to disk"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @throws IOException if saving fails"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void saveAllData() throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        storage.saveExerciseBook(model.getExerciseBookData());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        storage.saveScheduleBook(model.getAllScheduleData());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        storage.saveRegimeBook(model.getAllRegimeData());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        storage.savePropertyBook(model.getPropertyBook());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private boolean isCommandExecutedInCorrectState(Command command) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return (MainApp.getState() \u003d\u003d State.NORMAL \u0026\u0026 !(command instanceof ResolveCommand))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                || (MainApp.getState() \u003d\u003d State.IN_CONFLICT \u0026\u0026 command instanceof ResolveCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 37,
      "jietung": 25,
      "-": 56,
      "weihaw08": 14,
      "kwekke": 6
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.AddExerciseCommand.MESSAGE_USAGE_EXERCISE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.AddRegimeCommand.MESSAGE_USAGE_REGIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Represents an AddCommand with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public abstract class AddCommand extends Command implements UndoableCommand, ResourceTypeDependentCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \": Adds exercise to exercise list or adds regime to regime list.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \"EXERCISE: \" + MESSAGE_USAGE_EXERCISE + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \"REGIME: \" + MESSAGE_USAGE_REGIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String getUndoableCommandWord() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 6,
      "jietung": 8,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/AddExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.AddExerciseEvent.KEY_EXERCISE_TO_ADD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.events.EventHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventPayload;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Adds an exercise to the exercise book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class AddExerciseCommand extends AddCommand implements PayloadCarrierCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_USAGE_EXERCISE \u003d \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_NAME + \"EXERCISE NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_CALORIES + \"CALORIES \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_UNIT + \"UNITS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"[\" + PREFIX_MUSCLE + \"MUSCLE]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"\\t\\tExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_CATEGORY + \"exercise \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_NAME + \"Run \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_DATE + \"22/09/2019 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_CALORIES + \"1500 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_QUANTITY + \"2.4 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_UNIT + \"km \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_MUSCLE + \"Leg\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the exercise book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String RESOURCE_TYPE \u003d \"exercise\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private Exercise exerciseToAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private EventPayload\u003cExercise\u003e eventPayload;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Creates an AddExerciseCommand to add the specified {@code Exercise}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public AddExerciseCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        exerciseToAdd \u003d exercise;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload \u003d new EventPayload\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (model.hasExercise(exerciseToAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.addExercise(exerciseToAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_EXERCISE_TO_ADD, exerciseToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory.getInstance().addCommandToUndoStack(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, exerciseToAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public EventPayload\u003cExercise\u003e getPayload() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return eventPayload;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String getResourceType() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return RESOURCE_TYPE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": "            || (other instanceof AddExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            \u0026\u0026 exerciseToAdd.equals(((AddExerciseCommand) other).exerciseToAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 24,
      "jietung": 60,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/AddRegimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.AddRegimeEvent.KEY_REGIME_TO_ADD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.EditRegimeEvent.KEY_EDITED_REGIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.EditRegimeEvent.KEY_IS_REGIME_EDITED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.EditRegimeEvent.KEY_ORIGINAL_REGIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventPayload;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.UniqueResourceList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Adds a regime to the regime book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class AddRegimeCommand extends AddCommand implements PayloadCarrierCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_USAGE_REGIME \u003d \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_NAME + \"REGIME NAME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_INDEX + \"INDEX\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"\\t\\tExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_CATEGORY + \"regime \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_NAME + \"power set \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_INDEX + \"2\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NEW_REGIME \u003d \"Added new regime to regime list.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ADD_EXERCISE_TO_REGIME \u003d \"Added exercises to regime.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE_IN_REGIME \u003d \"Duplicate exercise found in regime.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_NO_EXERCISES_ADDED \u003d \"No index provided, nothing changes.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INDEX \u003d \"There is duplicate index.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String RESOURCE_TYPE \u003d \"regime\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private List\u003cIndex\u003e toAddIndexes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private EventPayload\u003cObject\u003e eventPayload;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public AddRegimeCommand(List\u003cIndex\u003e indexes, Name name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireAllNonNull(indexes, name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.toAddIndexes \u003d indexes;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.eventPayload \u003d new EventPayload\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jietung"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        checkDuplicateIndexes();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        checkValidIndexes(toAddIndexes, lastShownList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (!isRegimeInModel(model)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            commandResult \u003d addNewRegimeToModel(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            commandResult \u003d addExercisesToExistingRegime(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory.getInstance().addCommandToUndoStack(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Adds a new regime with exercises added based on the list of {@code Index} passed into the command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private CommandResult addNewRegimeToModel(Model model) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Regime regime \u003d new Regime(name, new UniqueResourceList\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        addExercisesToRegime(regime, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.addRegime(regime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        addToEventPayloadForAddRegime(regime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS_NEW_REGIME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Adds exercises to the specified regime based on the list of {@code Index} passed into the command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private CommandResult addExercisesToExistingRegime(Model model) throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        checkIndexesNotEmpty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Regime originalRegime \u003d getRegimeFromModel(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Regime editedRegime \u003d originalRegime.deepCopy();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        addExercisesToRegime(editedRegime, model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        addToEventPayloadForEditRegime(originalRegime, editedRegime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.setRegime(originalRegime, editedRegime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.updateFilteredRegimeList(Model.PREDICATE_SHOW_ALL_REGIMES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS_ADD_EXERCISE_TO_REGIME);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the actual regime object with all the existing exercises."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return the existing regime from model"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private Regime getRegimeFromModel(Model model) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        List\u003cRegime\u003e regimes \u003d model.getFilteredRegimeList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        int regimeIndex \u003d model.getRegimeIndex(new Regime(name, new UniqueResourceList\u003c\u003e()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return regimes.get(regimeIndex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Adds all exercises into the specified regime based on the given indexes."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param regime the regime to add exercises to"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @throws CommandException If duplicate exercises are found"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void addExercisesToRegime(Regime regime, Model model) throws CommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jietung"
        },
        "content": "        for (Index index : toAddIndexes) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            Exercise exercise \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            checkDuplicateExerciseInRegime(exercise, regime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            regime.addExercise(exercise);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks whether the {@code Model} contains a regime with the same name."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return true if a regime of the same name exists, false otherwise"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private boolean isRegimeInModel(Model model) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Regime regime \u003d new Regime(name, new UniqueResourceList\u003c\u003e());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return model.hasRegime(regime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks whether an exercise is already found in the regime."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param exercise exercise to be checked against the regime\u0027s list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param regime the regime to be checked with"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @throws CommandException If a duplicate exercise is found in the regime"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void checkDuplicateExerciseInRegime(Exercise exercise, Regime regime) throws CommandException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (regime.getRegimeExercises().contains(exercise)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE_IN_REGIME);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks whether the given indexes contain duplicates."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @throws CommandException If a duplicate index is found"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void checkDuplicateIndexes() throws CommandException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        HashSet\u003cIndex\u003e indexesSet \u003d new HashSet\u003c\u003e(toAddIndexes);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (indexesSet.size() \u003c toAddIndexes.size()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INDEX);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks if the given indexes is empty."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @throws CommandException If no indexes are provided at all"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void checkIndexesNotEmpty() throws CommandException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (toAddIndexes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException(MESSAGE_NO_EXERCISES_ADDED);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks whether the list of indexes provided is valid,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param indexes the list of {@code Index} passed into the command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param exerciseList the current exercise list of the regime"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @throws CommandException If any one of the indexes is greater than the size of the regime\u0027s exercise list"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void checkValidIndexes(List\u003cIndex\u003e indexes, List\u003cExercise\u003e exerciseList) throws CommandException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        for (Index targetIndex : indexes) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d exerciseList.size()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Stores the regime to be added in this command."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param regimeToAdd the regime to be added"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void addToEventPayloadForAddRegime(Regime regimeToAdd) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_IS_REGIME_EDITED, false);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_REGIME_TO_ADD, regimeToAdd);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Stores the various states of the exercise to the payload."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param originalRegime the regime before it is edited"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param editedRegime the regime after it is edited"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void addToEventPayloadForEditRegime(Regime originalRegime, Regime editedRegime) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_IS_REGIME_EDITED, true);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_ORIGINAL_REGIME, originalRegime);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_EDITED_REGIME, editedRegime);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public EventPayload\u003cObject\u003e getPayload() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return eventPayload;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String getResourceType() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return RESOURCE_TYPE;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jietung"
        },
        "content": "            || (other instanceof AddRegimeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u0026\u0026 toAddIndexes.equals(((AddRegimeCommand) other).toAddIndexes));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 161,
      "jietung": 71,
      "weihaw08": 8
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.ClearEvent.KEY_EXERCISE_BOOK_CLEARED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.events.EventHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventPayload;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Clears the exercise book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class ClearCommand extends Command implements UndoableCommand, PayloadCarrierCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exercise book has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private EventPayload\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e eventPayload;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e exerciseBookCleared \u003d new ReadOnlyResourceBook\u003c\u003e(model.getExerciseBookData());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload \u003d new EventPayload\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_EXERCISE_BOOK_CLEARED, exerciseBookCleared);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory.getInstance().addCommandToUndoStack(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.setExerciseBook(new ReadOnlyResourceBook\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String getUndoableCommandWord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public EventPayload\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e getPayload() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return eventPayload;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 19,
      "jietung": 3,
      "-": 16,
      "weihaw08": 5
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Show the resolve window to user due to scheduling conflict"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private final boolean showResolve;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showResolve) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.showResolve \u003d showResolve;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public boolean isShowResolve() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return showResolve;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 12,
      "jietung": 1,
      "-": 66,
      "weihaw08": 6
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/CustomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CUSTOM_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_FULL_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_PARAMETER_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Adds a custom property for the exercises."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class CustomCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"custom\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a custom property for the exercises.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + PREFIX_CUSTOM_NAME + \"PREFIX NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + PREFIX_FULL_NAME + \"FULL NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + PREFIX_PARAMETER_TYPE + \"PARAMETER TYPE\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + PREFIX_CUSTOM_NAME + \"a \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + PREFIX_FULL_NAME + \"Ratings \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + PREFIX_PARAMETER_TYPE + \"Number\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New custom property added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FULL_NAME \u003d \"This full name has been used for an \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + \"existing property\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIX_NAME \u003d \"This prefix name has been used for an \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + \"existing property\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final CustomProperty toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Creates a CustomCommand to add the specified {@code CustomProperty}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public CustomCommand(CustomProperty customProperty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(customProperty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        toAdd \u003d customProperty;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String fullName \u003d toAdd.getFullName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (model.isFullNameUsed(fullName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FULL_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Prefix prefix \u003d toAdd.getPrefix();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (model.isPrefixUsed(prefix)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PREFIX_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.addCustomProperty(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof CustomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 toAdd.equals(((CustomCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 70
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Represents a DeleteCommand with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public abstract class DeleteCommand extends Command implements UndoableCommand, ResourceTypeDependentCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_USAGE_EXERCISE \u003d \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \"\\t\\tExample: \" + COMMAND_WORD + \" \" + PREFIX_CATEGORY + \"exercise \" + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_USAGE_REGIME \u003d \"Parameters: REGIME NAME, INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \"\\t\\tExample: \" + COMMAND_WORD + \" \" + PREFIX_CATEGORY + \"regime \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + PREFIX_NAME + \"level 1 \" + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \": Deletes the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \"or Deletes the regimes/exercise in regime identified by name/index in the displayed regime list\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \"EXERCISE: \" + MESSAGE_USAGE_EXERCISE + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + \"REGIME: \" + MESSAGE_USAGE_REGIME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String getUndoableCommandWord() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 6,
      "jietung": 15,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/DeleteExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.DeleteExerciseEvent.KEY_EXERCISE_TO_DELETE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.IndexUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.events.EventHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventPayload;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Deletes an exercise identified using it\u0027s displayed index from the exercise book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class DeleteExerciseCommand extends DeleteCommand implements PayloadCarrierCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String RESOURCE_TYPE \u003d \"exercise\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private EventPayload\u003cExercise\u003e eventPayload;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public DeleteExerciseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.eventPayload \u003d new EventPayload\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (IndexUtil.isIndexOutOfBounds(targetIndex, lastShownList)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Exercise exerciseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_EXERCISE_TO_DELETE, exerciseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "        model.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory.getInstance().addCommandToUndoStack(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public EventPayload\u003cExercise\u003e getPayload() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return eventPayload;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String getResourceType() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return RESOURCE_TYPE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jietung"
        },
        "content": "            || (other instanceof DeleteExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteExerciseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 2,
      "garylyp": 19,
      "jietung": 42,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/DeleteRegimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.DeleteRegimeEvent.KEY_REGIME_TO_DELETE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.EditRegimeEvent.KEY_EDITED_REGIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.EditRegimeEvent.KEY_IS_REGIME_EDITED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.EditRegimeEvent.KEY_ORIGINAL_REGIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventPayload;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.UniqueResourceList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Deletes a regime identified using it\u0027s name or deletes exercises in regime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class DeleteRegimeCommand extends DeleteCommand implements PayloadCarrierCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_DELETE_REGIME_SUCCESS \u003d \"Deleted Regime: %1$s\\n%2$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_REGIME_DOES_NOT_EXIST \u003d \"No such regime in regime book.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_IN_REGIME_SUCCESS \u003d \"Deleted exercises in regime.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String RESOURCE_TYPE \u003d \"regime\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final List\u003cIndex\u003e indexes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final EventPayload\u003cObject\u003e eventPayload;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public DeleteRegimeCommand(Name name, List\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.eventPayload \u003d new EventPayload\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "        List\u003cRegime\u003e lastShownList \u003d model.getFilteredRegimeList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Regime regime \u003d new Regime(name, new UniqueResourceList\u003c\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        checkValidRegime(regime, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "        int indexOfRegime \u003d model.getRegimeIndex(regime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Regime regimeToDelete \u003d lastShownList.get(indexOfRegime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (indexes \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            commandResult \u003d deleteRegimeFromModel(regimeToDelete, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            commandResult \u003d deleteExercisesFromRegime(regimeToDelete, model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory.getInstance().addCommandToUndoStack(this);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Deletes the specified regime completely from the model\u0027s regime list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param regimeToDelete the regime to delete"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private CommandResult deleteRegimeFromModel(Regime regimeToDelete, Model model) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jietung"
        },
        "content": "        model.deleteRegime(regimeToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        addToEventPayloadForDeleteRegime(regimeToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REGIME_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                regimeToDelete));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Deletes exercises from the specified regime based on the list of {@code Index} passed into the command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param originalRegime the specified regime to delete exercises from"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private CommandResult deleteExercisesFromRegime(Regime originalRegime, Model model) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Regime editedRegime \u003d originalRegime.deepCopy();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        List\u003cExercise\u003e currentExerciseList \u003d originalRegime.getRegimeExercises().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        checkValidIndexes(indexes, currentExerciseList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jietung"
        },
        "content": "        for (Index targetIndex : indexes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            Exercise exerciseToDelete \u003d currentExerciseList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            editedRegime.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        addToEventPayloadForEditRegime(originalRegime, editedRegime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.setRegime(originalRegime, editedRegime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.updateFilteredRegimeList(Model.PREDICATE_SHOW_ALL_REGIMES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXERCISE_IN_REGIME_SUCCESS, editedRegime));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks whether the specified regime exists in the model\u0027s regime list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param regime the regime to check validity for"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @throws CommandException If the specified regime does not exist in the model\u0027s regime list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void checkValidRegime(Regime regime, Model model) throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (!model.hasRegime(regime)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException(MESSAGE_REGIME_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks whether the list of indexes provided is valid,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param indexes the list of {@code Index} passed into the command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param exerciseList the current exercise list of the regime"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @throws CommandException If any one of the indexes is greater than the size of the regime\u0027s exercise list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void checkValidIndexes(List\u003cIndex\u003e indexes, List\u003cExercise\u003e exerciseList) throws CommandException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jietung"
        },
        "content": "        for (Index targetIndex : indexes) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d exerciseList.size()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Stores the regime to be deleted in this command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param regimeToDelete the regime to be deleted"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void addToEventPayloadForDeleteRegime(Regime regimeToDelete) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_IS_REGIME_EDITED, false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_REGIME_TO_DELETE, regimeToDelete);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Stores the various states of the exercise to the payload."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param originalRegime the regime before it is edited"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param editedRegime the regime after it is edited"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void addToEventPayloadForEditRegime(Regime originalRegime, Regime editedRegime) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_IS_REGIME_EDITED, true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_ORIGINAL_REGIME, originalRegime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_EDITED_REGIME, editedRegime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public EventPayload\u003cObject\u003e getPayload() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return eventPayload;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String getResourceType() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return RESOURCE_TYPE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jietung"
        },
        "content": "            || (other instanceof DeleteRegimeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u0026\u0026 indexes.equals(((DeleteRegimeCommand) other).indexes)); // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 107,
      "jietung": 52,
      "weihaw08": 7
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.EditEvent.KEY_EDITED_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static seedu.exercise.logic.commands.events.EditEvent.KEY_EXERCISE_TO_EDIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.IndexUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.events.EventHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventPayload;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Edits the details of an existing exercise in the exercise book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class EditCommand extends Command implements UndoableCommand, PayloadCarrierCommand {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the exercise identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"by the index number used in the displayed exercise list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"[\" + PREFIX_UNIT + \"UNIT] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"[\" + PREFIX_MUSCLE + \"MUSCLE]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_DATE + \"03/10/2019 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + PREFIX_CALORIES + \"800\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited Exercise: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the exercise book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final EditExerciseDescriptor editExerciseDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private EventPayload\u003cExercise\u003e eventPayload;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param index                  of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param editExerciseDescriptor details to edit the person with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditCommand(Index index, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(editExerciseDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.eventPayload \u003d new EventPayload\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.editExerciseDescriptor \u003d new EditExerciseDescriptor(editExerciseDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (IndexUtil.isIndexOutOfBounds(index, lastShownList)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Exercise editedExercise \u003d createEditedExercise(exerciseToEdit, editExerciseDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!exerciseToEdit.isSameResource(editedExercise) \u0026\u0026 model.hasExercise(editedExercise)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        addToEventPayload(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory.getInstance().addCommandToUndoStack(this);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.updateFilteredExerciseList(Model.PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String getUndoableCommandWord() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public EventPayload\u003cExercise\u003e getPayload() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return eventPayload;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Stores the various states of the exercise to the payload."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param exerciseToEdit the exercise before it is edited"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param editedExercise the exercise after it is edited"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private void addToEventPayload(Exercise exerciseToEdit, Exercise editedExercise) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_EXERCISE_TO_EDIT, exerciseToEdit);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        eventPayload.put(KEY_EDITED_EXERCISE, editedExercise);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * edited with {@code editExerciseDescriptor}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static Exercise createEditedExercise("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exerciseToEdit, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assert exerciseToEdit !\u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Name updatedName \u003d editExerciseDescriptor.getName().orElse(exerciseToEdit.getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Calories updatedCalories \u003d editExerciseDescriptor.getCalories().orElse(exerciseToEdit.getCalories());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Date updatedDate \u003d editExerciseDescriptor.getDate().orElse(exerciseToEdit.getDate());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Quantity updatedQuantity \u003d editExerciseDescriptor.getQuantity().orElse(exerciseToEdit.getQuantity());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Unit updatedUnit \u003d editExerciseDescriptor.getUnit().orElse(exerciseToEdit.getUnit());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cMuscle\u003e updatedMuscles \u003d editExerciseDescriptor.getMuscles().orElse(exerciseToEdit.getMuscles());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Map\u003cString, String\u003e updatedCustomProperties \u003d new HashMap\u003c\u003e(exerciseToEdit.getCustomProperties());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Map\u003cString, String\u003e newCustomProperties \u003d editExerciseDescriptor.getCustomProperties()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .orElse(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        updatedCustomProperties.putAll(newCustomProperties);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Exercise(updatedName, updatedDate, updatedCalories, updatedQuantity, updatedUnit,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            updatedMuscles, updatedCustomProperties);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 editExerciseDescriptor.equals(e.editExerciseDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static class EditExerciseDescriptor {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        private Calories calories;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jietung"
        },
        "content": "        private Unit unit;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        private Set\u003cMuscle\u003e muscles;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        private Map\u003cString, String\u003e customProperties;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public EditExerciseDescriptor() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * A defensive copy of {@code muscles} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public EditExerciseDescriptor(EditExerciseDescriptor toCopy) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jietung"
        },
        "content": "            setUnit(toCopy.unit);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            setMuscles(toCopy.muscles);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            setCustomProperties(toCopy.customProperties);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, calories, date, quantity, unit, muscles, customProperties);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setCalories(Calories calories) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public void setUnit(Unit unit) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jietung"
        },
        "content": "            this.unit \u003d unit;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public Optional\u003cUnit\u003e getUnit() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jietung"
        },
        "content": "            return Optional.ofNullable(unit);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * Sets {@code muscles} to this object\u0027s {@code muscles}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * A defensive copy of {@code muscles} is used internally."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setMuscles(Set\u003cMuscle\u003e muscles) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.muscles \u003d (muscles !\u003d null) ? new HashSet\u003c\u003e(muscles) : null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * Returns an unmodifiable muscle set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code muscles} is null."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public Optional\u003cSet\u003cMuscle\u003e\u003e getMuscles() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return (muscles !\u003d null) ? Optional.of(Collections.unmodifiableSet(muscles)) : Optional.empty();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * Returns an unmodifiable custom properties map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code customProperties} is null."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public Optional\u003cMap\u003cString, String\u003e\u003e getCustomProperties() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return (customProperties !\u003d null) ? Optional.of(Collections.unmodifiableMap(customProperties))"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * Sets {@code customProperties} to this object\u0027s {@code customProperties}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setCustomProperties(Map\u003cString, String\u003e customProperties) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.customProperties \u003d (customProperties !\u003d null) ? new HashMap\u003c\u003e(customProperties) : null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (!(other instanceof EditExerciseDescriptor)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            EditExerciseDescriptor e \u003d (EditExerciseDescriptor) other;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u0026\u0026 getCalories().equals(e.getCalories())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jietung"
        },
        "content": "                \u0026\u0026 getUnit().equals(e.getUnit())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u0026\u0026 getMuscles().equals(e.getMuscles())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u0026\u0026 getCustomProperties().equals(e.getCustomProperties());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 2,
      "garylyp": 31,
      "jietung": 33,
      "-": 130,
      "weihaw08": 103
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Exercise Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "jietung": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Finds and lists all exercises in exercise book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all exercises whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" run swim karate\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            String.format(Messages.MESSAGE_EXERCISES_LISTED_OVERVIEW, model.getFilteredExerciseList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 6,
      "-": 33,
      "weihaw08": 3
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "garylyp": 1,
      "jietung": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Lists all exercises in the exercise book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all exercises\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 1,
      "jietung": 5,
      "-": 18,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/PayloadCarrierCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.events.EventPayload;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Interface for commands which need to store an EventPayload object to store key information"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * that can be accessed by others."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public interface PayloadCarrierCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the payload that stores the regime that has been deleted or edited in this command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return {@code EventPayload} containing relevant objects can be accessed using specific keys"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    EventPayload getPayload();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 17
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.events.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.events.EventHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Undoes the last executed command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Command redone: \\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_EMPTY_REDO_STACK \u003d \"There is no command to redo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory eventHistory \u003d EventHistory.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (eventHistory.isRedoStackEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_REDO_STACK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Event eventToRedo \u003d eventHistory.redo(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            String.format(MESSAGE_SUCCESS, eventToRedo));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 32,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/ResolveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_CONTEXT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.areListsEmpty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CONFLICT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.IndexUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.UniqueResourceList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.conflict.Conflict;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Represents a Resolve Command that resolves scheduling conflicts."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class ResolveCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resolve\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + \": Resolves a scheduling conflict. Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_NAME + \"NEW_REGIME_NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + \"[\" + PREFIX_INDEX + \"INDEX_OF_SCHEDULED_EXERCISES\" + \"]\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + \"[\" + PREFIX_CONFLICT_INDEX + \"INDEX_OF_CONFLICTING_EXERCISES\" + \"]\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_NAME + \"cardio new \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_INDEX + \"3 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_CONFLICT_INDEX + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_CONFLICT_INDEX + \"4 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully resolved conflict between regime %1$s and regime %2$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NAME \u003d \"Regime name %1$s already exists. Try another name\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_INVALID_NAME \u003d \"Regime name is neither the scheduled regime\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + \" or the conflicting regime\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Name regimeName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Conflict conflict;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private List\u003cIndex\u003e indexToTakeFromSchedule;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private List\u003cIndex\u003e indexToTakeFromConflict;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ResolveCommand(Name regimeName, List\u003cIndex\u003e indexToTakeFromSchedule, List\u003cIndex\u003e indexToTakeFromConflict) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.regimeName \u003d regimeName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.indexToTakeFromSchedule \u003d indexToTakeFromSchedule;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.indexToTakeFromConflict \u003d indexToTakeFromConflict;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        checkIfProgramStateIsValid();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        conflict \u003d getConflictFromModel(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        checkValidIndexes();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!areListsEmpty(indexToTakeFromSchedule, indexToTakeFromConflict)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            checkNonDuplicateRegimeNameFromModel(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            checkNameIsFromConflictingSchedules();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resolveConflict(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                conflict.getScheduledName(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                conflict.getConflictedName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void resolveConflict(Model model) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        model.resolveConflict(regimeName, indexToTakeFromSchedule, indexToTakeFromConflict);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        MainApp.setState(State.NORMAL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Conflict getConflictFromModel(Model model) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return model.getConflict();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Checks if indexes passed into the {@code Command} are valid and not out of bounds"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void checkValidIndexes() throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (IndexUtil.areIndexesOutOfBounds(indexToTakeFromSchedule, conflict.getScheduledExerciseList())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            || IndexUtil.areIndexesOutOfBounds(indexToTakeFromConflict, conflict.getConflictedExerciseList())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void checkIfProgramStateIsValid() throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (MainApp.getState() !\u003d State.IN_CONFLICT) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_CONTEXT, getClass().getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Checks if there are duplicate {@code regime names} in the {@code model}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Method is to be called only if there are indexes provided to the Regime Command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void checkNonDuplicateRegimeNameFromModel(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (model.hasRegime(new Regime(regimeName, new UniqueResourceList\u003c\u003e()))) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_NAME, regimeName.toString()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Checks if the name passed in is one of the conflicting schedule\u0027s names."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Method is to be called only if there are no indexes provided to the Regime Command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void checkNameIsFromConflictingSchedules() throws CommandException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        String name \u003d regimeName.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!name.equals(conflict.getConflictedName()) \u0026\u0026 !name.equals(conflict.getScheduledName())) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_NAME);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 129
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/ResourceTypeDependentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Interface for commands which share the same command word but operate on different resource types"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * such as \"exercise\" or \"regime\"."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public interface ResourceTypeDependentCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the type of the resource being added to the model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return the name of the resource being added, \"exercise\" or \"regime\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    String getResourceType();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 15
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Schedules a regime or completes a schedule on a certain date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public abstract class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + \" usage 1: Schedules a regime at a specific date. Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_NAME + \"REGIME NAME \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_DATE + \"DATE \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_NAME + \"cardio \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_DATE + \"19/12/2019\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + COMMAND_WORD + \" usage 2: Completes a schedule and adds to exercise tracker. Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_INDEX + \"INDEX OF SCHEDULE\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 25,
      "garylyp": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/ScheduleCompleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.IndexUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Completes a schedule and removes it from the schedule list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class ScheduleCompleteCommand extends ScheduleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Schedule %1$s completed and added to exercise tracker\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ScheduleCompleteCommand(Index index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        checkValidIndex(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        completeSchedule(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, Integer.toString(index.getOneBased())));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void completeSchedule(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Schedule toComplete \u003d model.getFilteredScheduleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        model.completeSchedule(toComplete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void checkValidIndex(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (IndexUtil.isIndexOutOfBounds(index, model.getFilteredScheduleList())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SCHEDULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 44,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/ScheduleRegimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.UniqueResourceList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.conflict.Conflict;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Schedules a regime at a specific date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class ScheduleRegimeCommand extends ScheduleCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Regime %1$s scheduled on %2$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_REGIME_NOT_FOUND \u003d \"Regime %1$s not in regime book\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MESSAGE_CONFLICT \u003d \"Regime to be scheduled conflicts with another scheduled regime. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        + \"Opening resolve window...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Regime regime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Date dateToSchedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ScheduleRegimeCommand(Name regimeName, Date date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.regime \u003d new Regime(regimeName, new UniqueResourceList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        dateToSchedule \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        checkExistenceOfRegime(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Schedule toSchedule \u003d getScheduleFromModel(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (toSchedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return new CommandResult(MESSAGE_CONFLICT, false, false, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        schedule(model, toSchedule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, regime.getRegimeName(), dateToSchedule));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void checkExistenceOfRegime(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!model.hasRegime(regime)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_REGIME_NOT_FOUND, regime.getRegimeName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Checks for scheduling conflicts and returns a valid schedule if no conflicts are found."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * If a conflict is found, returns a null schedule"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Schedule getScheduleFromModel(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        int indexOfRegime \u003d model.getRegimeIndex(regime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Regime regimeToSchedule \u003d model.getFilteredRegimeList().get(indexOfRegime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Schedule toSchedule \u003d new Schedule(regimeToSchedule, dateToSchedule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (model.hasSchedule(toSchedule)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            setConflictState();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            Conflict conflict \u003d buildConflict(model, toSchedule);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            setConflictForModel(model, conflict);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return toSchedule;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void schedule(Model model, Schedule toSchedule) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        model.addSchedule(toSchedule);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void setConflictState() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        MainApp.setState(State.IN_CONFLICT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Conflict buildConflict(Model model, Schedule toSchedule) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        int indexOfScheduled \u003d model.getAllScheduleData().getResourceIndex(toSchedule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Schedule scheduled \u003d model.getFilteredScheduleList().get(indexOfScheduled);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new Conflict(scheduled, toSchedule);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void setConflictForModel(Model model, Conflict conflict) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        model.setConflict(conflict);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 85,
      "weihaw08": 7
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/SuggestBasicCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_SUGGEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": " * Lists basic exercises in the exercise database to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "public class SuggestBasicCommand extends SuggestCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all suggested basic exercises.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String MESSAGE_USAGE_SUGGEST_BASIC \u003d \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            + PREFIX_SUGGEST + \"SUGGEST TYPE \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        model.updateSuggestedExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                || (other instanceof SuggestBasicCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 32
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/SuggestCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.SuggestBasicCommand.MESSAGE_USAGE_SUGGEST_BASIC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": " * Represents an SuggestCommand with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "public abstract class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggest\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all suggested exercises\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            + \": Suggests exercise.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            + \"BASIC: \" + MESSAGE_USAGE_SUGGEST_BASIC + \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 18
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.events.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.events.EventHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Undoes the last executed command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        + \": Undoes the latest command called.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Command undone: \\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_EMPTY_UNDO_STACK \u003d \"There is no command to undo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        EventHistory eventHistory \u003d EventHistory.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (eventHistory.isUndoStackEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_UNDO_STACK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Event eventToUndo \u003d eventHistory.undo(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, eventToUndo));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 33,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/UndoableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents a command that can be undone."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public interface UndoableCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the command word that is used to call the undoable command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return command word of the undoable command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    String getUndoableCommandWord();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 13,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/AddExerciseEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents a particular add exercise event that can be redone or undone."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class AddExerciseEvent implements Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_EXERCISE_TO_ADD \u003d \"exerciseToAdd\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static final String EVENT_DESCRIPTION \u003d \"Add exercise: %1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * The exercise that has been added during the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final Exercise exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Creates an AddExerciseEvent to store the particular event of an exercise being added to the exercise book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param eventPayload a wrapper class that stores the essential information for undo and redo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public AddExerciseEvent(EventPayload\u003c? super Exercise\u003e eventPayload) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.exercise \u003d (Exercise) eventPayload.get(KEY_EXERCISE_TO_ADD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.deleteExercise(exercise);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.addExercise(exercise);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the exercise that was added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return exercise that is passed into constructor of AddExerciseEvent"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public Exercise getExercise() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return exercise;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return String.format(EVENT_DESCRIPTION, exercise);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                || (other instanceof AddExerciseEvent // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                \u0026\u0026 exercise.equals(((AddExerciseEvent) other).getExercise()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 57,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/AddRegimeEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents a particular add regime event that can be redone or undone."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class AddRegimeEvent implements Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_REGIME_TO_ADD \u003d \"regimeToAdd\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static final String EVENT_DESCRIPTION \u003d \"Add regime: %1$s\\n%2$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final Regime regimeToAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Creates an AddRegimeEvent to store the particular event of a regime being added to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * the regime book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param eventPayload a wrapper class that stores the essential information for undo and redo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public AddRegimeEvent(EventPayload\u003c? super Regime\u003e eventPayload) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.regimeToAdd \u003d (Regime) eventPayload.get(KEY_REGIME_TO_ADD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.deleteRegime(regimeToAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.addRegime(regimeToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return String.format(EVENT_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                regimeToAdd.getRegimeName(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                regimeToAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 42
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/ClearEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents a particular add event that can be redone or undone."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class ClearEvent implements Event {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_EXERCISE_BOOK_CLEARED \u003d \"exerciseBookCleared\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static final String EVENT_DESCRIPTION \u003d \"Clear Exercise Book: %1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * The exercise book that exists before the clear event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ReadOnlyResourceBook\u003cExercise\u003e exerciseBookCleared;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Creates a ClearEvent to store the particular event of the exercise book being cleared."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param eventPayload a wrapper class that stores the exercise book in the state before the ClearEvent."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public ClearEvent(EventPayload\u003c? super ReadOnlyResourceBook\u003cExercise\u003e\u003e eventPayload) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.exerciseBookCleared \u003d (ReadOnlyResourceBook\u003cExercise\u003e) eventPayload.get(KEY_EXERCISE_BOOK_CLEARED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.setExerciseBook(exerciseBookCleared);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.setExerciseBook(new ReadOnlyResourceBook\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the exercise book that exists before the clear event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return an exercise book in the state before the ClearEvent."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cExercise\u003e getExerciseBookCleared() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return exerciseBookCleared;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return String.format(EVENT_DESCRIPTION, exerciseBookCleared);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            || (other instanceof ClearEvent // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            \u0026\u0026 exerciseBookCleared.equals(((ClearEvent) other).getExerciseBookCleared()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 54,
      "weihaw08": 6
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/DeleteExerciseEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents a particular delete exercise event that can be redone or undone."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class DeleteExerciseEvent implements Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_EXERCISE_TO_DELETE \u003d \"exerciseToDelete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static final String EVENT_DESCRIPTION \u003d \"Delete exercise: %1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * The exercise that has been deleted during the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final Exercise exerciseToDelete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Creates a DeleteExerciseEvent to store the particular event of an exercise being deleted from the exercise book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param eventPayload a wrapper class that stores the essential information for undo and redo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public DeleteExerciseEvent(EventPayload\u003c? super Exercise\u003e eventPayload) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.exerciseToDelete \u003d (Exercise) eventPayload.get(KEY_EXERCISE_TO_DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.addExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the exercise that was deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return exercise that is passed into constructor of DeleteExerciseEvent"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public Exercise getExerciseToDelete() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return exerciseToDelete;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return String.format(EVENT_DESCRIPTION, exerciseToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                || (other instanceof DeleteExerciseEvent // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                \u0026\u0026 exerciseToDelete.equals(((DeleteExerciseEvent) other).getExerciseToDelete()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 57,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/DeleteRegimeEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents a particular delete regime event that can be redone or undone."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class DeleteRegimeEvent implements Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_REGIME_TO_DELETE \u003d \"regimeToDelete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static final String EVENT_DESCRIPTION \u003d \"Delete regime: %1$s\\n%2$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final Regime regimeToDelete;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Creates a DeleteRegimeEvent to store the particular event of a regime being deleted from"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * the regime book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param eventPayload a wrapper class that stores the essential information for undo and redo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public DeleteRegimeEvent(EventPayload\u003c? super Regime\u003e eventPayload) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.regimeToDelete \u003d (Regime) eventPayload.get(KEY_REGIME_TO_DELETE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.addRegime(regimeToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.deleteRegime(regimeToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return String.format(EVENT_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                regimeToDelete.getRegimeName(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                regimeToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 42
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/EditEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents a particular edit event that can be redone or undone."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class EditEvent implements Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_EXERCISE_TO_EDIT \u003d \"exerciseToEdit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_EDITED_EXERCISE \u003d \"editedExercise\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static final String EVENT_DESCRIPTION \u003d \"Edit\\t: %1$s\\nTo\\t: %2$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * The exercise that has been edited during the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final Exercise exerciseOld;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * The newly edited exercise after the edit event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final Exercise exerciseNew;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Creates a EditEvent to store the particular event of an exercise being edited"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * in the exercise book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param eventPayload a wrapper class that stores the essential information for undo and redo"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public EditEvent(EventPayload\u003c? super Exercise\u003e eventPayload) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.exerciseOld \u003d (Exercise) eventPayload.get(KEY_EXERCISE_TO_EDIT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.exerciseNew \u003d (Exercise) eventPayload.get(KEY_EDITED_EXERCISE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.setExercise(exerciseNew, exerciseOld);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.setExercise(exerciseOld, exerciseNew);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the exercise that has been edited."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return exercise before the edit event happens"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public Exercise getExerciseOld() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return exerciseOld;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the newly edited exercise after the edit event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return exercise after the edit event happens"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public Exercise getExerciseNew() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return exerciseNew;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return String.format(EVENT_DESCRIPTION, exerciseOld, exerciseNew);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                || (other instanceof EditEvent // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                \u0026\u0026 exerciseOld.equals(((EditEvent) other).getExerciseOld())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                \u0026\u0026 exerciseNew.equals(((EditEvent) other).getExerciseNew()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 75,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/EditRegimeEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents a particular edit regime event that can be redone or undone. Edit regime events"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * are induced using AddRegimeCommand or DeleteRegimeCommand on an existing command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class EditRegimeEvent implements Event {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_IS_REGIME_EDITED \u003d \"isRegimeEdited\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_ORIGINAL_REGIME \u003d \"originalRegime\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String KEY_EDITED_REGIME \u003d \"editedRegime\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static final String EVENT_DESCRIPTION \u003d \"Edit regime: %1$s\\n%2$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final Regime originalRegime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private final Regime editedRegime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Creates an EditRegimeEvent to store the particular event of a regime being edited in the regime book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param eventPayload a data carrier that stores the essential information for undo and redo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public EditRegimeEvent(EventPayload\u003cObject\u003e eventPayload) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.originalRegime \u003d (Regime) eventPayload.get(KEY_ORIGINAL_REGIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        this.editedRegime \u003d (Regime) eventPayload.get(KEY_EDITED_REGIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.setRegime(editedRegime, originalRegime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        model.setRegime(originalRegime, editedRegime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return String.format(EVENT_DESCRIPTION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                editedRegime.getRegimeName(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                editedRegime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 46
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * Represents an Event that can be undone or redone."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public interface Event {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Executes the reverse of the event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    void undo(Model model);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Executes the event again."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    void redo(Model model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 22,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/EventFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.AddRegimeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.DeleteRegimeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * A utility class to generate specific Event objects depending on requirements."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class EventFactory {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_COMMAND_NOT_UNDOABLE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        \"The command \\\u0027%1$s\\\u0027 cannot be stored as an undoable event.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static final String MESSAGE_COMMAND_RESOURCE_TYPE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            \"The resource type \\\u0027%1$s\\\u0027 of the \\\u0027%2$s\\\u0027 command is not known.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Generates an Event object that can execute the behaviour of a given Command as well"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * as its opposite behaviour."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param command a {@code UndoableCommand} to be represented with using an Event object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return an {@code Event} that can be undone or redone"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @throws CommandException if command provided is not undoable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    static Event commandToEvent(UndoableCommand command) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        String commandWord \u003d command.getUndoableCommandWord();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return generateEventFromAddCommand((AddCommand) command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return generateEventFromDeleteCommand((DeleteCommand) command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return new EditEvent(((EditCommand) command).getPayload());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return new ClearEvent(((ClearCommand) command).getPayload());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    String.format(MESSAGE_COMMAND_NOT_UNDOABLE, commandWord));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Generates a add exercise or add regime event based on the command type."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param command a {@code AddCommand} to be represented with using an Event object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return an {@code AddExerciseEvent}, {@code AddRegimeEvent} or {@code EditRegimeEvent}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * that can be undone or redone"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static Event generateEventFromAddCommand(AddCommand command) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        String resourceType \u003d command.getResourceType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        switch (resourceType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case AddExerciseCommand.RESOURCE_TYPE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            EventPayload\u003cExercise\u003e eventPayload \u003d ((AddExerciseCommand) command).getPayload();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return new AddExerciseEvent(eventPayload);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case AddRegimeCommand.RESOURCE_TYPE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            AddRegimeCommand addRegimeCommand \u003d (AddRegimeCommand) command;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            boolean isRegimeEdited \u003d (boolean) addRegimeCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    .getPayload()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    .get(EditRegimeEvent.KEY_IS_REGIME_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            if (isRegimeEdited) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                return new EditRegimeEvent(addRegimeCommand.getPayload());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                return new AddRegimeEvent(addRegimeCommand.getPayload());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    String.format(MESSAGE_COMMAND_RESOURCE_TYPE_NOT_FOUND,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                            resourceType,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                            command.getUndoableCommandWord()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Generates a delete exercise or delete regime event based on the command type."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param command a {@code DeleteCommand} to be represented with using an Event object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return an {@code DeleteExerciseEvent}, {@code DeleteRegimeEvent} or {@code EditRegimeEvent}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * that can be undone or redone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static Event generateEventFromDeleteCommand(DeleteCommand command) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        String resourceType \u003d command.getResourceType();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        switch (resourceType) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case DeleteExerciseCommand.RESOURCE_TYPE:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            EventPayload\u003cExercise\u003e eventPayload \u003d ((DeleteExerciseCommand) command).getPayload();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return new DeleteExerciseEvent(eventPayload);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case DeleteRegimeCommand.RESOURCE_TYPE:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            DeleteRegimeCommand deleteRegimeCommand \u003d (DeleteRegimeCommand) command;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            boolean isRegimeEdited \u003d (boolean) deleteRegimeCommand"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    .getPayload()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    .get(EditRegimeEvent.KEY_IS_REGIME_EDITED);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            if (isRegimeEdited) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                return new EditRegimeEvent(deleteRegimeCommand.getPayload());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                return new DeleteRegimeEvent(deleteRegimeCommand.getPayload());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                    String.format(MESSAGE_COMMAND_RESOURCE_TYPE_NOT_FOUND,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                            resourceType,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garylyp"
        },
        "content": "                            command.getUndoableCommandWord()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 121,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/EventHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * A singleton class that tracks a single history of undoable events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class EventHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventHistory.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private static EventHistory eventHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private Stack\u003cEvent\u003e undoStack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private Stack\u003cEvent\u003e redoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Initializes both undo and redo history if no undo history exists."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private EventHistory() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns an EventHistory object that tracks the history of undoable events."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return an instance of EventHistory that can be used to access the undo and redo history."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public static EventHistory getInstance() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        if (eventHistory \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            eventHistory \u003d new EventHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return eventHistory;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Stores a command as an event in the EventHistory."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param command an undoable command to be stored in history"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void addCommandToUndoStack(UndoableCommand command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            event \u003d EventFactory.commandToEvent(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        undoStack.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        redoStack.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the next event to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return undoable event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public Event undo(Model model) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        assert(!undoStack.isEmpty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Event actionToUndo \u003d undoStack.pop();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        actionToUndo.undo(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        redoStack.push(actionToUndo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return actionToUndo;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns the next event to redo."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return undoable event"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public Event redo(Model model) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        assert(!redoStack.isEmpty());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        Event actionToRedo \u003d redoStack.pop();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        actionToRedo.redo(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        undoStack.push(actionToRedo);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return actionToRedo;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks if the undo history is empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return true if undo stack is empty, false otherwise"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public boolean isUndoStackEmpty() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return undoStack.isEmpty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Checks if the redo history is empty."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return true if redo stack is empty, false otherwise"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public boolean isRedoStackEmpty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return redoStack.isEmpty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 102,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/events/EventPayload.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garylyp"
        },
        "content": "package seedu.exercise.logic.commands.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garylyp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * A wrapper class to share essential data between Command and the corresponding Event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * for undo and redo commands. Data is accessed using keys specified by the Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garylyp"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garylyp"
        },
        "content": " * @param \u003cT\u003e The data stored can be of multiple types"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garylyp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garylyp"
        },
        "content": "public class EventPayload\u003cT\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    private HashMap\u003cString, ? super T\u003e payload \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public void put(String key, T data) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        payload.put(key, data);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public Object get(String key) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return payload.get(key);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 23
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents an exception which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 16,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.combinePrefixes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.AddRegimeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Parses input arguments and creates a new AddExerciseCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Prefix[] allPrefixes \u003d combinePrefixes(PREFIX_CATEGORY, PREFIX_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            ArgumentTokenizer.tokenize(args, allPrefixes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_CATEGORY) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (category.equals(\"exercise\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "            return parseExercise(argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (category.equals(\"regime\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "            return parseRegime(argMultimap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jietung"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Parses arguments and returns AddExerciseCommand for execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private AddExerciseCommand parseExercise(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_DATE, PREFIX_CALORIES, PREFIX_QUANTITY, PREFIX_UNIT)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jietung"
        },
        "content": "                AddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Unit unit \u003d ParserUtil.parseUnit(argMultimap.getValue(PREFIX_UNIT).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cMuscle\u003e muscleList \u003d ParserUtil.parseMuscles(argMultimap.getAllValues(PREFIX_MUSCLE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Map\u003cString, String\u003e customPropertiesMap \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            ParserUtil.parseCustomProperties(argMultimap.getAllCustomProperties());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, date, calories, quantity, unit, muscleList, customPropertiesMap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return new AddExerciseCommand(exercise);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Parses arguments and returns AddRegimeCommand for execution"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private AddRegimeCommand parseRegime(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRegimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Name regimeName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jietung"
        },
        "content": "        List\u003cIndex\u003e indexes \u003d ParserUtil.parseIndexes(argMultimap.getAllValues(PREFIX_INDEX));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return new AddRegimeCommand(indexes, regimeName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 53,
      "-": 26,
      "weihaw08": 23
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.PropertyBook.getCustomProperties;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns a map consisting all of the custom properties that are present together with their respective value."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * If no custom properties are defined or no values are present, this will return an empty map."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Modifying the returned map will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Map\u003cString, String\u003e getAllCustomProperties() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cCustomProperty\u003e currentCustomProperties \u003d getCustomProperties();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Map\u003cString, String\u003e customPropertiesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (CustomProperty property : currentCustomProperties) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            Prefix currentPrefix \u003d property.getPrefix();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            Optional\u003cString\u003e propertyValue \u003d getValue(currentPrefix);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (propertyValue.isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                customPropertiesMap.put(property.getFullName(), propertyValue.get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return customPropertiesMap;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean arePrefixesPresent(Prefix... prefixes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e this.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 59,
      "weihaw08": 33
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 146,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions and methods common to multiple commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /* Prefix definitions for default commands and properties */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Prefix PREFIX_MUSCLE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final Prefix PREFIX_UNIT \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final Prefix PREFIX_CONFLICT_INDEX \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Prefix PREFIX_CUSTOM_NAME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Prefix PREFIX_FULL_NAME \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Prefix PREFIX_PARAMETER_TYPE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final Prefix PREFIX_SUGGEST \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /* A set consisting of property prefix definitions for add and edit commands */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Set\u003cPrefix\u003e PREFIXES_SET \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static void setPrefixesSet(Set\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        PREFIXES_SET.addAll(prefixes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an array that contains the prefixes in {@code PREFIXES_SET} and {@code otherPrefixes}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Prefix[] combinePrefixes(Prefix... otherPrefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        int setSize \u003d PREFIXES_SET.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        int numOfOtherPrefixes \u003d otherPrefixes.length;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Prefix[] prefixArray \u003d PREFIXES_SET.toArray(new Prefix[setSize + numOfOtherPrefixes]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        System.arraycopy(otherPrefixes, 0, prefixArray, setSize, numOfOtherPrefixes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return prefixArray;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "jietung": 4,
      "-": 8,
      "weihaw08": 29,
      "kwekke": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/CustomCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CUSTOM_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_FULL_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_PARAMETER_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.CustomCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.ParameterType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Parses input arguments and creates a new CustomCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class CustomCommandParser implements Parser\u003cCustomCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CustomCommand and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * returns a {@code CustomCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param args the arguments for a custom command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return a {@code CustomCommand} object representing the command to be executed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public CustomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CUSTOM_NAME, PREFIX_FULL_NAME,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            PREFIX_PARAMETER_TYPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_CUSTOM_NAME, PREFIX_FULL_NAME, PREFIX_PARAMETER_TYPE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Prefix prefix \u003d ParserUtil.parsePrefixName(argMultimap.getValue(PREFIX_CUSTOM_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String fullName \u003d ParserUtil.parseFullName(argMultimap.getValue(PREFIX_FULL_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ParameterType paramType \u003d ParserUtil.parseParameterType(argMultimap.getValue(PREFIX_PARAMETER_TYPE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        CustomProperty customProperty \u003d new CustomProperty(prefix, fullName, paramType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new CustomCommand(customProperty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 47
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.DeleteRegimeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Parses input arguments and creates a new DeleteExerciseCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_NAME, PREFIX_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (category.equals(\"exercise\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "            return parseExercise(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (category.equals(\"regime\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "            return parseRegime(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Parses arguments and returns DeleteExerciseCommand for execution"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private DeleteExerciseCommand parseExercise(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": "                    DeleteExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return new DeleteExerciseCommand(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Parses arguments and returns DeleteRegimeCommand for execution"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private DeleteRegimeCommand parseRegime(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": "                    DeleteRegimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Name regimeName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // index present, delete exercise in regime"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jietung"
        },
        "content": "            List\u003cIndex\u003e indexes \u003d ParserUtil.parseIndexes(argMultimap.getAllValues(PREFIX_INDEX));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return new DeleteRegimeCommand(regimeName, indexes);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "        } else { //index not present delete regime"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return new DeleteRegimeCommand(regimeName, null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 71,
      "-": 17,
      "weihaw08": 4
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.combinePrefixes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Prefix[] allPrefixes \u003d combinePrefixes(PREFIX_CATEGORY, PREFIX_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, allPrefixes);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor editExerciseDescriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            editExerciseDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            editExerciseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            editExerciseDescriptor.setCalories(ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            editExerciseDescriptor.setQuantity(ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_UNIT).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jietung"
        },
        "content": "            editExerciseDescriptor.setUnit(ParserUtil.parseUnit(argMultimap.getValue(PREFIX_UNIT).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        parseMusclesForEdit(argMultimap.getAllValues(PREFIX_MUSCLE)).ifPresent(editExerciseDescriptor::setMuscles);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        parseCustomPropertiesForEdit(argMultimap.getAllCustomProperties())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .ifPresent(editExerciseDescriptor::setCustomProperties);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!editExerciseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new EditCommand(index, editExerciseDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e muscles} into a {@code Set\u003cMuscle\u003e} if {@code muscles} is non-empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * If {@code muscles} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code Set\u003cMuscle\u003e} containing zero muscles."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Optional\u003cSet\u003cMuscle\u003e\u003e parseMusclesForEdit(Collection\u003cString\u003e muscles) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(muscles);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (muscles.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d muscles.size() \u003d\u003d 1 \u0026\u0026 muscles.contains(\"\") ? Collections.emptySet() : muscles;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Optional.of(ParserUtil.parseMuscles(tagSet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses {@code Map\u003cString, String\u003e customProperties} into a {@code Map\u003cString, String\u003e} if"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code customProperties} is non-empty."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * If {@code customProperties} is empty, a {@code Optional.empty()} is returned instead."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Optional\u003cMap\u003cString, String\u003e\u003e parseCustomPropertiesForEdit(Map\u003cString, String\u003e customProperties)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(customProperties);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (customProperties.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Optional.of(ParserUtil.parseCustomProperties(customProperties));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 15,
      "-": 49,
      "weihaw08": 51
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/ExerciseBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.commands.CustomCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.ResolveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garylyp"
        },
        "content": "import seedu.exercise.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class ExerciseBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        case AddExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "        case DeleteExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garylyp"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        case CustomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return new CustomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        case SuggestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            return new SuggestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        case ResolveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return new ResolveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 8,
      "garylyp": 8,
      "jietung": 16,
      "-": 60,
      "weihaw08": 4,
      "kwekke": 4
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 4,
      "-": 28,
      "weihaw08": 2
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 13,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.PropertyBook.getCustomProperties;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.ParameterType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e indexes} into a {@code ArrayList\u003cIndex\u003e}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static ArrayList\u003cIndex\u003e parseIndexes(Collection\u003cString\u003e indexes) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(indexes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "        final ArrayList\u003cIndex\u003e indexSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        for (String index : indexes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "            indexSet.add(parseIndex(index));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Parses a {@code String unit} into a {@code Unit}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jietung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static Unit parseUnit(String unit) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(unit);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String trimmedUnit \u003d unit.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (!Unit.isValidUnit(trimmedUnit)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new ParseException(Unit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return new Unit(trimmedUnit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses a {@code String calories} into a {@code Calories}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given {@code calories} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Calories parseCalories(String calories) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedCalories \u003d calories.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Calories.isValidCalories(trimmedCalories)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Calories(trimmedCalories);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses a {@code String quantity} into an {@code Quantity}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses a {@code String muscle} into a {@code Muscle}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given {@code muscle} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Muscle parseMuscle(String muscle) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(muscle);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedMuscle \u003d muscle.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Muscle.isValidMuscleName(trimmedMuscle)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Muscle(trimmedMuscle);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e muscles} into a {@code Set\u003cMuscle\u003e}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Set\u003cMuscle\u003e parseMuscles(Collection\u003cString\u003e muscles) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(muscles);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Set\u003cMuscle\u003e muscleSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (String muscleName : muscles) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            muscleSet.add(parseMuscle(muscleName));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return muscleSet;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Parses a {@code String category} into a String."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jietung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static String parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (!trimmedCategory.equals(\"exercise\") \u0026\u0026 !trimmedCategory.equals(\"regime\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new ParseException(\"Category can only be \\\u0027exercise\\\u0027 or \\\u0027regime\\\u0027\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return trimmedCategory;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses and trims all of the values in {@code Map\u003cString, String\u003e customProperties}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if any of the keys present in {@code customProperties} is invalid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    static Map\u003cString, String\u003e parseCustomProperties(Map\u003cString, String\u003e customProperties)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(customProperties);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cCustomProperty\u003e allCustomProperties \u003d getCustomProperties();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Map\u003cString, String\u003e customPropertiesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (CustomProperty property : allCustomProperties) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            String propertyName \u003d property.getFullName();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (customProperties.containsKey(propertyName)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                String rawResult \u003d customProperties.get(propertyName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                String trimmedResult \u003d parseCustomProperty(property, rawResult);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                customPropertiesMap.put(propertyName, trimmedResult);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return customPropertiesMap;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Trims, validates and formats the full name of a {@code String fullName}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param fullName the full name of a custom property"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return a trimmed full name of a custom property in Start Case style."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given full name is invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    static String parseFullName(String fullName) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(fullName);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedFullName \u003d fullName.trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!CustomProperty.isValidFullName(trimmedFullName)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(CustomProperty.FULL_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return toStartCase(trimmedFullName);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses and trims the leading and trailing whitespaces of {@code String prefixName}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param prefixName the intended prefix name for a custom property"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return a {@code Prefix} object containing the trimmed prefix name for a custom property"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given prefix name is invalid"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    static Prefix parsePrefixName(String prefixName) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(prefixName);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedPrefixName \u003d prefixName.trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!CustomProperty.isValidPrefixName(trimmedPrefixName)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(CustomProperty.PREFIX_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Prefix(prefixName + \"/\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses a {@code String parameterType} into a {@code ParameterType}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param parameterType the intended parameter type for a custom property"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return a {@code ParameterType} that corresponds with the intended parameter type"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the intended parameter type is invalid"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    static ParameterType parseParameterType(String parameterType) throws ParseException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(parameterType);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedParameterType \u003d parameterType.trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!ParameterType.isValidParameterType(trimmedParameterType)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(ParameterType.PARAMETER_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String numParam \u003d ParameterType.NUMBER.getParameterName();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String textParam \u003d ParameterType.TEXT.getParameterName();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (trimmedParameterType.equals(numParam)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return ParameterType.NUMBER;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } else if (trimmedParameterType.equals(textParam)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return ParameterType.TEXT;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return ParameterType.DATE;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Formats a single word by capitalising the first letter and setting the remaining"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * as lowercase."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static String capitaliseSingleWord(String word) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String capitalisedFirstLetter \u003d word.substring(0, 1).toUpperCase();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String lowercaseRemaining \u003d word.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return capitalisedFirstLetter + lowercaseRemaining;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Formats a group of words by capitalising the first letter and setting the remaining"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * as lower case for each word present. Any additional spaces between 2 words are now"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * reduced to a single space."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static String toStartCase(String words) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String[] tokens \u003d words.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            builder.append(capitaliseSingleWord(token)).append(\" \");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return builder.toString().stripTrailing();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses and trims {@code String propertyValue} based on the {@code CustomProperty}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static String parseCustomProperty(CustomProperty property, String propertyValue)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(property, propertyValue);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ParameterType paramType \u003d property.getParameterType();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (paramType.equals(ParameterType.DATE)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return parseDate(propertyValue).toString();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } else if (paramType.equals(ParameterType.NUMBER)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return parseNumber(propertyValue);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return parseText(propertyValue);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses and trims the leading and trailing white spaces of {@code String text}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given {@code text} is invalid."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static String parseText(String text) throws ParseException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedText \u003d text.trim();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!ParameterType.isValidText(trimmedText)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(ParameterType.TEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return trimmedText;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses and trims the leading and trailing white spaces of {@code String number}."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws ParseException if the given {@code number} is invalid."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static String parseNumber(String number) throws ParseException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String trimmedNumber \u003d number.trim();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!ParameterType.isValidNumber(trimmedNumber)) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ParseException(ParameterType.NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return trimmedNumber;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Parses a {@code String suggestType} into a String."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static String parseSuggestType(String suggestType) throws ParseException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        requireNonNull(suggestType);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        String trimmedSuggestType \u003d suggestType.trim();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        if (!trimmedSuggestType.equals(\"basic\")) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            throw new ParseException(\"Suggest type can only be \\\u0027basic\\\u0027\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return trimmedSuggestType;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 47,
      "-": 76,
      "weihaw08": 201,
      "kwekke": 15
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": " * E.g. \u0027m/\u0027 in \u0027add Run m/Leg\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * The name of the prefix refers to the text before \u0027/\u0027."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * E.g. the name of \u0027m/\u0027 is \u0027m\u0027."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the name of the prefix together with the \"/\"."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the name of the prefix."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String getPrefixName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return prefix.substring(0, prefix.length() - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 37,
      "weihaw08": 13
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/ResolveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CONFLICT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.ResolveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Parses an input and returns a {@code ResolveCommand}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class ResolveCommandParser implements Parser\u003cResolveCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ResolveCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        ArgumentMultimap commandMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_NAME, PREFIX_INDEX, PREFIX_CONFLICT_INDEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        checkValidResolveCommand(commandMultimap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return parseResolveCommand(commandMultimap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void checkValidResolveCommand(ArgumentMultimap multimap) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!(multimap.arePrefixesPresent(PREFIX_NAME) \u0026\u0026 multimap.getPreamble().isEmpty())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResolveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Parses a valid resolve command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * The list of indexes are empty if no indexes are provided by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ResolveCommand parseResolveCommand(ArgumentMultimap multimap) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Name regimeName \u003d ParserUtil.parseName(multimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        List\u003cIndex\u003e scheduledIndex \u003d ParserUtil.parseIndexes(multimap.getAllValues(PREFIX_INDEX));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        List\u003cIndex\u003e conflictingIndex \u003d ParserUtil.parseIndexes(multimap.getAllValues(PREFIX_CONFLICT_INDEX));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new ResolveCommand(regimeName, scheduledIndex, conflictingIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 48
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.ScheduleCompleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.ScheduleRegimeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * ScheduleCommand and returns a ScheduleCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @throws ParseException if the user input is not the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ScheduleCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        ArgumentMultimap regimeCommandMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_NAME, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        ArgumentMultimap completeCommandMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        checkValidScheduleCommand(regimeCommandMultimap, completeCommandMultimap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (areScheduleRegimePrefixesPresent(regimeCommandMultimap)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return parseScheduleRegimeCommand(regimeCommandMultimap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return parseScheduleCompleteCommand(completeCommandMultimap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Parses a valid {@code ScheduleRegimeCommand}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ScheduleCommand parseScheduleRegimeCommand(ArgumentMultimap regimeMultimap) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Name regimeName \u003d ParserUtil.parseName(regimeMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(regimeMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new ScheduleRegimeCommand(regimeName, date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ScheduleCommand parseScheduleCompleteCommand(ArgumentMultimap completeMultimap) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(completeMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new ScheduleCompleteCommand(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Checks if user input is either {@code ScheduleRegimeCommand} or {@code ScheduleCompleteCommand}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @throws ParseException when prefix for either commands are missing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void checkValidScheduleCommand(ArgumentMultimap regimeCommand, ArgumentMultimap completeCommand)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!areScheduleCompletePrefixesPresent(completeCommand) \u0026\u0026 !areScheduleRegimePrefixesPresent(regimeCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static boolean areScheduleRegimePrefixesPresent(ArgumentMultimap multimap) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return multimap.arePrefixesPresent(PREFIX_NAME, PREFIX_DATE) \u0026\u0026 multimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static boolean areScheduleCompletePrefixesPresent(ArgumentMultimap multimap) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return multimap.arePrefixesPresent(PREFIX_INDEX) \u0026\u0026 multimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 74,
      "weihaw08": 5
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/SuggestCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_SUGGEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.commands.SuggestBasicCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": " * Parses input arguments and creates a new SuggestCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * and returns a SuggestCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public SuggestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SUGGEST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SUGGEST) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        String suggestType \u003d ParserUtil.parseSuggestType(argMultimap.getValue(PREFIX_SUGGEST).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        if (suggestType.equals(\"basic\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            return new SuggestBasicCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 46
    }
  },
  {
    "path": "src/main/java/seedu/exercise/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.conflict.Conflict;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Predicate\u003cExercise\u003e PREDICATE_SHOW_ALL_EXERCISES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "    Predicate\u003cRegime\u003e PREDICATE_SHOW_ALL_REGIMES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the user prefs\u0027 exercise book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the user prefs\u0027 exercise book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void setExerciseBookFilePath(Path exerciseBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Replaces exercise book data with the data in {@code anotherBook}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void setExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e anotherBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the data in the exercise book"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ReadOnlyResourceBook\u003cExercise\u003e getExerciseBookData();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if an exercise with the same identity as {@code exercise} exists in the exercise book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    boolean hasExercise(Exercise exercise);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Deletes the given exercise."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * The exercise must exist in the exercise book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void deleteExercise(Exercise target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds the given exercise."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code exercise} must not already exist in exercise book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void addExercise(Exercise exercise);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Replaces the given exercise {@code target} with {@code editedExercise}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code target} must exist in exercise book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * the exercise book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void setExercise(Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an unmodifiable view of the filtered exercise list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Returns an unmodifiable view of the filtered regime list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jietung"
        },
        "content": "    ObservableList\u003cRegime\u003e getFilteredRegimeList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an unmodifiable view of the filtered schedule list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    ObservableList\u003cSchedule\u003e getFilteredScheduleList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Updates the filter of the filtered exercise list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns the user prefs\u0027 regime book file path."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jietung"
        },
        "content": "    Path getRegimeBookFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Sets the user prefs\u0027 regime book file path."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jietung"
        },
        "content": "    void setRegimeBookFilePath(Path regimeBookFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Replaces regime book data with the data in {@code anotherBook}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void setRegimeBook(ReadOnlyResourceBook\u003cRegime\u003e anotherBook);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the data in the regime book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ReadOnlyResourceBook\u003cRegime\u003e getAllRegimeData();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns true if an regime with the same identity as {@code regime} exists in the regime book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jietung"
        },
        "content": "    boolean hasRegime(Regime regime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Adds the given regime."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * {@code regime} must not already exist in regime book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jietung"
        },
        "content": "    void addRegime(Regime regime);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Replaces the given regime {@code target} with {@code editedRegime}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * {@code target} must exist in regime book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * The regime identity of {@code editedRegime} must not be the same as another existing regime in"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * the regime book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jietung"
        },
        "content": "    void setRegime(Regime target, Regime editedRegime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Deletes the given regime."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * The regime must exist in the regime book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jietung"
        },
        "content": "    void deleteRegime(Regime regime);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns the index of regime in regime book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jietung"
        },
        "content": "    int getRegimeIndex(Regime regime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Updates the filter of the filtered exercise list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jietung"
        },
        "content": "    void updateFilteredRegimeList(Predicate\u003cRegime\u003e predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Returns true if another schedule has been scheduled on the same date as {@code schedule}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    boolean hasSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Schedules a {@code schedule} for the user."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * It must be guaranteed that there is no existing schedule in the {@code ReadOnlyResourceBook\u003cSchedule\u003e}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    void addSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the data in the regime book"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ReadOnlyResourceBook\u003cSchedule\u003e getAllScheduleData();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Deletes a Schedule and adds it to {@code ReadOnlyResourceBook\u003cExercise\u003e} for tracking."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * If the schedule has some exercises that are duplicates exercises as"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * specified by {@link Exercise#isSameResource}, that exercise will"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * be ignored and not be added into the exercise tracker."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * All exercises added will have their dates changed to be the date"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * of the schedule itself."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @param schedule to complete"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    void completeSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Resolves a conflict based on the indexes provided by user."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * The state of the program must be {@link State#IN_CONFLICT} before calling this method."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * The state of the program is not changed after execution of the method. Only command subclasses"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * can change {@code MainApp}\u0027s state."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * If both list of indexes are empty, the {@code regimeName} provided"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * will be taken as the resolved schedule and the non-mentioned name is discarded."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    void resolveConflict(Name regimeName, List\u003cIndex\u003e indexFromSchedule, List\u003cIndex\u003e indexFromConflict);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Returns the conflict that is currently happening."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * The state of the program must be {@link State#IN_CONFLICT} before calling this method."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Only then will a conflict be available for fetching from the {@code Model}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    Conflict getConflict();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Sets the current conflicting schedule to {@code conflict}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * The state of the program must be {@link State#IN_CONFLICT} before calling this method."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    void setConflict(Conflict conflict);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the {@code PropertyBook} object that is contained in {@code Model}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    PropertyBook getPropertyBook();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if a prefix with the same identity as {@code prefix} is present in the PropertyBook."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    boolean isPrefixUsed(Prefix prefix);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if {@code fullName} is present in the PropertyBook."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    boolean isFullNameUsed(String fullName);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds the given {@code customProperty} into the PropertyBook."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void addCustomProperty(CustomProperty customProperty);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Returns an unmodifiable view of the list of suggested exercises"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    ObservableList\u003cExercise\u003e getSuggestedExerciseList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Updates the filter of the filtered exercise list to filter by the give {@code predicate}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    void updateSuggestedExerciseList(Predicate\u003cExercise\u003e predicateShowAllExercises);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Returns the data of all exercises in the database"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ReadOnlyResourceBook\u003cExercise\u003e getDatabaseBook();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 56,
      "jietung": 55,
      "-": 58,
      "weihaw08": 82,
      "kwekke": 21
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.requireMainAppState;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.append;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.areListsEmpty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.conflict.Conflict;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.util.DateChangerUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Represents the in-memory model of the exercise book data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ReadOnlyResourceBook\u003cExercise\u003e exerciseBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ReadOnlyResourceBook\u003cRegime\u003e regimeBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ReadOnlyResourceBook\u003cExercise\u003e databaseBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ReadOnlyResourceBook\u003cSchedule\u003e scheduleBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final PropertyBook propertyBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final FilteredList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private final FilteredList\u003cExercise\u003e suggestedExercises;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final FilteredList\u003cRegime\u003e filteredRegimes;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private final FilteredList\u003cSchedule\u003e filteredSchedules;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Conflict conflict;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Initializes a ModelManager with the given exerciseBook and userPrefs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ModelManager(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook, ReadOnlyResourceBook\u003cRegime\u003e regimeBook,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                        ReadOnlyResourceBook\u003cExercise\u003e databaseBook, ReadOnlyResourceBook\u003cSchedule\u003e scheduleBook,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs, PropertyBook propertyBook) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireAllNonNull(exerciseBook, regimeBook, databaseBook, scheduleBook, userPrefs, propertyBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": "        logger.fine(\"Initializing with exercise book: \" + exerciseBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.exerciseBook \u003d new ReadOnlyResourceBook\u003c\u003e(exerciseBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.databaseBook \u003d new ReadOnlyResourceBook\u003c\u003e(databaseBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.regimeBook \u003d new ReadOnlyResourceBook\u003c\u003e(regimeBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.scheduleBook \u003d new ReadOnlyResourceBook\u003c\u003e(scheduleBook);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        filteredExercises \u003d new FilteredList\u003c\u003e(this.exerciseBook.getResourceList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        suggestedExercises \u003d new FilteredList\u003c\u003e(this.databaseBook.getResourceList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        filteredRegimes \u003d new FilteredList\u003c\u003e(this.regimeBook.getResourceList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        filteredSchedules \u003d new FilteredList\u003c\u003e(this.scheduleBook.getResourceList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.propertyBook \u003d propertyBook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.propertyBook.updatePropertyPrefixes();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        conflict \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this(new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return userPrefs.getExerciseBookFilePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(exerciseBookFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        userPrefs.setExerciseBookFilePath(exerciseBookFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public Path getRegimeBookFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return userPrefs.getRegimeBookFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void setRegimeBookFilePath(Path regimeBookFilePath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(regimeBookFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jietung"
        },
        "content": "        userPrefs.setRegimeBookFilePath(regimeBookFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e anotherBook) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.exerciseBook.resetData(anotherBook);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cExercise\u003e getExerciseBookData() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseBook;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseBook.hasResource(exercise);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBook.removeResource(target);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds an {@code Exercise} object into the exercise book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBook.addResource(exercise);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBook.setResource(target, editedExercise);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dRegimeBook\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setRegimeBook(ReadOnlyResourceBook\u003cRegime\u003e anotherBook) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.regimeBook.resetData(anotherBook);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cRegime\u003e getAllRegimeData() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return regimeBook;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Adds a {@code Regime} object into the regime book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void addRegime(Regime regime) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        regimeBook.addResource(regime);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void deleteRegime(Regime target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        regimeBook.removeResource(target);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void setRegime(Regime target, Regime editedRegime) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        regimeBook.setResource(target, editedRegime);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public boolean hasRegime(Regime regime) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(regime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return regimeBook.hasResource(regime);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public int getRegimeIndex(Regime regime) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return regimeBook.getResourceIndex(regime);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dReadOnlyResourceBook\u003cSchedule\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return scheduleBook.hasResource(schedule);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        scheduleBook.addResource(schedule);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void completeSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        scheduleBook.removeResource(schedule);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Collection\u003cExercise\u003e scheduledExercises \u003d DateChangerUtil"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            .changeAllDate(schedule.getExercises(), schedule.getDate());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        for (Exercise exercise : scheduledExercises) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (!exerciseBook.hasResource(exercise)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                exerciseBook.addResource(exercise);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cSchedule\u003e getAllScheduleData() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduleBook;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dConflicts\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void resolveConflict(Name regimeName, List\u003cIndex\u003e indexFromSchedule, List\u003cIndex\u003e indexFromConflict) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireAllNonNull(regimeName, indexFromSchedule, indexFromConflict);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireMainAppState(State.IN_CONFLICT);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        removeOldSchedule();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (areListsEmpty(indexFromConflict, indexFromSchedule)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            Regime regime \u003d new Regime(regimeName, new UniqueResourceList\u003c\u003e());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            addResolvedSchedule(conflict.getScheduleByRegime(regime));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            UniqueResourceList\u003cExercise\u003e resolvedExercises \u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    getResolvedExerciseList(indexFromSchedule, indexFromConflict);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            Schedule resolvedSchedule \u003d getResolvedSchedule(regimeName, resolvedExercises);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            addResolvedSchedule(resolvedSchedule);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            addCombinedRegime(resolvedSchedule.getRegime());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Conflict getConflict() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireMainAppState(State.IN_CONFLICT);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return conflict;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void setConflict(Conflict conflict) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireMainAppState(State.IN_CONFLICT);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(conflict);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.conflict \u003d conflict;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Exercise List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Exercise} backed by the internal list of"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * {@code versionedExerciseBook}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return filteredExercises;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jietung"
        },
        "content": "        filteredExercises.setPredicate(predicate);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jietung"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Regime List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Regime} backed by the internal list of"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * {@code versionedRegimeBook}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public ObservableList\u003cRegime\u003e getFilteredRegimeList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return filteredRegimes;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void updateFilteredRegimeList(Predicate\u003cRegime\u003e predicate) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jietung"
        },
        "content": "        filteredRegimes.setPredicate(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Schedule List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Schedule} backed by the internal list of"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * {@code scheduleBook}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return filteredSchedules;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Property Manager Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public PropertyBook getPropertyBook() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return propertyBook;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean isPrefixUsed(Prefix prefix) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return propertyBook.isPrefixUsed(prefix);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean isFullNameUsed(String fullName) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return propertyBook.isFullNameUsed(fullName);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void addCustomProperty(CustomProperty customProperty) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        propertyBook.addCustomProperty(customProperty);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseDatabase \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cExercise\u003e getDatabaseBook() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return databaseBook;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Suggested Exercise Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public ObservableList\u003cExercise\u003e getSuggestedExerciseList() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return suggestedExercises;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void updateSuggestedExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        suggestedExercises.setPredicate(predicate);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseBook.equals(other.exerciseBook)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 regimeBook.equals(other.regimeBook)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            \u0026\u0026 scheduleBook.equals(other.scheduleBook)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 filteredExercises.equals(other.filteredExercises)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 filteredRegimes.equals(other.filteredRegimes)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            \u0026\u0026 filteredSchedules.equals(other.filteredSchedules)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            \u0026\u0026 databaseBook.equals(other.databaseBook)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            \u0026\u0026 suggestedExercises.equals(other.suggestedExercises)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 propertyBook.equals(other.propertyBook);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private UniqueResourceList\u003cExercise\u003e getResolvedExerciseList(List\u003cIndex\u003e indexFromSchedule,"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                                                                 List\u003cIndex\u003e indexFromConflict) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Regime scheduledRegime \u003d conflict.getScheduledRegime();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Regime conflictRegime \u003d conflict.getConflictingRegime();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        List\u003cExercise\u003e exercisesToAddFromScheduled \u003d scheduledRegime.getRegimeExercises()"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                .getAllResourcesIndex(indexFromSchedule);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        List\u003cExercise\u003e exercisesToAddFromConflicted \u003d conflictRegime.getRegimeExercises()"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                .getAllResourcesIndex(indexFromConflict);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        List\u003cExercise\u003e resolvedExercises \u003d append(exercisesToAddFromScheduled, exercisesToAddFromConflicted);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e uniqueResolveList \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        uniqueResolveList.setAll(resolvedExercises);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return uniqueResolveList;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Schedule getResolvedSchedule(Name regimeName, UniqueResourceList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Regime regime \u003d new Regime(regimeName, exerciseList);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new Schedule(regime, conflict.getConflictDate());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void removeOldSchedule() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        scheduleBook.removeResource(conflict.getScheduled());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void addResolvedSchedule(Schedule resolvedSchedule) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        scheduleBook.addResource(resolvedSchedule);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void addCombinedRegime(Regime regime) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        regimeBook.addResource(regime);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 117,
      "jietung": 65,
      "-": 103,
      "weihaw08": 104,
      "kwekke": 22
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/ReadOnlyResourceBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Resource;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Encapsulates a Resource Book that can contain {@code Resource} objects of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ReadOnlyResourceBook\u003cT extends Resource\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final UniqueResourceList\u003cT\u003e resources;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        resources \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook(ReadOnlyResourceBook\u003cT\u003e toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the data of a {@code ReadOnlyResourceBook} with the {@code resources}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setResources(List\u003cT\u003e resources) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(resources);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.resources.setAll(resources);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Resets the data of a {@code ReadOnlyResourceBook} with the {@code newData}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void resetData(ReadOnlyResourceBook\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        setResources(newData.getResourceList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if the {@code ReadOnlyResourceBook} instance contains {@code resource}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean hasResource(T resource) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(resource);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return resources.contains(resource);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds {@code resource} into the {@code ReadOnlyResourceBook} instance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void addResource(T resource) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(resource);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        resources.add(resource);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Replaces {@code target} with {@code editResource} in the {@code ReadOnlyResourceBook} instance."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setResource(T target, T editedResource) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireAllNonNull(target, editedResource);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        resources.set(target, editedResource);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Removes {@code key} from the {@code ReadOnlyResourceBook} instance."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void removeResource(T key) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        resources.remove(key);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Retrieves the index of {@code toGet} from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns -1 if the item is not present in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int getResourceIndex(T toGet) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (T resource : resources) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (resource.equals(toGet)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public List\u003cT\u003e getAllResourcesIndex(Collection\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return resources.getAllResourcesIndex(indexes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an unmodifiable list of {@code Resource} of type {@code T}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ObservableList\u003cT\u003e getResourceList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return resources.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof ReadOnlyResourceBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 resources.equals(((ReadOnlyResourceBook) other).resources));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return resources.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 6,
      "weihaw08": 112
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getPropertyBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "    Path getRegimeBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    Path getScheduleBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    Path getAllExerciseBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 2,
      "jietung": 4,
      "-": 13,
      "weihaw08": 3,
      "kwekke": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/UniqueResourceList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.exceptions.DuplicateResourceException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.exceptions.ResourceNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Resource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * A list of resources of type {@code T} that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * An resource is considered unique by comparing using {@link Resource#isSameResource(Resource)}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * As such, adding and updating of resources uses Resource#isSameResource(Resource) for equality so as to ensure that"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * the resource being added or updated is unique in terms of identity in the UniqueResourceList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * However, the removal of a resource uses Resource#equals(Object) so as to ensure that the resource with exactly the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * @see Resource#isSameResource(Resource)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class UniqueResourceList\u003cT extends Resource\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if the {@code UniqueResourceList} instance invoking this method contains {@code toCheck}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (T resource : internalList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (resource.isSameResource(toCheck)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds {@code toAdd} into the {@code UniqueResourceList} only if the {@code toAdd} object is not"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * present in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new DuplicateResourceException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Replaces {@code target} with {@code editedTarget} only if {@code target} is present in the list and"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code editedTarget} is not present in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void set(T target, T editedTarget) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireAllNonNull(target, editedTarget);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ResourceNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!target.isSameResource(editedTarget) \u0026\u0026 contains(editedTarget)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new DuplicateResourceException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        internalList.set(index, editedTarget);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Removes {@code toRemove} from a {@code UniqueResourceList}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * The {@code toRemove} object must be present in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new ResourceNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Replaces all of the data in the {@code UniqueResourceList} instance with {@code replacement}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setAll(UniqueResourceList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Works similarly to {@link #setAll(UniqueResourceList)}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setAll(List\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!resourceAreUnique(replacement)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new DuplicateResourceException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public List\u003cT\u003e getAllResourcesIndex(Collection\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        List\u003cT\u003e resultingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        List\u003cT\u003e unmodifiableList \u003d asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        for (Index index : indexes) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            resultingList.add(unmodifiableList.get(index.getZeroBased()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return resultingList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an unmodifiable list of the data in a {@code UniqueResourceList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof UniqueResourceList)// instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueResourceList) other).internalList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if there are no duplicate resources inside the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private boolean resourceAreUnique(List\u003cT\u003e resources) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (int i \u003d 0; i \u003c resources.size() - 1; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            for (int j \u003d i + 1; j \u003c resources.size(); j++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                if (resources.get(i).isSameResource(resources.get(j))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 12,
      "weihaw08": 145
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private Path exerciseBookFilePath \u003d Paths.get(\"data\" , \"exercisebook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Path propertyBookFilePath \u003d Paths.get(\"data\", \"propertybook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private Path exerciseDatabaseFilePath \u003d Paths.get(\"data\", \"exercisedatabase.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private Path regimeBookFilePath \u003d Paths.get(\"data\", \"regimebook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Path scheduleBookFilePath \u003d Paths.get(\"data\", \"schedulebook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        setExerciseBookFilePath(newUserPrefs.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "        setRegimeBookFilePath(newUserPrefs.getRegimeBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        setPropertyBookFilePath(newUserPrefs.getPropertyBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        setAllExerciseBookFilePath(newUserPrefs.getAllExerciseBookFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(exerciseBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.exerciseBookFilePath \u003d exerciseBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public Path getRegimeBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return regimeBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void setRegimeBookFilePath(Path regimeBookFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(regimeBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.regimeBookFilePath \u003d regimeBookFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Path getScheduleBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduleBookFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getPropertyBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return propertyBookFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setPropertyBookFilePath(Path propertyBookFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(propertyBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.propertyBookFilePath \u003d propertyBookFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public Path getAllExerciseBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return exerciseDatabaseFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void setAllExerciseBookFilePath(Path allExerciseFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        requireNonNull(allExerciseFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        this.exerciseDatabaseFilePath \u003d allExerciseFilePath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jietung"
        },
        "content": "                \u0026\u0026 exerciseBookFilePath.equals(o.exerciseBookFilePath)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                \u0026\u0026 regimeBookFilePath.equals(o.regimeBookFilePath)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u0026\u0026 propertyBookFilePath.equals(o.propertyBookFilePath)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                \u0026\u0026 exerciseDatabaseFilePath.equals(o.exerciseDatabaseFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Objects.hash(guiSettings, exerciseBookFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + exerciseBookFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 5,
      "jietung": 14,
      "-": 75,
      "weihaw08": 20,
      "kwekke": 14
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/conflict/Conflict.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.model.conflict;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Represents a scheduling conflict between two schedules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * A conflict can only happen when the {@code date} between two"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * {@code schedules} are the same as specified by {@link Schedule#isSameResource}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class Conflict {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private final Schedule scheduled;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private final Schedule conflicted;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Conflict(Schedule scheduled, Schedule conflicted) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.scheduled \u003d scheduled;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.conflicted \u003d conflicted;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Schedule getScheduled() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduled;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Schedule getConflicted() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return conflicted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Regime getScheduledRegime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduled.getRegime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Regime getConflictingRegime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return conflicted.getRegime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Date getConflictDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduled.getDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Schedule getScheduleByRegime(Regime regime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(regime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduled.getRegime().equals(regime)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                ? scheduled"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                : conflicted.getRegime().equals(regime)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    ? conflicted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public List\u003cExercise\u003e getScheduledExerciseList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduled.getExercises();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public List\u003cExercise\u003e getConflictedExerciseList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return conflicted.getExercises();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ObservableList\u003cExercise\u003e getScheduledUnmodifiableExerciseList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduled.getRegime().getRegimeExercises().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ObservableList\u003cExercise\u003e getConflictedUnmodifiableExerciseList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return conflicted.getRegime().getRegimeExercises().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public String getScheduledName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduled.getRegimeName();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public String getConflictedName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return conflicted.getRegimeName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return (other \u003d\u003d this)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            || (other instanceof Conflict)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            \u0026\u0026 ((scheduled.equals(((Conflict) other).scheduled)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u0026\u0026 conflicted.equals(((Conflict) other).conflicted)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return Objects.hash(scheduled, conflicted);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 96
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/exceptions/DuplicateResourceException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents an exception which occurs if 2 identical {@code Resource} objects are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * going to be added into the same {@code UniqueResourceList}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class DuplicateResourceException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public DuplicateResourceException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        super(\"Operation would result in duplicate exercises/regimes/schedules.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 12
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/exceptions/ResourceNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents an exception that will occur if a given {@code Resource} cannot be found in a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * {@code UniqueResourceList}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ResourceNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 9
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/Calories.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_NUMBERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents the estimated amount of calories burnt in an exercise."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalories(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class Calories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String PROPERTY_CALORIES \u003d \"Calories\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Calories should only contain numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code Calories}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * @param calories A valid calories burnt."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Calories(String calories) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        checkArgument(isValidCalories(calories), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        value \u003d calories;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns true if a given string is a valid calories burnt."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidCalories(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return test.matches(ONLY_NUMBERS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof Calories // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 value.equals(((Calories) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "weihaw08": 48
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/CustomProperty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_ALPHABETS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_ALPHABETS_AND_SPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents a custom property that an {@code Exercise} object can have."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class CustomProperty {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String FULL_NAME_CONSTRAINTS \u003d \"Full names should contain only alphabets and should\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + \" not be blank.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String PREFIX_NAME_CONSTRAINTS \u003d \"Prefix names should contain only alphabets, should\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + \" have no spaces and should not be blank.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Prefix prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ParameterType parameterType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Instantiates a new {@code CustomProperty} instance."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param fullName      the full name of the custom property"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param prefix        the prefix for the custom property"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param parameterType the string used to validate an input for the custom property"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public CustomProperty(Prefix prefix, String fullName, ParameterType parameterType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireAllNonNull(fullName, prefix, parameterType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        checkArgument(isValidFullName(fullName), FULL_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        checkArgument(isValidPrefixName(prefix.getPrefixName()), PREFIX_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.parameterType \u003d parameterType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Checks if the given full name is valid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param test the full name of a custom property"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return true if and only if the full name contains only alphabets"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidFullName(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return test.matches(ONLY_ALPHABETS_AND_SPACE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Checks if the given prefix name is valid. The prefix name of a custom property refers to the text before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * \u0027/\u0027 in its prefix."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param test the prefix name of a custom property"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return true if and only if the prefix name contains only alphabets and does not contain any whitespaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidPrefixName(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return test.matches(ONLY_ALPHABETS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Retrieves the full name of the {@code CustomProperty} instance."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Retrieves the prefix of the {@code CustomProperty} instance."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return a {@code Prefix} object that represents the prefix of the instance"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.prefix;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Retrieves the parameter type of the {@code CustomProperty} instance."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return a {@code ParameterType} object that represents the parameter type of the instance"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ParameterType getParameterType() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.parameterType;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!(other instanceof CustomProperty)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        CustomProperty otherProperty \u003d (CustomProperty) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return fullName.equals(otherProperty.fullName)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 prefix.equals(otherProperty.prefix)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 parameterType.equals(otherProperty.parameterType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Objects.hash(fullName, prefix, parameterType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        builder.append(\" Full Name: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(fullName)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(\" Prefix Name: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(prefix.getPrefixName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 117
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents an Exercise\u0027s date in ExerHealth."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String PROPERTY_DATE \u003d \"Date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be of the format dd/MM/yyyy and must be valid.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        value \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            LocalDate.parse(test, formatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return value.format(formatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "weihaw08": 59
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/Muscle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_ALPHABETS_AND_SPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents a Muscle tag in ExerHealth."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidMuscleName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class Muscle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String PROPERTY_MUSCLE \u003d \"Muscle\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Muscle groups should contain only alphabetical characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public final String muscleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code Muscle}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param muscleName A valid muscle name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Muscle(String muscleName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(muscleName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        checkArgument(isValidMuscleName(muscleName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.muscleName \u003d muscleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if a given string is a valid muscle name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidMuscleName(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return test.matches(ONLY_ALPHABETS_AND_SPACE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof Muscle // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 muscleName.equals(((Muscle) other).muscleName)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return muscleName.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return \u0027[\u0027 + muscleName + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "weihaw08": 51
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_ALPHABETS_NUMBERS_AND_SPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Represents an Exercise\u0027s name in the exercise book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String PROPERTY_NAME \u003d \"Name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        \"Names should only contain alphabets and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return test.matches(ONLY_ALPHABETS_NUMBERS_AND_SPACE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 46,
      "weihaw08": 5
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/ParameterType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_ALPHABETS_AND_SPACE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_NUMBERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Encapsulates the different parameter types that a custom property can take in."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public enum ParameterType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    TEXT(\"Text\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    DATE(\"Date\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    NUMBER(\"Number\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String PARAMETER_CONSTRAINTS \u003d \"Parameter types should be one of the following: Number, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        + \"Date or Text\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String TEXT_CONSTRAINTS \u003d \"Text should contain only alphabets and should not be blank.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String NUMBER_CONSTRAINTS \u003d \"Number should contain only numbers and should not be blank.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String parameterName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    ParameterType(String parameterName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.parameterName \u003d parameterName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Checks if the given {@code String string} is a valid parameter type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param string the parameter type to be validated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return true if and only if the given string is a valid parameter type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidParameterType(String string) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return string.equals(TEXT.parameterName)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || string.equals(DATE.parameterName)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || string.equals(NUMBER.parameterName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Checks if the given {@code String value} is a valid text for the parameter type {@code Text}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code Text} requires the value to contain only alphabets."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param value the value to be checked"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return true if and only if the the given value is a valid text"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidText(String value) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return value.matches(ONLY_ALPHABETS_AND_SPACE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Checks if the given {@code String value} is a valid value for the parameter type {@code Number}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code Number} requires the value to contain only numbers."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param value the value to be checked"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return true if and only if the given value is a valid number"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidNumber(String value) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return value.matches(ONLY_NUMBERS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the parameter name of the {@code ParameterType} instance."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @return a string representing the name of the {@code ParameterType} instance"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String getParameterName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.parameterName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 67
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/PropertyBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.setPrefixesSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Helps to keep track of all the existing prefixes and full names for both default and custom properties."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * It also helps to keep track of all the existing custom properties that have been defined by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class PropertyBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final List\u003cCustomProperty\u003e CUSTOM_PROPERTIES \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Set\u003cPrefix\u003e prefixes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Set\u003cString\u003e fullNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Initialises an instance of {@code PropertyBook} object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param prefixes         the set of prefixes to be added to the {@code PropertyBook}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param fullNames        the set of full names to be added to the {@code PropertyBook}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param customProperties the set of custom properties to be added to the {@code PropertyBook}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public PropertyBook(Set\u003cPrefix\u003e prefixes, Set\u003cString\u003e fullNames, List\u003cCustomProperty\u003e customProperties) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        setPrefixes(prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        setFullNames(fullNames);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        setCustomProperties(customProperties);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an immutable custom properties list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static List\u003cCustomProperty\u003e getCustomProperties() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Collections.unmodifiableList(CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds in all the custom properties that are present in the given {@code List\u003cCustomProperty\u003e customProperties}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * into the PropertyBook only if there are no custom properties present."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param customProperties the custom properties to be added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setCustomProperties(List\u003cCustomProperty\u003e customProperties) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (CUSTOM_PROPERTIES.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            CUSTOM_PROPERTIES.addAll(customProperties);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Checks if the prefix has already been used by a property."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean isPrefixUsed(Prefix prefix) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return prefixes.contains(prefix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Checks if the full name has already been used by a property."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean isFullNameUsed(String fullName) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return fullNames.contains(fullName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds the prefix of a newly defined custom property."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private void addPrefix(Prefix prefix) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        prefixes.add(prefix);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds the full name of a newly defined custom property."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private void addFullName(String fullName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        fullNames.add(fullName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds the newly defined custom property into the manager."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void addCustomProperty(CustomProperty customProperty) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Prefix newPrefix \u003d customProperty.getPrefix();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String newFullName \u003d customProperty.getFullName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        addPrefix(newPrefix);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        addFullName(newFullName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        CUSTOM_PROPERTIES.add(customProperty);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        updatePropertyPrefixes();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an immutable prefix set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Set\u003cPrefix\u003e getPrefixes() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Collections.unmodifiableSet(prefixes);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds in all the prefixes that are present in the given {@code Set\u003cPrefix\u003e prefixes} object into the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Property Manager only if there are no prefixes present."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param prefixes the prefixes to be added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setPrefixes(Set\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (this.prefixes.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.prefixes.addAll(prefixes);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an immutable full names set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Set\u003cString\u003e getFullNames() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Collections.unmodifiableSet(fullNames);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void updatePropertyPrefixes() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        setPrefixesSet(getPrefixes());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds in all the full names that are present in the given {@code Set\u003cString\u003e fullNames} object into"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * the PropertyBook only if there are no full names present."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param fullNames the full names to be added"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setFullNames(Set\u003cString\u003e fullNames) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (this.fullNames.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.fullNames.addAll(fullNames);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!(other instanceof PropertyBook)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        PropertyBook anotherManager \u003d (PropertyBook) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return prefixes.equals(anotherManager.prefixes)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 fullNames.equals(anotherManager.fullNames);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Objects.hash(prefixes, fullNames);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "weihaw08": 158
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/Quantity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_NUMBERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents a the quantity of an exercise done in the exercise book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String PROPERTY_QUANTITY \u003d \"Quantity\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Quantity should only contain numbers, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs an {@code Quantity}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        value \u003d quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if a given string is a valid quantity."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return test.matches(ONLY_NUMBERS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 value.equals(((Quantity) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 32,
      "weihaw08": 17
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/property/Unit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.commons.core.ValidationRegex.ONLY_ALPHABETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Represents an Exercise\u0027s unit in the exercise book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUnit(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class Unit {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String PROPERTY_UNIT \u003d \"Unit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "        \"Units should only contain alphabets and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public final String unit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Constructs a {@code Unit}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * @param unit A valid unit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public Unit(String unit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(unit);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "        checkArgument(isValidUnit(unit), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns true if a given string is a valid unit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static boolean isValidUnit(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return test.matches(ONLY_ALPHABETS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "            || (other instanceof Unit // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u0026\u0026 unit.equals(((Unit) other).unit)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return unit.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 48,
      "weihaw08": 5
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/resource/Exercise.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedExercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Represents an Exercise in the exercise book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class Exercise extends Resource {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final Unit unit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // Optional fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Set\u003cMuscle\u003e muscles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Map\u003cString, String\u003e customProperties \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Exercise(Name name, Date date, Calories calories, Quantity quantity, Unit unit, Set\u003cMuscle\u003e muscles,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                    Map\u003cString, String\u003e customProperties) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireAllNonNull(name, date, calories, quantity, unit, muscles);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.muscles.addAll(muscles);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.customProperties.putAll(customProperties);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // A placeholder constructor to pass the text cases. Will remove it when the necessary test cases have been"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // updated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public Exercise(Name name, Date date, Calories calories, Quantity quantity, Unit unit, Set\u003cMuscle\u003e muscles) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireAllNonNull(name, date, calories, quantity, unit, muscles);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.muscles.addAll(muscles);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public Unit getUnit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an immutable muscle set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Set\u003cMuscle\u003e getMuscles() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Collections.unmodifiableSet(muscles);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an immutable custom properties map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Map\u003cString, String\u003e getCustomProperties() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Collections.unmodifiableMap(customProperties);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns true if both exercises of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * This defines a weaker notion of equality between two exercises."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean isSameResource(Resource otherResource) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (otherResource \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!(otherResource instanceof Exercise)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) otherResource;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return otherExercise !\u003d null"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 otherExercise.getName().equals(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 otherExercise.getDate().equals(getDate());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return otherExercise.getName().equals(getName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 otherExercise.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 otherExercise.getDate().equals(getDate())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 otherExercise.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u0026\u0026 otherExercise.getUnit().equals(getUnit())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 otherExercise.getMuscles().equals(getMuscles())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 otherExercise.getCustomProperties().equals(getCustomProperties());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Objects.hash(name, date, calories, quantity, unit, muscles, customProperties);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(\" Date: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(getDate())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(\" Calories: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(getCalories())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(\" Quantity: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(getQuantity())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": "            .append(\" Unit: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .append(getUnit());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        appendMuscles(builder);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        builder.append(\" \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        appendCustomProperties(builder);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return builder.toString().stripTrailing();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedExercise toJsonType() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new JsonAdaptedExercise(this);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Appends muscle information into the input StringBuilder, if there are any."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private void appendMuscles(StringBuilder builder) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!muscles.isEmpty()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            builder.append(\" Muscle(s): \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getMuscles().forEach(builder::append);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Appends custom properties information into the input StringBuilder, if there are any."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private void appendCustomProperties(StringBuilder builder) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!customProperties.isEmpty()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getCustomProperties().forEach((x, y) -\u003e builder.append(x + \": \" + y + \" \"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 16,
      "weihaw08": 176
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/resource/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Tests that a {@code Exercise}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(exercise.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 25,
      "weihaw08": 4
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/resource/Regime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.UniqueResourceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedRegime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents a Regime in the regime book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class Regime extends Resource {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Name regimeName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final UniqueResourceList\u003cExercise\u003e regimeExercises;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Regime(Name regimeName, UniqueResourceList\u003cExercise\u003e regimeExercises) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.regimeName \u003d regimeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.regimeExercises \u003d regimeExercises;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        regimeExercises.add(exercise);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void deleteExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        regimeExercises.remove(exercise);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Name getRegimeName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return regimeName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public UniqueResourceList\u003cExercise\u003e getRegimeExercises() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return regimeExercises;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * Returns a deep copy of the current regime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     * @return a regime object with the same list of exercises"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garylyp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    public Regime deepCopy() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e newRegimeExercises \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        newRegimeExercises.setAll(regimeExercises);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garylyp"
        },
        "content": "        return new Regime(regimeName, newRegimeExercises);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garylyp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garylyp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if both regimes have the same name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean isSameResource(Resource otherResource) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.equals(otherResource);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (Exercise e : regimeExercises) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            str +\u003d \"Exercise \" + i + \": \" + e.getName().toString() + \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof Regime)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 regimeName.equals(((Regime) other).getRegimeName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Objects.hash(regimeName, regimeExercises);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedRegime toJsonType() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new JsonAdaptedRegime(this);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garylyp": 15,
      "weihaw08": 68
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/resource/Resource.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedResource;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Encapsulates the various resources that will be tracked by the app."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Resources tracked by the app are {@code Exercise}, {@code Regime} and {@code Schedule}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public abstract class Resource {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public abstract boolean isSameResource(Resource otherResource);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public abstract JsonAdaptedResource toJsonType();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 15
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/resource/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents a schedule for a regime at a certain date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class Schedule extends Resource {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Regime regime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Schedule(Regime regime, Date date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.regime \u003d regime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Regime getRegime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return regime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public String getRegimeName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return regime.getRegimeName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public List\u003cExercise\u003e getExercises() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return regime.getRegimeExercises().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns true if both {@code schedules} have the same date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean isSameResource(Resource otherResource) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.equals(otherResource);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return (other \u003d\u003d this)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            || (other instanceof Schedule)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u0026\u0026 date.equals(((Schedule) other).date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Objects.hash(regime, date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return date.toString() + \"\\n\" + regime.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedSchedule toJsonType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new JsonAdaptedSchedule(this);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 4,
      "weihaw08": 63
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/util/DateChangerUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Contains utility method to change dates of exercises"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class DateChangerUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Changes all {@code exercise} to the date sepecified by {@code changedDate}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Operation will create a whole new list that is not backed by {@code exercises}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static Collection\u003cExercise\u003e changeAllDate(Collection\u003cExercise\u003e exercises, Date changedDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return exercises.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            .map(exercise -\u003e new Exercise("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                exercise.getName(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                changedDate,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                exercise.getCalories(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                exercise.getQuantity(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                exercise.getUnit(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                exercise.getMuscles()))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 27,
      "weihaw08": 4
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/util/DefaultPropertyBookUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.Calories.PROPERTY_CALORIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.Date.PROPERTY_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.Muscle.PROPERTY_MUSCLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.Name.PROPERTY_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.Quantity.PROPERTY_QUANTITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.Unit.PROPERTY_UNIT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Contains utility methods for initialising a default {@code PropertyBook}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class DefaultPropertyBookUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Creates a new {@code PropertyBook} that contains the default prefixes, default full names and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * an empty list of default custom properties."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static PropertyBook getDefaultPropertyBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cPrefix\u003e defaultPrefixes \u003d getDefaultPrefixes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cString\u003e defaultFullNames \u003d getDefaultFullNames();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cCustomProperty\u003e defaultCustomProperties \u003d getDefaultCustomProperties();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new PropertyBook(defaultPrefixes, defaultFullNames, defaultCustomProperties);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Creates a new {@code Set\u003cPrefix\u003e} that contains all the prefixes of the default exercise properties."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static Set\u003cPrefix\u003e getDefaultPrefixes() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cPrefix\u003e defaultPrefixes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultPrefixes.add(PREFIX_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultPrefixes.add(PREFIX_DATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultPrefixes.add(PREFIX_CALORIES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultPrefixes.add(PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultPrefixes.add(PREFIX_MUSCLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultPrefixes.add(PREFIX_UNIT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return defaultPrefixes;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Creates a new {@code Set\u003cString\u003e} that contains all the full names of the default exercise properties."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static Set\u003cString\u003e getDefaultFullNames() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cString\u003e defaultFullNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultFullNames.add(PROPERTY_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultFullNames.add(PROPERTY_DATE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultFullNames.add(PROPERTY_CALORIES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultFullNames.add(PROPERTY_QUANTITY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultFullNames.add(PROPERTY_MUSCLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        defaultFullNames.add(PROPERTY_UNIT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return defaultFullNames;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Creates a new empty {@code List\u003cCustomProperty\u003e}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static List\u003cCustomProperty\u003e getDefaultCustomProperties() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 75
    }
  },
  {
    "path": "src/main/java/seedu/exercise/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.UniqueResourceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Contains utility methods for populating {@code ReadOnlyResourceBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Exercise[] getSampleExercises() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Exercise[]{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Exercise(new Name(\"Rope Skipping\"), new Date(\"26/09/2019\"), new Calories(\"330\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "                new Quantity(\"10\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                getMuscleSet(\"Legs\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Exercise(new Name(\"Cycling\"), new Date(\"26/09/2019\"), new Calories(\"284\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "                new Quantity(\"5\"), new Unit(\"km\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                getMuscleSet(\"Legs\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Exercise(new Name(\"Strength Training\"), new Date(\"26/09/2019\"), new Calories(\"341\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "                new Quantity(\"20\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                getMuscleSet(\"Chest\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Exercise(new Name(\"Swimming\"), new Date(\"26/09/2019\"), new Calories(\"354\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "                new Quantity(\"10\"), new Unit(\"laps\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                getMuscleSet(\"Calves\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Exercise(new Name(\"Bench Press\"), new Date(\"26/09/2019\"), new Calories(\"222\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "                new Quantity(\"30\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                getMuscleSet(\"Triceps\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Exercise(new Name(\"Running\"), new Date(\"26/09/2019\"), new Calories(\"9999999\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "                new Quantity(\"2.4\"), new Unit(\"km\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                getMuscleSet(\"Legs\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static Regime[] getSampleRegimes() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e list1 \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list1.add(new Exercise(new Name(\"Rope Skipping\"), new Date(\"26/09/2019\"), new Calories(\"330\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"10\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Legs\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list1.add(new Exercise(new Name(\"Bench Press\"), new Date(\"26/09/2019\"), new Calories(\"222\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"30\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Triceps\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e list2 \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list2.add(new Exercise(new Name(\"Running\"), new Date(\"26/09/2019\"), new Calories(\"9999999\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"2.4\"), new Unit(\"km\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Legs\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list2.add(new Exercise(new Name(\"Bench Press\"), new Date(\"26/09/2019\"), new Calories(\"222\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"30\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Triceps\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list2.add(new Exercise(new Name(\"Swimming\"), new Date(\"26/09/2019\"), new Calories(\"354\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"10\"), new Unit(\"laps\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Calves\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e list3 \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list3.add(new Exercise(new Name(\"Rope Skipping\"), new Date(\"26/09/2019\"), new Calories(\"330\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"10\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Legs\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list3.add(new Exercise(new Name(\"Swimming\"), new Date(\"26/09/2019\"), new Calories(\"354\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"10\"), new Unit(\"laps\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Calves\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list3.add(new Exercise(new Name(\"Bench Press\"), new Date(\"26/09/2019\"), new Calories(\"222\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"30\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Triceps\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list3.add(new Exercise(new Name(\"Cycling\"), new Date(\"26/09/2019\"), new Calories(\"284\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"5\"), new Unit(\"km\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Legs\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "        list3.add(new Exercise(new Name(\"Strength Training\"), new Date(\"26/09/2019\"), new Calories(\"341\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new Quantity(\"20\"), new Unit(\"counts\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jietung"
        },
        "content": "            getMuscleSet(\"Chest\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return new Regime[]{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Regime(new Name(\"Level 1\"), list1),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Regime(new Name(\"Level 2\"), list2),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new Regime(new Name(\"Level 3\"), list3)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jietung"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static Schedule[] getSampleSchedules() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Regime[] sampleRegimes \u003d getSampleRegimes();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new Schedule[]{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            new Schedule(sampleRegimes[0], new Date(\"27/09/2019\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            new Schedule(sampleRegimes[1], new Date(\"28/09/2019\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            new Schedule(sampleRegimes[2], new Date(\"29/09/2018\"))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns a muscle set containing the list of strings given."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Set\u003cMuscle\u003e getMuscleSet(String... strings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .map(Muscle::new)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static ReadOnlyResourceBook\u003cExercise\u003e getSampleExerciseBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e sampleEb \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (Exercise sampleExercise : getSampleExercises()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            sampleEb.addResource(sampleExercise);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return sampleEb;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static ReadOnlyResourceBook\u003cSchedule\u003e getSampleScheduleBook() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cSchedule\u003e sampleSb \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        for (Schedule sampleSchedule : getSampleSchedules()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            sampleSb.addResource(sampleSchedule);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return sampleSb;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static ReadOnlyResourceBook\u003cRegime\u003e getSampleRegimeBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cRegime\u003e sampleRb \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (Regime sampleRegime : getSampleRegimes()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            sampleRb.addResource(sampleRegime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return sampleRb;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 14,
      "jietung": 49,
      "-": 16,
      "weihaw08": 54
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/JsonAdaptedCustomProperty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.ParameterType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Jackson-friendly version of {@link CustomProperty};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonAdaptedCustomProperty {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CustomProperty\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String prefixName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String parameterType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomProperty} with the given custom property details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedCustomProperty(@JsonProperty(\"prefixName\") String prefixName,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                                     @JsonProperty(\"fullName\") String fullName,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                                     @JsonProperty(\"parameterType\") String parameterType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.prefixName \u003d prefixName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.parameterType \u003d parameterType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a given {@code CustomProperty} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedCustomProperty(CustomProperty source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.prefixName \u003d source.getPrefix().getPrefixName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.fullName \u003d source.getFullName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.parameterType \u003d source.getParameterType().getParameterName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts a Jackson-friendly adapted custom property object into its corresponding"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * model\u0027s {@code CustomProperty} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted custom property"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public CustomProperty toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Prefix modelPrefix \u003d toModelPrefix();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final String modelFullName \u003d toModelFullName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final ParameterType modelParameterType \u003d toModelParameterType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new CustomProperty(modelPrefix, modelFullName, modelParameterType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts the prefix name of a Jackson-friendly adapted custom property object into its corresponding"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * model\u0027s {@code Prefix} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted custom property"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Prefix toModelPrefix() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (prefixName \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                Prefix.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!CustomProperty.isValidPrefixName(prefixName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(CustomProperty.PREFIX_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Prefix(prefixName + \"/\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts the full name of a Jackson-friendly adapted custom property object into its corresponding"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * model\u0027s name."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted custom property"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private String toModelFullName() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String fullNameField \u003d \"Full Name\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (fullName \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, fullNameField));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!CustomProperty.isValidFullName(fullName)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(CustomProperty.FULL_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return fullName.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts the parameter type of a Jackson-friendly adapted custom property object into its corresponding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * model\u0027s {@code ParameterType} object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted custom property"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ParameterType toModelParameterType() throws IllegalValueException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (parameterType \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                ParameterType.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!ParameterType.isValidParameterType(parameterType)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(ParameterType.PARAMETER_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (parameterType.equals(ParameterType.NUMBER.getParameterName())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return ParameterType.NUMBER;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } else if (parameterType.equals(ParameterType.TEXT.getParameterName())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return ParameterType.TEXT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return ParameterType.DATE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 114
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/JsonAdaptedMuscle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Jackson-friendly version of {@link Muscle}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonAdaptedMuscle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String muscle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code JsonAdaptedMuscle} with the given {@code muscle}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedMuscle(String muscle) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.muscle \u003d muscle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts a given {@code Muscle} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedMuscle(Muscle source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        muscle \u003d source.muscleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public String getMuscle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return muscle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts this Jackson-friendly adapted muscle object into the model\u0027s {@code Muscle} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted muscle."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Muscle toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Muscle.isValidMuscleName(muscle)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Muscle(muscle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "weihaw08": 46
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/JsonPropertyBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * A class to access PropertyBook data stored as a json file in the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonPropertyBookStorage implements PropertyBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPropertyBookStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonPropertyBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getPropertyBookFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cPropertyBook\u003e readPropertyBook() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readPropertyBook(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Similar to {@link #readPropertyBook()}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cPropertyBook\u003e readPropertyBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Optional\u003cJsonSerializablePropertyBook\u003e jsonPropertyBook \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            JsonUtil.readJsonFile(filePath, JsonSerializablePropertyBook.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (jsonPropertyBook.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.of(jsonPropertyBook.get().toModelManager());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void savePropertyBook(PropertyBook propertyBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        savePropertyBook(propertyBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Similar to {@link #savePropertyBook(PropertyBook)}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void savePropertyBook(PropertyBook propertyBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(propertyBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePropertyBook(propertyBook), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 76
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/JsonSerializablePropertyBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.property.PropertyBook.getCustomProperties;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * A PropertyBook that is serializable to JSON format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@JsonRootName(value \u003d \"propertybook\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonSerializablePropertyBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"PropertyBook\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final List\u003cString\u003e prefixNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final List\u003cString\u003e fullNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final List\u003cJsonAdaptedCustomProperty\u003e customProperties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code JsonSerializablePropertyBook} from the given parameters."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param prefixNames       a list containing strings that represent the prefix names of the exercise\u0027s properties"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param fullNames        a list containing strings that represent the full names of the exercise\u0027s properties"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param customProperties a list containing {@code JsonAdaptedCustomProperty}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonSerializablePropertyBook(@JsonProperty(\"prefixNames\") List\u003cString\u003e prefixNames,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                                        @JsonProperty(\"fullNames\") List\u003cString\u003e fullNames,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                                        @JsonProperty(\"customProperties\") List\u003cJsonAdaptedCustomProperty\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                                               customProperties) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (prefixNames !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.prefixNames.addAll(prefixNames);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (fullNames !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.fullNames.addAll(fullNames);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (customProperties !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.customProperties.addAll(customProperties);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts a given {@code PropertyBook} object into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param source the {@code PropertyBook} object that is intended to be converted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonSerializablePropertyBook(PropertyBook source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cPrefix\u003e sourcePrefixes \u003d source.getPrefixes();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        prefixNames.addAll(sourcePrefixes.stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .map(x -\u003e x.getPrefixName())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cString\u003e sourceFullNames \u003d source.getFullNames();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        fullNames.addAll(sourceFullNames);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cCustomProperty\u003e sourceCustomProperties \u003d getCustomProperties();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        customProperties.addAll(sourceCustomProperties.stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .map(JsonAdaptedCustomProperty::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns a {@code Set\u003cPrefix\u003e} object meant for a {@code PropertyBook}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Set\u003cPrefix\u003e toModelPrefixes() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cPrefix\u003e modelPrefixes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (String prefixName : prefixNames) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (!CustomProperty.isValidPrefixName(prefixName)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                throw new IllegalValueException(CustomProperty.PREFIX_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            modelPrefixes.add(new Prefix(prefixName + \"/\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return modelPrefixes;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} object meant for a {@code PropertyBook}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Set\u003cString\u003e toModelFullNames() throws IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cString\u003e modelFullNames \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (String fullName : fullNames) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (!CustomProperty.isValidFullName(fullName)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                throw new IllegalValueException(CustomProperty.FULL_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            modelFullNames.add(fullName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return modelFullNames;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns a {@code List\u003cCustomProperty\u003e} object meant for a {@code PropertyBook}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private List\u003cCustomProperty\u003e toModelCustomProperties() throws IllegalValueException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cCustomProperty\u003e modelCustomProperties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (JsonAdaptedCustomProperty property : customProperties) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            modelCustomProperties.add(property.toModelType());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return modelCustomProperties;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts this Jackson-friendly PropertyBook into the model\u0027s {@code PropertyBook} object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public PropertyBook toModelManager() throws IllegalValueException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cPrefix\u003e modelPrefixes \u003d toModelPrefixes();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cString\u003e modelFullNames \u003d toModelFullNames();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cCustomProperty\u003e modelCustomProperties \u003d toModelCustomProperties();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new PropertyBook(modelPrefixes, modelFullNames, modelCustomProperties);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 132
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/PropertyBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents a storage for {@code PropertyBook}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public interface PropertyBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the file path of the PropertyBook data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getPropertyBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns PropertyBook data as a {@code PropertyBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cPropertyBook\u003e readPropertyBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @see #readPropertyBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cPropertyBook\u003e readPropertyBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Saves the given {@code PropertyBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void savePropertyBook(PropertyBook propertyBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @see #savePropertyBook(PropertyBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void savePropertyBook(PropertyBook propertyBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 45
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * The Storage component is a container that contains all of the different storage for the different resources in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * ExerHealth."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public interface Storage extends UserPrefsStorage, PropertyBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPref methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getExerciseBookFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseBook(Path filePath)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void saveExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void saveExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getExerciseDatabaseFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns AllExerciseBook data as a {@link ReadOnlyResourceBook}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @see #getExerciseDatabaseFilePath()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseDatabase(Path filePath)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RegimeBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getRegimeBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cRegime\u003e\u003e readRegimeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cRegime\u003e\u003e readRegimeBook(Path filePath)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void saveRegimeBook(ReadOnlyResourceBook\u003cRegime\u003e regimeBook) throws IOException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void saveRegimeBook(ReadOnlyResourceBook\u003cRegime\u003e exerciseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ScheduleBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getScheduleBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cSchedule\u003e\u003e readScheduleBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cSchedule\u003e\u003e readScheduleBook(Path filePath)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void saveScheduleBook(ReadOnlyResourceBook\u003cSchedule\u003e scheduleBook) throws IOException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void saveScheduleBook(ReadOnlyResourceBook\u003cSchedule\u003e exerciseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 3,
      "jietung": 7,
      "-": 16,
      "weihaw08": 52,
      "kwekke": 8
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/StorageBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.ResourceBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Manages storage of ExerHealth data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class StorageBook implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageBook.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ResourceBookStorage\u003cExercise\u003e exerciseBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ResourceBookStorage\u003cExercise\u003e exerciseDatabase;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ResourceBookStorage\u003cRegime\u003e regimeBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ResourceBookStorage\u003cSchedule\u003e scheduleBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private PropertyBookStorage propertyBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public StorageBook(ResourceBookStorage\u003cExercise\u003e exerciseBookStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                       ResourceBookStorage\u003cExercise\u003e exerciseDatabase,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                       ResourceBookStorage\u003cRegime\u003e regimeBookStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                       ResourceBookStorage\u003cSchedule\u003e scheduleBookStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                       UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                       PropertyBookStorage propertyBookStorage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.exerciseBookStorage \u003d exerciseBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.exerciseDatabase \u003d exerciseDatabase;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.regimeBookStorage \u003d regimeBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.scheduleBookStorage \u003d scheduleBookStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.propertyBookStorage \u003d propertyBookStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseBookStorage.getResourceBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readExerciseBook(exerciseBookStorage.getResourceBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseBook(Path filePath)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseBookStorage.readResourceBook(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        saveExerciseBook(exerciseBook, exerciseBookStorage.getResourceBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBookStorage.saveResourceBook(exerciseBook, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExerciseDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getExerciseDatabaseFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseDatabase.getResourceBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseDatabase()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readExerciseBook(exerciseDatabase.getResourceBookFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseDatabase(Path filePath)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseDatabase.readResourceBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dRegimeBook methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getRegimeBookFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return regimeBookStorage.getResourceBookFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cRegime\u003e\u003e readRegimeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readRegimeBook(regimeBookStorage.getResourceBookFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cRegime\u003e\u003e readRegimeBook(Path filePath)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return regimeBookStorage.readResourceBook(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveRegimeBook(ReadOnlyResourceBook\u003cRegime\u003e regimeBook) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        saveRegimeBook(regimeBook, regimeBookStorage.getResourceBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveRegimeBook(ReadOnlyResourceBook\u003cRegime\u003e regimeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        regimeBookStorage.saveResourceBook(regimeBook, filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dScheduleBook methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getScheduleBookFilePath() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return scheduleBookStorage.getResourceBookFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cSchedule\u003e\u003e readScheduleBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readScheduleBook(getScheduleBookFilePath());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cSchedule\u003e\u003e readScheduleBook(Path filePath)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jietung"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return scheduleBookStorage.readResourceBook(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveScheduleBook(ReadOnlyResourceBook\u003cSchedule\u003e scheduleBook) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        saveScheduleBook(scheduleBook, getScheduleBookFilePath());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveScheduleBook(ReadOnlyResourceBook\u003cSchedule\u003e scheduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jietung"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        scheduleBookStorage.saveResourceBook(scheduleBook, filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getPropertyBookFilePath() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return propertyBookStorage.getPropertyBookFilePath();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cPropertyBook\u003e readPropertyBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readPropertyBook(propertyBookStorage.getPropertyBookFilePath());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cPropertyBook\u003e readPropertyBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return propertyBookStorage.readPropertyBook(filePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void savePropertyBook(PropertyBook propertyBook) throws IOException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        savePropertyBook(propertyBook, propertyBookStorage.getPropertyBookFilePath());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void savePropertyBook(PropertyBook propertyBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        propertyBookStorage.savePropertyBook(propertyBook, filePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 19,
      "jietung": 22,
      "-": 54,
      "weihaw08": 98,
      "kwekke": 9
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Represents a storage for {@link seedu.exercise.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 5,
      "-": 30,
      "weihaw08": 3
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/bookstorage/JsonExerciseBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.bookstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.serializablebook.JsonSerializableExerciseBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * A class to access ExerciseBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonExerciseBookStorage implements ResourceBookStorage\u003cExercise\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExerciseBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonExerciseBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getResourceBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readResourceBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readResourceBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readResourceBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Optional\u003cJsonSerializableExerciseBook\u003e jsonExerciseBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            filePath, JsonSerializableExerciseBook.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (!jsonExerciseBook.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.of(jsonExerciseBook.get().toModelType(Exercise.class));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveResourceBook(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        saveResourceBook(exerciseBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveResourceBook(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        requireNonNull(exerciseBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExerciseBook(exerciseBook), filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 7,
      "-": 44,
      "weihaw08": 22
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/bookstorage/JsonRegimeBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.bookstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.serializablebook.JsonSerializableRegimeBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": " * A class to access RegimeBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonRegimeBookStorage implements ResourceBookStorage\u003cRegime\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRegimeBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public JsonRegimeBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getResourceBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cRegime\u003e\u003e readResourceBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readResourceBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cRegime\u003e\u003e readResourceBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Optional\u003cJsonSerializableRegimeBook\u003e jsonRegimeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "                filePath, JsonSerializableRegimeBook.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (!jsonRegimeBook.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.of(jsonRegimeBook.get().toModelType(Regime.class));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveResourceBook(ReadOnlyResourceBook\u003cRegime\u003e regimeBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        saveResourceBook(regimeBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveResourceBook(ReadOnlyResourceBook\u003cRegime\u003e regimeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(regimeBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jietung"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jietung"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRegimeBook(regimeBook), filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 55,
      "weihaw08": 17
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/bookstorage/JsonScheduleBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.bookstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.serializablebook.JsonSerializableScheduleBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * A class to access ScheduleBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonScheduleBookStorage implements ResourceBookStorage\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonScheduleBookStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public JsonScheduleBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path getResourceBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cSchedule\u003e\u003e readResourceBook() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return readResourceBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Optional\u003cReadOnlyResourceBook\u003cSchedule\u003e\u003e readResourceBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Optional\u003cJsonSerializableScheduleBook\u003e jsonScheduleBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                filePath, JsonSerializableScheduleBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!jsonScheduleBook.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return Optional.of(jsonScheduleBook.get().toModelType(Schedule.class));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveResourceBook(ReadOnlyResourceBook\u003cSchedule\u003e scheduleBook) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        saveResourceBook(scheduleBook, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveResourceBook(ReadOnlyResourceBook\u003cSchedule\u003e scheduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        requireAllNonNull(scheduleBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableScheduleBook(scheduleBook), filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 59,
      "weihaw08": 14
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/bookstorage/ResourceBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.bookstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Resource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * API of a ResourceBookStorage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public interface ResourceBookStorage\u003cT extends Resource\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Retrieves the file path of the ResourceBook data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Path getResourceBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Reads the resource data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns {@code Optional.Empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws DataConversionException if the data in storage is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cT\u003e\u003e readResourceBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Works similarly to {@link ResourceBookStorage#readResourceBook()}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * However, this reads the data in the given {@code Path}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    Optional\u003cReadOnlyResourceBook\u003cT\u003e\u003e readResourceBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Saves the given {@code ReadOnlyResourceBook\u003cT\u003e} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param resourceBook cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void saveResourceBook(ReadOnlyResourceBook\u003cT\u003e resourceBook) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Works similarly to {@link ResourceBookStorage#saveResourceBook(ReadOnlyResourceBook)}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * However, this stores the data in the given {@code Path}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    void saveResourceBook(ReadOnlyResourceBook\u003cT\u003e resourceBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 49
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/resource/JsonAdaptedExercise.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.JsonAdaptedMuscle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonAdaptedExercise extends JsonAdaptedResource\u003cExercise\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String calories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final String unit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final List\u003cJsonAdaptedMuscle\u003e muscles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Map\u003cString, String\u003e customProperties \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code JsonAdaptedExercise} with the given exercise details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedExercise(@JsonProperty(\"name\") String name, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                               @JsonProperty(\"calories\") String calories, @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "                               @JsonProperty(\"unit\") String unit,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                               @JsonProperty(\"muscles\") List\u003cJsonAdaptedMuscle\u003e muscles,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                               @JsonProperty(\"customProperties\") Map\u003cString, String\u003e customProperties) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (muscles !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.muscles.addAll(muscles);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (customProperties !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.customProperties.putAll(customProperties);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts a given {@code Exercise} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonAdaptedExercise(Exercise source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        calories \u003d source.getCalories().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        quantity \u003d source.getQuantity().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": "        unit \u003d source.getUnit().unit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        muscles.addAll(source.getMuscles().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .map(JsonAdaptedMuscle::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        customProperties.putAll(source.getCustomProperties());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts this Jackson-friendly adapted exercise object into the model\u0027s {@code Exercise} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final List\u003cMuscle\u003e personMuscles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (JsonAdaptedMuscle muscle : muscles) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            personMuscles.add(muscle.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                Calories.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Calories.isValidCalories(calories)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Calories modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (unit \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jietung"
        },
        "content": "                Unit.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (!Unit.isValidUnit(unit)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new IllegalValueException(Unit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jietung"
        },
        "content": "        final Unit modelUnit \u003d new Unit(unit);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Set\u003cMuscle\u003e modelMuscles \u003d new HashSet\u003c\u003e(personMuscles);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Map\u003cString, String\u003e modelCustomProperties \u003d new HashMap\u003c\u003e(customProperties);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new Exercise(modelName, modelDate, modelCalories, modelQuantity, modelUnit, modelMuscles,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            modelCustomProperties);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 14,
      "weihaw08": 124
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/resource/JsonAdaptedRegime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.UniqueResourceList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Jackson-friendly version of {@link Regime}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonAdaptedRegime extends JsonAdaptedResource\u003cRegime\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Constructs a {@code JsonAdaptedRegime} with the given regime details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public JsonAdaptedRegime(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "                             @JsonProperty(\"exercises\") List\u003cJsonAdaptedExercise\u003e exercises) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "        if (exercises !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "            this.exercises.addAll(exercises);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts a given {@code Regime} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public JsonAdaptedRegime(Regime source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        name \u003d source.getRegimeName().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exercises.addAll(source.getRegimeExercises().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "            .map(JsonAdaptedExercise::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Converts this Jackson-friendly adapted regime object into the model\u0027s {@code Regime} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted regime."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public Regime toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final UniqueResourceList\u003cExercise\u003e modelExercises \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "        for (JsonAdaptedExercise exercise : exercises) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "            modelExercises.add(exercise.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return new Regime(modelName, modelExercises);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 48,
      "weihaw08": 10
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/resource/JsonAdaptedResource.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Resource;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Represents a Jackson-friendly version of {@code Resource}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public abstract class JsonAdaptedResource\u003cT extends Resource\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts the given {@code JsonAdaptedResource} into the model\u0027s {@code Resource} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there were any violations in the data constraints"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public abstract T toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 17
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/resource/JsonAdaptedSchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Jackson-friendly version of {@link Schedule}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonAdaptedSchedule extends JsonAdaptedResource\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private final JsonAdaptedRegime regime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public JsonAdaptedSchedule(@JsonProperty(\"regime\") JsonAdaptedRegime regime, @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.regime \u003d regime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public JsonAdaptedSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.date \u003d schedule.getDate().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.regime \u003d new JsonAdaptedRegime(schedule.getRegime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Converts this Jackson-friendly adapted schedule object into the model\u0027s {@code Schedule} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted schedule."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (regime \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                Regime.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        Regime modelRegime \u003d regime.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return new Schedule(modelRegime, modelDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 50,
      "weihaw08": 5
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/serializablebook/JsonSerializableExerciseBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.serializablebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedExercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * An Immutable ExerciseBook that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@JsonRootName(value \u003d \"exercisebook\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonSerializableExerciseBook extends SerializableResourceBook\u003cJsonAdaptedExercise, Exercise\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code JsonSerializableExerciseBook} with the given persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonSerializableExerciseBook(@JsonProperty(\"jsonResources\") List\u003cJsonAdaptedExercise\u003e exercises) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        super(exercises);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts a given {@code ReadOnlyResourceBook\u003cExercise\u003e} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExerciseBook}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonSerializableExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        super(source, JsonAdaptedExercise.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 36
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/serializablebook/JsonSerializableRegimeBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.serializablebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedRegime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * An Immutable RegimeBook that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@JsonRootName(value \u003d \"regimebook\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonSerializableRegimeBook extends SerializableResourceBook\u003cJsonAdaptedRegime, Regime\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Constructs a {@code JsonSerializableRegimeBook} with the given persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonSerializableRegimeBook(@JsonProperty(\"jsonResources\") List\u003cJsonAdaptedRegime\u003e regimes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        super(regimes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts a given {@code ReadOnlyResourceBook\u003cRegime\u003e} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRegimeBook}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonSerializableRegimeBook(ReadOnlyResourceBook\u003cRegime\u003e source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        super(source, JsonAdaptedRegime.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 36
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/serializablebook/JsonSerializableScheduleBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.serializablebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedSchedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * An Immutable ScheduleBook that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "@JsonRootName(value \u003d \"schedulebook\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonSerializableScheduleBook extends SerializableResourceBook\u003cJsonAdaptedSchedule, Schedule\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonSerializableScheduleBook(@JsonProperty(\"jsonResources\") List\u003cJsonAdaptedSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        super(schedules);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public JsonSerializableScheduleBook(ReadOnlyResourceBook\u003cSchedule\u003e source) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        super(source, JsonAdaptedSchedule.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 30
    }
  },
  {
    "path": "src/main/java/seedu/exercise/storage/serializablebook/SerializableResourceBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.storage.serializablebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Resource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedResource;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * An immutable ResourceBook that is serializable to JSON format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * In particular, this resource book can be extended to create an immutable ResourceBook that holds"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * any {@code JsonAdaptedResource} of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public abstract class SerializableResourceBook\u003cT extends JsonAdaptedResource\u003cU\u003e, U extends Resource\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESOURCE \u003d \"The list has duplicate exercises/regimes/schedules.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final List\u003cT\u003e jsonResources \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public SerializableResourceBook(List\u003cT\u003e jsonResources) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.jsonResources.addAll(jsonResources);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public SerializableResourceBook(ReadOnlyResourceBook\u003cU\u003e source, Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        jsonResources"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .addAll(source.getResourceList()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .map(U::toJsonType)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .map(clazz::cast)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Converts the Jackson-friendly {@code SerializableResourceBook} into the model\u0027s {@code ReadOnlyResourceBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * @throws IllegalValueException if there are any violations in the data constraints."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cU\u003e toModelType(Class\u003cU\u003e clazz) throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cU\u003e resourceBook \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (JsonAdaptedResource jsonResource : jsonResources) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            U resourceModel \u003d clazz.cast(jsonResource.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (resourceBook.hasResource(resourceModel)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RESOURCE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            resourceBook.addResource(resourceModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return resourceBook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setList(List\u003cT\u003e data) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        jsonResources.addAll(data);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 57
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jietung"
        },
        "content": "         * @see seedu.exercise.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/ExerciseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ExerciseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public final Exercise exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private Label unit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseCard(Exercise exercise, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        name.setText(exercise.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        date.setText(exercise.getDate().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        calories.setText(exercise.getCalories().value + \" kcal\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        quantity.setText(exercise.getQuantity().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "        unit.setText(exercise.getUnit().unit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exercise.getMuscles().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .sorted(Comparator.comparing(muscle -\u003e muscle.muscleName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .forEach(muscle -\u003e tags.getChildren().add(new Label(muscle.muscleName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (!(other instanceof ExerciseCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ExerciseCard card \u003d (ExerciseCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jietung"
        },
        "content": "                \u0026\u0026 exercise.equals(card.exercise);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 7,
      "-": 54,
      "weihaw08": 16
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/ExerciseListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Panel containing the list of exercises."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExerciseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ListView\u003cExercise\u003e exerciseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseListView.setItems(exerciseList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Exercise} using a {@code ExerciseCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    class ExerciseListViewCell extends ListCell\u003cExercise\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        protected void updateItem(Exercise exercise, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            super.updateItem(exercise, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (empty || exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                setGraphic(new ExerciseCard(exercise, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "weihaw08": 44
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103T-T09-2/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 4,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/LeftRightPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Controller for panel which has two text area stacked horizontally."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class LeftRightPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final String FXML \u003d \"LeftRightPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ExerciseListPanel leftPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ExerciseListPanel rightPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private StackPane leftPanelPlaceholder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private StackPane rightPanelPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public LeftRightPanel() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void setLeftPanel(ObservableList\u003cExercise\u003e leftExercise) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        leftPanel \u003d new ExerciseListPanel(leftExercise);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        leftPanelPlaceholder.getChildren().add(leftPanel.getRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void setRightPanel(ObservableList\u003cExercise\u003e rightExercise) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        rightPanel \u003d new ExerciseListPanel(rightExercise);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        rightPanelPlaceholder.getChildren().add(rightPanel.getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Clears text for both left and right text areas"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void clearAll() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        leftPanel \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        rightPanel \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 46
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ScheduleListPanel scheduleListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private RegimeListPanel regimeListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ResolveWindow resolveWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private ExerciseListPanel resultPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private SuggestionListPanel suggestionPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private MenuItem resolveWindowMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private StackPane scheduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private StackPane regimeListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private StackPane suggestionPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private StackPane resultPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        primaryStage.setTitle(\"ExerHealth\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resolveWindow \u003d new ResolveWindow(logic, resultDisplay);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        scheduleListPanel \u003d new ScheduleListPanel(logic.getFilteredScheduleList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        scheduleListPanelPlaceholder.getChildren().add(scheduleListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resultPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resultPanelPlaceholder.getChildren().add(resultPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jietung"
        },
        "content": "        regimeListPanel \u003d new RegimeListPanel(logic.getFilteredRegimeList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jietung"
        },
        "content": "        regimeListPanelPlaceholder.getChildren().add(regimeListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        suggestionPanel \u003d new SuggestionListPanel(logic.getSuggestedExerciseList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        suggestionPanelPlaceholder.getChildren().add(suggestionPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Opens the resolve window and blocks all events until closed"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void handleResolve() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resolveWindow.setLeftRightPanel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (resolveWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            resolveWindow.focus();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            resolveWindow.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resolveWindow.hideAndClearPanels();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ScheduleListPanel getScheduleListPanel() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return scheduleListPanel;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public RegimeListPanel getRegimeListPanel() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return regimeListPanel;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * @see seedu.exercise.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            shouldShowWindowsBasedOnCommandResult(commandResult);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            shouldExitAppBasedOnCommandResult(commandResult);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Checks if a secondary window should be shown based on the command results."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Method will show the windows if it is to be shown."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void shouldShowWindowsBasedOnCommandResult(CommandResult commandResult) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            handleHelp();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (commandResult.isShowResolve()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            handleResolve();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void shouldExitAppBasedOnCommandResult(CommandResult commandResult) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 50,
      "jietung": 14,
      "-": 172,
      "kwekke": 12,
      "weihaw08": 5
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/RegimeCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": " *  An UI component that displays informatino of a {@code Regime}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class RegimeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String FXML \u003d \"RegimeCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final Regime regime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private Label exercises;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public RegimeCard(Regime regime, int displayedIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.regime \u003d regime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "        name.setText(regime.getRegimeName().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "        exercises.setText(regime.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 32,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/RegimeListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Panel containing list of regimes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class RegimeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String FXML \u003d \"RegimeListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RegimeListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private ListView\u003cRegime\u003e regimeListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public RegimeListPanel(ObservableList\u003cRegime\u003e regimeList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "        regimeListView.setItems(regimeList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "        regimeListView.setCellFactory(listView -\u003e new RegimeListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Regime} using a {@code RegimeCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "    class RegimeListViewCell extends ListCell\u003cRegime\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "        protected void updateItem(Regime regime, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "            super.updateItem(regime, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "            if (empty || regime \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "                setGraphic(new RegimeCard(regime, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 45,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/ResolveWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Controller for resolving schedule conflicts."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * This window acts as a visual feedback"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * for the conflicting schedules. Provides a left right panel for display of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * the schedules and a command box. Window will block all events until it is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * closed or resolved."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class ResolveWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final String FXML \u003d \"ResolveWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private LeftRightPanel leftRightPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ResultDisplay mainWindowDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Stage parent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private StackPane commandBoxPlaceHolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private StackPane resultDisplayPlaceHolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private StackPane leftRightPanelPlaceHolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ResolveWindow(Stage root, Logic logic, ResultDisplay mainWindowDisplay) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        parent \u003d getRoot();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.mainWindowDisplay \u003d mainWindowDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        blockEvents(root);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        setWindowSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        centerWindow();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ResolveWindow(Logic logic, ResultDisplay mainWindowDisplay) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this(new Stage(), logic, mainWindowDisplay);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Shows the resolve window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        parent.show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        parent.centerOnScreen();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Hides the window and clears the text in LeftRightPanel"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @see LeftRightPanel#clearAll()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void hideAndClearPanels() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        leftRightPanel.clearAll();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resultDisplay.setFeedbackToUser(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        parent.hide();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public void setLeftRightPanel() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        leftRightPanel.setLeftPanel(logic.getConflict().getScheduledUnmodifiableExerciseList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        leftRightPanel.setRightPanel(logic.getConflict().getConflictedUnmodifiableExerciseList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void setWindowSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        parent.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        parent.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void centerWindow() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        parent.centerOnScreen();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        fillLeftRightPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        fillCommandBox();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        fillResultDisplay();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void fillResultDisplay() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        resultDisplayPlaceHolder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void fillLeftRightPanel() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        leftRightPanel \u003d new LeftRightPanel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        leftRightPanelPlaceHolder.getChildren().add(leftRightPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void fillCommandBox() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::execute);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        commandBoxPlaceHolder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private void blockEvents(Stage root) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        root.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Executor for resolve window\u0027s command box."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *     This executor will only allow resolve commands to be executed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @param commandText user input"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @return Result from executing a valid command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            if (!commandResult.isShowResolve()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                mainWindowDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                this.hideAndClearPanels();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 157
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/ScheduleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * An UI component that displays information of a {@code Schedule}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class ScheduleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final String FXML \u003d \"ScheduleListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final String DATE_PREAMBLE \u003d \"Scheduled on: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public final Schedule schedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ScheduleCard(Schedule schedule, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        name.setText(schedule.getRegime().getRegimeName().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        date.setText(DATE_PREAMBLE + schedule.getDate().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        if (!(other instanceof ScheduleCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        ScheduleCard card \u003d (ScheduleCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            \u0026\u0026 schedule.equals(card.schedule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 60,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/ScheduleListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " * Panel containing the list of schedules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "public class ScheduleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private static final String FXML \u003d \"ScheduleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScheduleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    private ListView\u003cSchedule\u003e scheduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    public ScheduleListPanel(ObservableList\u003cSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        scheduleListView.setItems(scheduleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        scheduleListView.setCellFactory(listView -\u003e new ScheduleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Schedule} using a {@code ScheduleCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    class ScheduleListViewCell extends ListCell\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        protected void updateItem(Schedule schedule, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            super.updateItem(schedule, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            if (empty || schedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                setGraphic(new ScheduleCard(schedule, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 45,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/SuggestionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": " * Panel containing the list of suggested exercises."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "public class SuggestionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private static final String FXML \u003d \"SuggestionListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SuggestionListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private ListView\u003cExercise\u003e suggestionListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public SuggestionListPanel(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        suggestionListView.setItems(exerciseList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        suggestionListView.setCellFactory(listView -\u003e new SuggestionListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Exercise} using a {@code ExerciseCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    class SuggestionListViewCell extends ListCell\u003cExercise\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        protected void updateItem(Exercise exercise, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            super.updateItem(exercise, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            if (empty || exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                setGraphic(new ExerciseCard(exercise, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 43,
      "weihaw08": 1
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/ExerHealth.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/exercise/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".left-right-panel \u003e TextArea {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 70%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-border-radius: 5;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-border-width: 1pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".left-right-panel \u003e TextArea:focused {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 70%), derive(#3e7b91, 40%), derive(#3e7b91, 30%), derive(#3e7b91, 10%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-border-width: 1pt;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-border-insets: 2, 3, 4, 5;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ".left-right-panel * {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-font-family: \"Segoe UI Semilight\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 19,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u003cLabel fx:id\u003d\"calories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calories\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u003cLabel fx:id\u003d\"unit\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$unit\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 33,
      "weihaw08": 3
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    \u003cHBox spacing\u003d\"20\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        \u003cLabel styleClass\u003d\"cell_list_label\" text\u003d\"Command results\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    \u003cListView fx:id\u003d\"exerciseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "weihaw08": 8,
      "kwekke": 5
    }
  },
  {
    "path": "src/main/resources/view/LeftRightPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "      styleClass\u003d\"left-right-panel\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    \u003cStackPane fx:id\u003d\"leftPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    \u003cStackPane fx:id\u003d\"rightPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 10
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ExerHealth App\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "        \u003cImage url\u003d\"@/images/ExerHealth.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"resolveWindowMenuItem\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                                  onAction\u003d\"#handleResolve\" text\u003d\"Resolve\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u003cBorderPane prefHeight\u003d\"58.0\" prefWidth\u003d\"410.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                    \u003cleft\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"regimeListPanelPlaceholder\" BorderPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                    \u003c/left\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                    \u003ccenter\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                        \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                            \u003ctop\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultPanelPlaceholder\" BorderPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                            \u003c/top\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                            \u003cbottom\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"suggestionPanelPlaceholder\" BorderPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                            \u003c/bottom\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                    \u003c/center\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                    \u003cright\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"scheduleListPanelPlaceholder\" BorderPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                    \u003c/right\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                    \u003cbottom\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" BorderPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                    \u003c/bottom\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 8,
      "jietung": 2,
      "-": 40,
      "weihaw08": 17,
      "kwekke": 9
    }
  },
  {
    "path": "src/main/resources/view/RegimeCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "            \u003cLabel fx:id\u003d\"exercises\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$exercise\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jietung": 32
    }
  },
  {
    "path": "src/main/resources/view/RegimeListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    \u003cHBox spacing\u003d\"20\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        \u003cLabel styleClass\u003d\"cell_list_label\" text\u003d\"Regimes\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "    \u003cListView fx:id\u003d\"regimeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jietung": 8,
      "kwekke": 5
    }
  },
  {
    "path": "src/main/resources/view/ResolveWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\" title \u003d \"Resolve\" onCloseRequest\u003d\"#hideAndClearPanels\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        \u003cImage url\u003d\"@/images/ExerHealth.png\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u003cURL value \u003d \"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u003cURL value \u003d \"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceHolder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                        \u003cInsets bottom \u003d \"5\" left \u003d \"10\" right \u003d \"10\" top \u003d \"5\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceHolder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u003cStackPane fx:id\u003d\"leftRightPanelPlaceHolder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                        \u003cInsets bottom \u003d \"5\" left \u003d \"10\" right \u003d \"10\" top \u003d \"5\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 44
    }
  },
  {
    "path": "src/main/resources/view/ScheduleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/ScheduleListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "  \u003cHBox spacing\u003d\"20\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "    \u003cLabel styleClass\u003d\"cell_list_label\" text\u003d\"Command results\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "  \u003cListView fx:id\u003d\"scheduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 13
    }
  },
  {
    "path": "src/main/resources/view/SuggestionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003cHBox spacing\u003d\"20\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    \u003cLabel styleClass\u003d\"cell_list_label\" text\u003d\"Suggestions\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003cListView fx:id\u003d\"suggestionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kwekke": 13
    }
  },
  {
    "path": "src/test/java/seedu/exercise/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "        final Index fifthExerciseIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertTrue(fifthExerciseIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertTrue(fifthExerciseIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertTrue(fifthExerciseIndex.equals(fifthExerciseIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertFalse(fifthExerciseIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertFalse(fifthExerciseIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertFalse(fifthExerciseIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/ExerHealth.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/exercise/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.CALORIES_DESC_AEROBICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.CATEGORY_DESC_EXERCISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DATE_DESC_AEROBICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.NAME_DESC_AEROBICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.QUANTITY_DESC_AEROBICS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.UNIT_DESC_AEROBICS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.AEROBICS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.State;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.JsonPropertyBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.StorageBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonExerciseBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonRegimeBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonScheduleBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonExerciseBookStorage jsonExerciseBookStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new JsonExerciseBookStorage(temporaryFolder.resolve(\"exerciseBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonRegimeBookStorage jsonRegimeBookStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new JsonRegimeBookStorage(temporaryFolder.resolve(\"regimeBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonExerciseBookStorage allJsonExerciseDatabase \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            new JsonExerciseBookStorage(temporaryFolder.resolve(\"exercisedatabase.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        new JsonRegimeBookStorage(temporaryFolder.resolve(\"regimeBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonScheduleBookStorage jsonScheduleBookStorage \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            new JsonScheduleBookStorage(temporaryFolder.resolve(\"scheduleBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonPropertyBookStorage propertyBookStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonPropertyBookStorage(temporaryFolder.resolve(\"propertyBook.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        StorageBook storage \u003d new StorageBook(jsonExerciseBookStorage, allJsonExerciseDatabase,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            jsonRegimeBookStorage, jsonScheduleBookStorage, userPrefsStorage, propertyBookStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        MainApp.setState(State.NORMAL);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String deleteCommand \u003d \"delete t/exercise i/9\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // Setup LogicManager with JsonExerciseBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonExerciseBookStorage jsonExerciseBookStorage \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new JsonExerciseBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionExerciseBook.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonRegimeBookStorage jsonRegimeBookStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new JsonRegimeBookStorage(temporaryFolder.resolve(\"ioExceptionRegimeBook.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonScheduleBookStorage jsonScheduleBookStorage \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            new JsonScheduleBookStorage(temporaryFolder.resolve(\"ioExceptionScheduleBook.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonExerciseBookStorage allJsonExerciseBookStorage \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            new JsonExerciseBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAllExerciseBook.json\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonPropertyBookStorage propertyBookStorage \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonPropertyBookStorage(temporaryFolder.resolve(\"ioExceptionPropertyBook.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        StorageBook storage \u003d new StorageBook(jsonExerciseBookStorage, allJsonExerciseBookStorage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            jsonRegimeBookStorage, jsonScheduleBookStorage, userPrefsStorage, propertyBookStorage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String addCommand \u003d AddExerciseCommand.COMMAND_WORD + CATEGORY_DESC_EXERCISE + NAME_DESC_AEROBICS"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + DATE_DESC_AEROBICS + CALORIES_DESC_AEROBICS + QUANTITY_DESC_AEROBICS + UNIT_DESC_AEROBICS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(AEROBICS).withMuscles().build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.addExercise(expectedExercise);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void getFilteredExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExerciseBookData(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static class JsonExerciseBookIoExceptionThrowingStub extends JsonExerciseBookStorage {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        private JsonExerciseBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void saveResourceBook(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 7,
      "jietung": 26,
      "-": 119,
      "weihaw08": 42,
      "kwekke": 2
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/AddExerciseCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddExerciseCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class AddExerciseCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void execute_newExercise_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExerciseBookData(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getDefaultPropertyBook());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.addExercise(validExercise);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertCommandSuccess(new AddExerciseCommand(validExercise), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "            String.format(AddExerciseCommand.MESSAGE_SUCCESS, validExercise), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void execute_duplicateExercise_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exerciseInList \u003d model.getExerciseBookData().getResourceList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertCommandFailure(new AddExerciseCommand(exerciseInList), model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "            AddExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 12,
      "-": 24,
      "weihaw08": 15
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/AddExerciseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.conflict.Conflict;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class AddExerciseCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void constructor_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExerciseCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void execute_exerciseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ModelStubAcceptingExerciseAdded modelStub \u003d new ModelStubAcceptingExerciseAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise validPerson \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "        CommandResult commandResult \u003d new AddExerciseCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(String.format(AddExerciseCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.exercisesAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void execute_duplicateExercise_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "        AddExerciseCommand addExerciseCommand \u003d new AddExerciseCommand(validExercise);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExercise(validExercise);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "            AddExerciseCommand.MESSAGE_DUPLICATE_EXERCISE, () -\u003e addExerciseCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise aerobics \u003d new ExerciseBuilder().withName(\"Aerobics\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise basketball \u003d new ExerciseBuilder().withName(\"Basketball\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": "        AddExerciseCommand addAliceCommand \u003d new AddExerciseCommand(aerobics);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jietung"
        },
        "content": "        AddExerciseCommand addBobCommand \u003d new AddExerciseCommand(basketball);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jietung"
        },
        "content": "        AddExerciseCommand addAliceCommandCopy \u003d new AddExerciseCommand(aerobics);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different exercises -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dexercise\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public Path getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setExerciseBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e anotherBook) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public ReadOnlyResourceBook\u003cExercise\u003e getExerciseBookData() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void deleteExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jietung"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dregime\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public Path getRegimeBookFilePath() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public void setRegimeBookFilePath(Path exerciseBookFilePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public void addRegime(Regime regime) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void setRegimeBook(ReadOnlyResourceBook\u003cRegime\u003e anotherBook) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public ReadOnlyResourceBook\u003cRegime\u003e getAllRegimeData() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public boolean hasRegime(Regime regime) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public void deleteRegime(Regime regime) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public void setRegime(Regime target, Regime editedRegime) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public int getRegimeIndex(Regime regime) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method shuold not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public ObservableList\u003cRegime\u003e getFilteredRegimeList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public PropertyBook getPropertyBook() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public boolean isPrefixUsed(Prefix prefix) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public boolean isFullNameUsed(String fullName) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void addCustomProperty(CustomProperty customProperty) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jietung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jietung"
        },
        "content": "        public void updateFilteredRegimeList(Predicate\u003cRegime\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jietung"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jietung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public ReadOnlyResourceBook\u003cSchedule\u003e getAllScheduleData() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        public void completeSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        public void resolveConflict(Name regimeName, List\u003cIndex\u003e indexFromSchedule, List\u003cIndex\u003e indexFromConflict) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        public Conflict getConflict() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        public void setConflict(Conflict conflict) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsuggest\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public ReadOnlyResourceBook\u003cExercise\u003e getDatabaseBook() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        public void updateSuggestedExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        public ObservableList\u003cExercise\u003e getSuggestedExerciseList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * A Model stub that contains a single exercise."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private class ModelStubWithExercise extends ModelStub {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        private final Exercise exercise;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ModelStubWithExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return this.exercise.isSameResource(exercise);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * A Model stub that always accept the exercise being added."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private class ModelStubAcceptingExerciseAdded extends ModelStub {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final ArrayList\u003cExercise\u003e exercisesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return exercisesAdded.stream().anyMatch(exercise::isSameResource);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            exercisesAdded.add(exercise);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public ReadOnlyResourceBook\u003cExercise\u003e getExerciseBookData() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 43,
      "jietung": 68,
      "-": 134,
      "weihaw08": 76,
      "kwekke": 16
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getDefaultPropertyBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getDefaultPropertyBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.setExerciseBook(new ReadOnlyResourceBook\u003c\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 5,
      "-": 22,
      "weihaw08": 10
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 5,
      "jietung": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CUSTOM_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_FULL_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_PARAMETER_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String VALID_CATEGORY_EXERCISE \u003d \"exercise\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String VALID_NAME_AEROBICS \u003d \"Aerobics\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String VALID_NAME_BASKETBALL \u003d \"Basketball\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String VALID_DATE_AEROBICS \u003d \"26/09/2019\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String VALID_DATE_BASKETBALL \u003d \"27/09/2019\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String VALID_CALORIES_AEROBICS \u003d \"333\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String VALID_CALORIES_BASKETBALL \u003d \"444\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String VALID_QUANTITY_AEROBICS \u003d \"30\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String VALID_QUANTITY_BASKETBALL \u003d \"3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String VALID_UNIT_AEROBICS \u003d \"counts\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String VALID_UNIT_BASKETBALL \u003d \"hour\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String VALID_MUSCLE_AEROBICS \u003d \"Back\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String VALID_MUSCLE_BASKETBALL \u003d \"Arms\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String CATEGORY_DESC_EXERCISE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_EXERCISE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String NAME_DESC_AEROBICS \u003d \" \" + PREFIX_NAME + VALID_NAME_AEROBICS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String NAME_DESC_BASKETBALL \u003d \" \" + PREFIX_NAME + VALID_NAME_BASKETBALL;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String DATE_DESC_AEROBICS \u003d \" \" + PREFIX_DATE + VALID_DATE_AEROBICS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String DATE_DESC_BASKETBALL \u003d \" \" + PREFIX_DATE + VALID_DATE_BASKETBALL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String CALORIES_DESC_AEROBICS \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_AEROBICS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String CALORIES_DESC_BASKETBALL \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_BASKETBALL;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String QUANTITY_DESC_AEROBICS \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_AEROBICS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String QUANTITY_DESC_BASKETBALL \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BASKETBALL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String UNIT_DESC_AEROBICS \u003d \" \" + PREFIX_UNIT + VALID_UNIT_AEROBICS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String UNIT_DESC_BASKETBALL \u003d \" \" + PREFIX_UNIT + VALID_UNIT_BASKETBALL;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MUSCLE_DESC_AEROBICS \u003d \" \" + PREFIX_MUSCLE + VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String MUSCLE_DESC_BASKETBALL \u003d \" \" + PREFIX_MUSCLE + VALID_MUSCLE_BASKETBALL;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Dance\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"31a/10/2019\"; // \u0027a\u0027 not allowed in date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String INVALID_CALORIES_DESC \u003d \" \" + PREFIX_CALORIES + \"33a\"; // \u0027a\u0027 not allowed in calories"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + \"22a\"; // \u0027a\u0027 not allowed in quantity"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public static final String INVALID_UNIT_DESC \u003d \" \" + PREFIX_UNIT; // empty string not allowed in unit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final String INVALID_MUSCLE_DESC \u003d \" \" + PREFIX_MUSCLE + \"Chest*\"; // \u0027*\u0027 not allowed in muscle"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final EditCommand.EditExerciseDescriptor DESC_AEROBICS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final EditCommand.EditExerciseDescriptor DESC_BASKETBALL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_PREFIX_NAME_RATING \u003d \"a\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_PREFIX_NAME_REMARK \u003d \"b\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_PREFIX_NAME_ENDDATE \u003d \"c\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_FULL_NAME_RATING \u003d \"Rating\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_FULL_NAME_REMARK \u003d \"Remark\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_FULL_NAME_ENDDATE \u003d \"End date\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_PARAMETER_TYPE_RATING \u003d \"Number\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_PARAMETER_TYPE_REMARK \u003d \"Text\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String VALID_PARAMETER_TYPE_ENDDATE \u003d \"Date\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String PREFIX_NAME_DESC_RATING \u003d \" \" + PREFIX_CUSTOM_NAME + VALID_PREFIX_NAME_RATING;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String PREFIX_NAME_DESC_REMARK \u003d \" \" + PREFIX_CUSTOM_NAME + VALID_PREFIX_NAME_REMARK;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String PREFIX_NAME_DESC_ENDDATE \u003d \" \" + PREFIX_CUSTOM_NAME + VALID_PREFIX_NAME_ENDDATE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String FULL_NAME_DESC_RATING \u003d \" \" + PREFIX_FULL_NAME + VALID_FULL_NAME_RATING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String FULL_NAME_DESC_REMARK \u003d \" \" + PREFIX_FULL_NAME + VALID_FULL_NAME_REMARK;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String FULL_NAME_DESC_ENDDATE \u003d \" \" + PREFIX_FULL_NAME + VALID_FULL_NAME_ENDDATE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String PARAMETER_TYPE_DESC_RATING \u003d \" \" + PREFIX_PARAMETER_TYPE + VALID_PARAMETER_TYPE_RATING;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String PARAMETER_TYPE_DESC_REMARK \u003d \" \" + PREFIX_PARAMETER_TYPE + VALID_PARAMETER_TYPE_REMARK;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String PARAMETER_TYPE_DESC_ENDDATE \u003d \" \" + PREFIX_PARAMETER_TYPE + VALID_PARAMETER_TYPE_ENDDATE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String INVALID_PREFIX_NAME_DESC \u003d \" \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            + PREFIX_CUSTOM_NAME + \"r r\"; // whitespace not allowed in short name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String INVALID_FULL_NAME_DESC \u003d \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            + PREFIX_FULL_NAME + \"R3mark\"; //\u00273\u0027 not allowed in full name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final String INVALID_PARAMETER_TYPE_DESC \u003d \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            + PREFIX_PARAMETER_TYPE + \"integer\"; //integer not allowed in parameter type"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        DESC_AEROBICS \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_AEROBICS)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withDate(VALID_DATE_AEROBICS).withCalories(VALID_CALORIES_AEROBICS)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withQuantity(VALID_QUANTITY_AEROBICS).withMuscles(VALID_MUSCLE_BASKETBALL).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        DESC_BASKETBALL \u003d new EditExerciseDescriptorBuilder().withName(VALID_NAME_BASKETBALL)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withDate(VALID_DATE_BASKETBALL).withCalories(VALID_CALORIES_BASKETBALL)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withQuantity(VALID_QUANTITY_BASKETBALL)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withMuscles(VALID_MUSCLE_AEROBICS, VALID_MUSCLE_BASKETBALL).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * - the exercise book, filtered exercise list and selected exercise in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e expectedExerciseBook \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(actualModel.getExerciseBookData());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cExercise\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExerciseList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertEquals(expectedExerciseBook, actualModel.getExerciseBookData());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExerciseList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the exercise at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * {@code model}\u0027s exercise book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static void showExerciseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exercise \u003d model.getFilteredExerciseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final String[] splitName \u003d exercise.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.updateFilteredExerciseList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(1, model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 23,
      "-": 65,
      "kwekke": 31,
      "weihaw08": 50
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/CustomCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_FULL_NAME_RATING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_FULL_NAME_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PARAMETER_TYPE_RATING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PARAMETER_TYPE_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PREFIX_NAME_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PREFIX_NAME_REMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CustomCommand.MESSAGE_DUPLICATE_FULL_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CustomCommand.MESSAGE_DUPLICATE_PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.testutil.TypicalCustomProperties.RATING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.testutil.TypicalCustomProperties.REMARK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.testutil.CustomPropertyBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "class CustomCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void execute_customCommandCreated_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomProperty customPropertyToBeCreated \u003d RATING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomCommand customCommand \u003d new CustomCommand(customPropertyToBeCreated);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        String expectedMessage \u003d String.format(CustomCommand.MESSAGE_SUCCESS, customPropertyToBeCreated);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        expectedModel.getPropertyBook().addCustomProperty(customPropertyToBeCreated);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertCommandSuccess(customCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void execute_duplicateShortNameCustomProperty_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomProperty rating \u003d new CustomPropertyBuilder().withPrefix(VALID_PREFIX_NAME_RATING)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                .withFullName(VALID_FULL_NAME_RATING).withParameterType(VALID_PARAMETER_TYPE_RATING).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomProperty duplicateShortName \u003d new CustomPropertyBuilder().withPrefix(VALID_PREFIX_NAME_RATING)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                .withFullName(VALID_FULL_NAME_REMARK).withParameterType(VALID_PARAMETER_TYPE_REMARK).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        Model model1 \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        model1.getPropertyBook().addCustomProperty(rating);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomCommand customCommand \u003d new CustomCommand(duplicateShortName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                MESSAGE_DUPLICATE_PREFIX_NAME, () -\u003e customCommand.execute(model1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void execute_duplicateFullNameCustomProperty_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomProperty rating \u003d new CustomPropertyBuilder().withPrefix(VALID_PREFIX_NAME_RATING)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                .withFullName(VALID_FULL_NAME_RATING).withParameterType(VALID_PARAMETER_TYPE_RATING).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomProperty duplicateFullName \u003d new CustomPropertyBuilder().withPrefix(VALID_PREFIX_NAME_REMARK)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                .withFullName(VALID_FULL_NAME_RATING).withParameterType(VALID_PARAMETER_TYPE_REMARK).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        Model model1 \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        model1.getPropertyBook().addCustomProperty(rating);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomCommand customCommand \u003d new CustomCommand(duplicateFullName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                MESSAGE_DUPLICATE_FULL_NAME, () -\u003e customCommand.execute(model1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomCommand ratingCustomPropertyCommand \u003d new CustomCommand(RATING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomCommand remarkCustomPropertyCommand \u003d new CustomCommand(REMARK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertTrue(ratingCustomPropertyCommand.equals(ratingCustomPropertyCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomCommand ratingCustomPropertyCommandCopy \u003d new CustomCommand(RATING);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertTrue(ratingCustomPropertyCommand.equals(ratingCustomPropertyCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(ratingCustomPropertyCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(ratingCustomPropertyCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // different exercises -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(ratingCustomPropertyCommand.equals(remarkCustomPropertyCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 99
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/DeleteExerciseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": " * {@code DeleteExerciseCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class DeleteExerciseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExerciseCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getExerciseBookData(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getDefaultPropertyBook());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertCommandSuccess(deleteExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jietung"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertCommandFailure(deleteExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jietung"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExerciseCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExerciseBookData(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        showNoExercise(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertCommandSuccess(deleteExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of exercise book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExerciseBookData().getResourceList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertCommandFailure(deleteExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jietung"
        },
        "content": "        DeleteExerciseCommand deleteFirstCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jietung"
        },
        "content": "        DeleteExerciseCommand deleteSecondCommand \u003d new DeleteExerciseCommand(INDEX_SECOND_EXERCISE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jietung"
        },
        "content": "        DeleteExerciseCommand deleteFirstCommandCopy \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private void showNoExercise(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model.updateFilteredExerciseList(p -\u003e false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(model.getFilteredExerciseList().isEmpty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "jietung": 27,
      "-": 63,
      "weihaw08": 25
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DESC_AEROBICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DESC_BASKETBALL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_DATE_BASKETBALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_NAME_BASKETBALL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(editedExercise).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ReadOnlyResourceBook\u003c\u003e(model.getExerciseBookData()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index indexLastExercise \u003d Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise lastExercise \u003d model.getFilteredExerciseList().get(indexLastExercise.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ExerciseBuilder exerciseInList \u003d new ExerciseBuilder(lastExercise);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedExercise \u003d exerciseInList.withName(VALID_NAME_BASKETBALL).withDate(VALID_DATE_BASKETBALL)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder().withName(VALID_NAME_BASKETBALL)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .withDate(VALID_DATE_BASKETBALL).withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastExercise, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ReadOnlyResourceBook\u003c\u003e(model.getExerciseBookData()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.setExercise(lastExercise, editedExercise);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE, new EditCommand.EditExerciseDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ReadOnlyResourceBook\u003c\u003e(model.getExerciseBookData()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exerciseInFilteredList \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedExercise \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ExerciseBuilder(exerciseInFilteredList).withName(VALID_NAME_BASKETBALL).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder().withName(VALID_NAME_BASKETBALL).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ReadOnlyResourceBook\u003c\u003e(model.getExerciseBookData()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void execute_duplicateExerciseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise firstExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(firstExercise).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void execute_duplicateExerciseFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // edit exercise in filtered list into a duplicate in exercise book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exerciseInList \u003d model.getExerciseBookData().getResourceList()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jietung"
        },
        "content": "            .get(INDEX_SECOND_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder(exerciseInList).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void execute_invalidExerciseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder().withName(VALID_NAME_BASKETBALL).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * but smaller than size of exercise book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void execute_invalidExerciseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of exercise book list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExerciseBookData().getResourceList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder().withName(VALID_NAME_BASKETBALL).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EXERCISE, DESC_AEROBICS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditExerciseDescriptor copyDescriptor \u003d new EditExerciseDescriptor(DESC_AEROBICS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EXERCISE, copyDescriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EXERCISE, DESC_AEROBICS)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EXERCISE, DESC_BASKETBALL)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 19,
      "-": 92,
      "weihaw08": 76
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/EditExerciseDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DESC_AEROBICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DESC_BASKETBALL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_CALORIES_BASKETBALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_DATE_BASKETBALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_NAME_BASKETBALL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_BASKETBALL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class EditExerciseDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditCommand.EditExerciseDescriptor(DESC_AEROBICS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(DESC_AEROBICS.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(DESC_AEROBICS.equals(DESC_AEROBICS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(DESC_AEROBICS.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(DESC_AEROBICS.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(DESC_AEROBICS.equals(DESC_BASKETBALL));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor editedAerobics \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder(DESC_AEROBICS).withName(VALID_NAME_BASKETBALL).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(DESC_AEROBICS.equals(editedAerobics));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different calories -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedAerobics \u003d new EditExerciseDescriptorBuilder(DESC_AEROBICS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withCalories(VALID_CALORIES_BASKETBALL).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(DESC_AEROBICS.equals(editedAerobics));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedAerobics \u003d new EditExerciseDescriptorBuilder(DESC_AEROBICS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withDate(VALID_DATE_BASKETBALL).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(DESC_AEROBICS.equals(editedAerobics));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedAerobics \u003d new EditExerciseDescriptorBuilder(DESC_AEROBICS)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withQuantity(VALID_QUANTITY_BASKETBALL).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(DESC_AEROBICS.equals(editedAerobics));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different muscles -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedAerobics \u003d new EditExerciseDescriptorBuilder(DESC_AEROBICS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(DESC_AEROBICS.equals(editedAerobics));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 8,
      "weihaw08": 55
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "jietung": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_EXERCISES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.DANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.SKIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.SPRINT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void execute_zeroKeywords_noExerciseFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXERCISES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExerciseList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void execute_multipleKeywords_multipleExercisesFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXERCISES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Dancing Skipping Sprinting\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(Arrays.asList(DANCE, SKIP, SPRINT), model.getFilteredExerciseList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 9,
      "-": 60,
      "weihaw08": 18
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t-cheepeng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t-cheepeng": 1,
      "jietung": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getDefaultPropertyBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getExerciseBookData(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getDefaultPropertyBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 7,
      "-": 28,
      "weihaw08": 10
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/commands/SuggestBasicCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "public class SuggestBasicCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        model \u003d new ModelManager(getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getTypicalExerciseBook(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            getDefaultPropertyBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getExerciseBookData(), new ReadOnlyResourceBook\u003c\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            model.getDatabaseBook(), new ReadOnlyResourceBook\u003c\u003e(), new UserPrefs(), getDefaultPropertyBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void execute_suggestBasic_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertCommandSuccess(new SuggestBasicCommand(), model, SuggestBasicCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 26,
      "weihaw08": 8
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/AddExerciseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.CALORIES_DESC_AEROBICS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.CALORIES_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.CATEGORY_DESC_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DATE_DESC_AEROBICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DATE_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_MUSCLE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_UNIT_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.MUSCLE_DESC_AEROBICS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.MUSCLE_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.NAME_DESC_AEROBICS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.NAME_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.QUANTITY_DESC_AEROBICS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.QUANTITY_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.UNIT_DESC_AEROBICS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.UNIT_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_CALORIES_BASKETBALL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_DATE_BASKETBALL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_BASKETBALL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_NAME_BASKETBALL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_BASKETBALL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_UNIT_BASKETBALL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.AEROBICS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.BASKETBALL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class AddExerciseCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(BASKETBALL).withMuscles(VALID_MUSCLE_BASKETBALL).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + DATE_DESC_BASKETBALL + CALORIES_DESC_BASKETBALL"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL + MUSCLE_DESC_BASKETBALL,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_AEROBICS + NAME_DESC_BASKETBALL"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + DATE_DESC_BASKETBALL + CALORIES_DESC_BASKETBALL"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL + MUSCLE_DESC_BASKETBALL,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_AEROBICS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + DATE_DESC_BASKETBALL + CALORIES_DESC_BASKETBALL"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL + MUSCLE_DESC_BASKETBALL,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // multiple calories - last calories accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + CALORIES_DESC_AEROBICS + CALORIES_DESC_BASKETBALL"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL + MUSCLE_DESC_BASKETBALL,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // multiple quantities - last quantity accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_AEROBICS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL + MUSCLE_DESC_BASKETBALL,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // multiple units - last unit accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + UNIT_DESC_AEROBICS + UNIT_DESC_BASKETBALL + MUSCLE_DESC_BASKETBALL,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // multiple muscles - all accepted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise expectedExerciseMultipleTags \u003d new ExerciseBuilder(BASKETBALL)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withMuscles(VALID_MUSCLE_BASKETBALL, VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + MUSCLE_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL, new AddExerciseCommand(expectedExerciseMultipleTags));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(AEROBICS).withMuscles().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_AEROBICS + DATE_DESC_AEROBICS"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + CALORIES_DESC_AEROBICS + QUANTITY_DESC_AEROBICS + UNIT_DESC_AEROBICS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new AddExerciseCommand(expectedExercise));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BASKETBALL + CATEGORY_DESC_EXERCISE + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + VALID_DATE_BASKETBALL"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BASKETBALL + VALID_DATE_BASKETBALL"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + VALID_CALORIES_BASKETBALL + VALID_QUANTITY_BASKETBALL + VALID_UNIT_BASKETBALL"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + CATEGORY_DESC_EXERCISE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jietung"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXERCISE + INVALID_NAME_DESC + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + MUSCLE_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL + UNIT_DESC_BASKETBALL, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + MUSCLE_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL + UNIT_DESC_BASKETBALL, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // invalid calories"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + INVALID_CALORIES_DESC + QUANTITY_DESC_BASKETBALL"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + MUSCLE_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL + UNIT_DESC_BASKETBALL, Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + CALORIES_DESC_BASKETBALL + INVALID_QUANTITY_DESC"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + MUSCLE_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL + UNIT_DESC_BASKETBALL, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // invalid unit"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + MUSCLE_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL + INVALID_UNIT_DESC, Unit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // invalid muscle"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jietung"
        },
        "content": "            + CALORIES_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + INVALID_MUSCLE_DESC + VALID_MUSCLE_BASKETBALL, Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXERCISE + INVALID_NAME_DESC + DATE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + CALORIES_DESC_BASKETBALL + INVALID_QUANTITY_DESC + UNIT_DESC_BASKETBALL,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CATEGORY_DESC_EXERCISE + NAME_DESC_BASKETBALL"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                + DATE_DESC_BASKETBALL + CALORIES_DESC_BASKETBALL"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + QUANTITY_DESC_BASKETBALL + UNIT_DESC_BASKETBALL + MUSCLE_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jietung"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 87,
      "-": 39,
      "weihaw08": 45
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/CustomCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.FULL_NAME_DESC_ENDDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.FULL_NAME_DESC_RATING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.FULL_NAME_DESC_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_FULL_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_PARAMETER_TYPE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_PREFIX_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PARAMETER_TYPE_DESC_ENDDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PARAMETER_TYPE_DESC_RATING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PARAMETER_TYPE_DESC_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PREFIX_NAME_DESC_ENDDATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PREFIX_NAME_DESC_RATING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.PREFIX_NAME_DESC_REMARK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_FULL_NAME_RATING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PARAMETER_TYPE_RATING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PREFIX_NAME_RATING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.model.property.CustomProperty.FULL_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.model.property.CustomProperty.PREFIX_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.model.property.ParameterType.PARAMETER_CONSTRAINTS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.testutil.TypicalCustomProperties.RATING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.commands.CustomCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.testutil.CustomPropertyBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "class CustomCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private CustomCommandParser parser \u003d new CustomCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomProperty expectedCustomProperty \u003d new CustomPropertyBuilder(RATING).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + PREFIX_NAME_DESC_RATING"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                        + FULL_NAME_DESC_RATING + PARAMETER_TYPE_DESC_RATING,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new CustomCommand(expectedCustomProperty));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // multiple short names - last short name accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseSuccess(parser, PREFIX_NAME_DESC_ENDDATE + PREFIX_NAME_DESC_RATING"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                        + FULL_NAME_DESC_RATING + PARAMETER_TYPE_DESC_RATING,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new CustomCommand(expectedCustomProperty));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // multiple full names - last full name accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseSuccess(parser, PREFIX_NAME_DESC_RATING + FULL_NAME_DESC_ENDDATE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                        + FULL_NAME_DESC_RATING + PARAMETER_TYPE_DESC_RATING,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new CustomCommand(expectedCustomProperty));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // multiple parameter types - last parameter type accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseSuccess(parser, PREFIX_NAME_DESC_RATING + FULL_NAME_DESC_RATING"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                        + PARAMETER_TYPE_DESC_ENDDATE + PARAMETER_TYPE_DESC_RATING,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                new CustomCommand(expectedCustomProperty));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // missing short name prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, VALID_PREFIX_NAME_RATING + FULL_NAME_DESC_RATING"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                + PARAMETER_TYPE_DESC_RATING, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // missing full name prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME_DESC_RATING + VALID_FULL_NAME_RATING"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                + PARAMETER_TYPE_DESC_RATING, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // missing parameter type prefix"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME_DESC_RATING + FULL_NAME_DESC_RATING"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                + VALID_PARAMETER_TYPE_RATING, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, VALID_PREFIX_NAME_RATING + VALID_FULL_NAME_RATING"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                + VALID_PARAMETER_TYPE_RATING, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // invalid short name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, INVALID_PREFIX_NAME_DESC + FULL_NAME_DESC_RATING"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                + PARAMETER_TYPE_DESC_RATING, PREFIX_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // invalid full name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME_DESC_REMARK + INVALID_FULL_NAME_DESC"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                + PARAMETER_TYPE_DESC_REMARK, FULL_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // invalid parameter type"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME_DESC_REMARK + FULL_NAME_DESC_REMARK"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                + INVALID_PARAMETER_TYPE_DESC, PARAMETER_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, INVALID_PREFIX_NAME_DESC + INVALID_FULL_NAME_DESC"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                + PARAMETER_TYPE_DESC_RATING, PREFIX_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + PREFIX_NAME_DESC_RATING"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                        + FULL_NAME_DESC_RATING + PARAMETER_TYPE_DESC_RATING,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 107
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/DeleteExerciseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": " * outside of the DeleteExerciseCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": " * same path through the DeleteExerciseCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class DeleteExerciseCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, \" t/exercise i/1\", new DeleteExerciseCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "            DeleteExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 12,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.CALORIES_DESC_AEROBICS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.CALORIES_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DATE_DESC_AEROBICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.DATE_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_MUSCLE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_UNIT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.MUSCLE_DESC_AEROBICS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.MUSCLE_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.NAME_DESC_AEROBICS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.QUANTITY_DESC_AEROBICS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.QUANTITY_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.UNIT_DESC_AEROBICS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_CALORIES_AEROBICS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_CALORIES_BASKETBALL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_DATE_AEROBICS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_DATE_BASKETBALL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_BASKETBALL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_NAME_AEROBICS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_AEROBICS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_BASKETBALL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_UNIT_AEROBICS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AEROBICS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AEROBICS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AEROBICS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1 3/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CALORIES_DESC, Calories.MESSAGE_CONSTRAINTS); // invalid calories"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC, Quantity.MESSAGE_CONSTRAINTS); // invalid quantity"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_UNIT_DESC, Unit.MESSAGE_CONSTRAINTS); // invalid unit"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MUSCLE_DESC, Muscle.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // invalid date followed by valid calories"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC + CALORIES_DESC_AEROBICS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // valid date followed by invalid date. The test case for invalid date followed by valid date"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_BASKETBALL + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // while parsing {@code PREFIX_MUSCLE} alone will reset the muscles of the {@code Exercise} being edited,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // parsing it together with a valid muscle results in error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + MUSCLE_DESC_BASKETBALL + MUSCLE_DESC_AEROBICS + TAG_EMPTY,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + MUSCLE_DESC_BASKETBALL + TAG_EMPTY + MUSCLE_DESC_AEROBICS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + MUSCLE_DESC_BASKETBALL + MUSCLE_DESC_AEROBICS,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            Muscle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_CALORIES_DESC"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + VALID_QUANTITY_AEROBICS + VALID_DATE_AEROBICS, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_BASKETBALL + MUSCLE_DESC_AEROBICS + UNIT_DESC_AEROBICS"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + CALORIES_DESC_AEROBICS + QUANTITY_DESC_AEROBICS + NAME_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder().withName(VALID_NAME_AEROBICS)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .withDate(VALID_DATE_BASKETBALL).withCalories(VALID_CALORIES_AEROBICS)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jietung"
        },
        "content": "                .withQuantity(VALID_QUANTITY_AEROBICS).withUnit(VALID_UNIT_AEROBICS)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .withMuscles(VALID_MUSCLE_AEROBICS, VALID_MUSCLE_BASKETBALL).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_BASKETBALL + CALORIES_DESC_AEROBICS;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder().withDate(VALID_DATE_BASKETBALL)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withCalories(VALID_CALORIES_AEROBICS).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AEROBICS;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withName(VALID_NAME_AEROBICS).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_AEROBICS;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withDate(VALID_DATE_AEROBICS).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // calories"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CALORIES_DESC_AEROBICS;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withCalories(VALID_CALORIES_AEROBICS).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // quantity"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_AEROBICS;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withQuantity(VALID_QUANTITY_AEROBICS).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // unit"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jietung"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + UNIT_DESC_AEROBICS;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jietung"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withUnit(VALID_UNIT_AEROBICS).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jietung"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // muscles"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MUSCLE_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withMuscles(VALID_MUSCLE_BASKETBALL).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_AEROBICS + QUANTITY_DESC_AEROBICS"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + CALORIES_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL + DATE_DESC_AEROBICS"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + QUANTITY_DESC_AEROBICS + CALORIES_DESC_AEROBICS + MUSCLE_DESC_BASKETBALL"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + DATE_DESC_BASKETBALL + QUANTITY_DESC_BASKETBALL + CALORIES_DESC_BASKETBALL + MUSCLE_DESC_AEROBICS;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder().withDate(VALID_DATE_BASKETBALL)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .withCalories(VALID_CALORIES_BASKETBALL).withQuantity(VALID_QUANTITY_BASKETBALL)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .withMuscles(VALID_MUSCLE_BASKETBALL, VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DATE_DESC + DATE_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new EditExerciseDescriptorBuilder().withDate(VALID_DATE_BASKETBALL).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CALORIES_DESC_BASKETBALL + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + QUANTITY_DESC_BASKETBALL + DATE_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withDate(VALID_DATE_BASKETBALL)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withCalories(VALID_CALORIES_BASKETBALL).withQuantity(VALID_QUANTITY_BASKETBALL).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder().withMuscles().build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 48,
      "-": 106,
      "weihaw08": 79
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/ExerciseBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.CATEGORY_DESC_EXERCISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ExerciseBookParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private final ExerciseBookParser parser \u003d new ExerciseBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jietung"
        },
        "content": "        AddExerciseCommand command \u003d (AddExerciseCommand) parser.parseCommand(ExerciseUtil.getAddCommand(exercise));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(new AddExerciseCommand(exercise), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        DeleteExerciseCommand command \u003d (DeleteExerciseCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "            DeleteExerciseCommand.COMMAND_WORD + \" \" + CATEGORY_DESC_EXERCISE + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jietung"
        },
        "content": "                + PREFIX_INDEX + INDEX_FIRST_EXERCISE.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(new DeleteExerciseCommand(INDEX_FIRST_EXERCISE), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise build \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(build).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            + INDEX_FIRST_EXERCISE.getOneBased() + \" \" + ExerciseUtil.getEditExerciseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXERCISE, descriptor), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 24,
      "-": 69,
      "weihaw08": 11
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Swim\", \"Dance\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseSuccess(parser, \"Swim Dance\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertParseSuccess(parser, \" \\n Swim \\n \\t Dance  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 5,
      "-": 25,
      "weihaw08": 4
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String INVALID_NAME \u003d \"D@nce\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String INVALID_DATE \u003d \"33/20/2019\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"123a\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"33a\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String INVALID_UNIT \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String INVALID_MUSCLE \u003d \"32friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_NAME \u003d \"Dance\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_DATE \u003d \"26/09/2019\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String VALID_QUANTITY \u003d \"3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_CALORIES \u003d \"321\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String VALID_UNIT \u003d \"km\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_MUSCLE_1 \u003d \"Legs\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_MUSCLE_2 \u003d \"Arms\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseCalories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCalories(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseCalories_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCalories(INVALID_CALORIES));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseCalories_validValueWithoutWhitespace_returnsCalories() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Calories expectedCalories \u003d new Calories(VALID_CALORIES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedCalories, ParserUtil.parseCalories(VALID_CALORIES));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseCalories_validValueWithWhitespace_returnsCaloriesPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String caloriesWithWhitespace \u003d WHITESPACE + VALID_CALORIES + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Calories expectedCalories \u003d new Calories(VALID_CALORIES);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedCalories, ParserUtil.parseCalories(caloriesWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseQuantity_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuantity(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseQuantity_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuantity(INVALID_QUANTITY));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseQuantity_validValueWithoutWhitespace_returnsQuantity() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedQuantity, ParserUtil.parseQuantity(VALID_QUANTITY));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseQuantity_validValueWithWhitespace_returnsTrimmedQuantity() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String quantityWithWhitespace \u003d WHITESPACE + VALID_QUANTITY + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedQuantity, ParserUtil.parseQuantity(quantityWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void parseUnit_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUnit(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void parseUnit_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseUnit(INVALID_UNIT));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void parseUnit_validValueWithoutWhitespace_returnsUnit() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Unit expectedUnit \u003d new Unit(VALID_UNIT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(expectedUnit, ParserUtil.parseUnit(VALID_UNIT));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void parseUnit_validValueWithWhitespace_returnsTrimmedUnit() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String unitWithWhitespace \u003d WHITESPACE + VALID_UNIT + WHITESPACE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Unit expectedUnit \u003d new Unit(VALID_UNIT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(expectedUnit, ParserUtil.parseUnit(unitWithWhitespace));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseMuscle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMuscle(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseMuscle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMuscle(INVALID_MUSCLE));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseMuscle_validValueWithoutWhitespace_returnsMuscle() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Muscle expectedMuscle \u003d new Muscle(VALID_MUSCLE_1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedMuscle, ParserUtil.parseMuscle(VALID_MUSCLE_1));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseMuscle_validValueWithWhitespace_returnsTrimmedMuscle() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String muscleWithWhitespace \u003d WHITESPACE + VALID_MUSCLE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Muscle expectedMuscle \u003d new Muscle(VALID_MUSCLE_1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedMuscle, ParserUtil.parseMuscle(muscleWithWhitespace));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseMuscles_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMuscles(null));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseMuscles_collectionWithInvalidMuscles_throwsParseException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            ParserUtil.parseMuscles(Arrays.asList(VALID_MUSCLE_1, INVALID_MUSCLE)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseMuscles_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(ParserUtil.parseMuscles(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void parseMuscles_collectionWithValidMuscles_returnsMuscleSet() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cMuscle\u003e actualMuscleSet \u003d ParserUtil.parseMuscles(Arrays.asList(VALID_MUSCLE_1, VALID_MUSCLE_2));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cMuscle\u003e expectedMuscleSet \u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new HashSet\u003cMuscle\u003e(Arrays.asList(new Muscle(VALID_MUSCLE_1), new Muscle(VALID_MUSCLE_2)));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedMuscleSet, actualMuscleSet);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 31,
      "-": 117,
      "weihaw08": 76
    }
  },
  {
    "path": "src/test/java/seedu/exercise/logic/parser/SuggestBasicCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.commands.SuggestBasicCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "public class SuggestBasicCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private SuggestCommandParser parser \u003d new SuggestCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void parse_validArgs_returnsSuggestBasicCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseSuccess(parser, \" g/basic\", new SuggestBasicCommand());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            SuggestBasicCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 25
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.model.util.DefaultPropertyBookUtil.getDefaultPropertyBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.SWIM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.WALK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.PropertyBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Regime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.testutil.ExerciseBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(new ReadOnlyResourceBook\u003cExercise\u003e(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ReadOnlyResourceBook\u003c\u003e(modelManager.getExerciseBookData()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jietung"
        },
        "content": "        userPrefs.setExerciseBookFilePath(Paths.get(\"exercise/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jietung"
        },
        "content": "        userPrefs.setExerciseBookFilePath(Paths.get(\"new/exercise/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExerciseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExerciseBookFilePath(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExerciseBookFilePath_validPath_setsExerciseBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jietung"
        },
        "content": "        Path path \u003d Paths.get(\"exercise/book/file/path\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        modelManager.setExerciseBookFilePath(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(path, modelManager.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void hasExercise_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExercise(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void hasExercise_exerciseNotInExerciseBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(modelManager.hasExercise(WALK));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void hasExercise_exerciseInExerciseBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        modelManager.addExercise(WALK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(modelManager.hasExercise(WALK));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void getFilteredExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e exerciseBook \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ExerciseBookBuilder().withExercise(WALK).withExercise(SWIM).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cRegime\u003e regimeBook \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cSchedule\u003e scheduleBook \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e databaseBook \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new ExerciseBookBuilder().withExercise(WALK).withExercise(SWIM).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e differentExerciseBook \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        PropertyBook propertyBook \u003d getDefaultPropertyBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        modelManager \u003d new ModelManager(exerciseBook, regimeBook, databaseBook,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            scheduleBook, userPrefs, propertyBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(exerciseBook, regimeBook, databaseBook,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            scheduleBook, userPrefs, propertyBook);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different exerciseBook -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentExerciseBook, regimeBook,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            databaseBook, scheduleBook, userPrefs, propertyBook)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String[] keywords \u003d WALK.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        modelManager.updateFilteredExerciseList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(exerciseBook, regimeBook, databaseBook,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            scheduleBook, userPrefs, propertyBook)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        modelManager.updateFilteredExerciseList(Model.PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        differentUserPrefs.setExerciseBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(exerciseBook, regimeBook,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            databaseBook, scheduleBook, differentUserPrefs, propertyBook)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 9,
      "-": 94,
      "weihaw08": 45
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/UniqueExerciseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_BASKETBALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.BASKETBALL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.WALK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.exceptions.DuplicateResourceException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.exceptions.ResourceNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class UniqueExerciseListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final UniqueResourceList\u003cExercise\u003e uniqueExerciseList \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void contains_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void contains_exerciseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(uniqueExerciseList.contains(WALK));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void contains_exerciseInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(WALK));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void contains_exerciseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder(WALK).withQuantity(VALID_QUANTITY_BASKETBALL)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(editedExercise));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void add_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void add_duplicateExercise_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(DuplicateResourceException.class, () -\u003e uniqueExerciseList.add(WALK));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercise_nullTargetExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.set(null, WALK));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercise_nullEditedExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.set(WALK, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercise_targetExerciseNotInList_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(ResourceNotFoundException.class, () -\u003e uniqueExerciseList.set(WALK, WALK));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercise_editedExerciseIsSameExercise_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.set(WALK, WALK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e expectedUniqueExerciseList \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedUniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercise_editedExerciseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedWalk \u003d new ExerciseBuilder(WALK).withQuantity(VALID_QUANTITY_BASKETBALL)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.set(WALK, editedWalk);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e expectedUniqueExerciseList \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedUniqueExerciseList.add(editedWalk);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercise_editedExerciseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.set(WALK, BASKETBALL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e expectedUniqueExerciseList \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jietung"
        },
        "content": "        expectedUniqueExerciseList.add(BASKETBALL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercise_editedExerciseHasNonUniqueIdentity_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(BASKETBALL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(DuplicateResourceException.class, () -\u003e uniqueExerciseList.set(WALK, BASKETBALL));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void remove_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void remove_exerciseDoesNotExist_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(ResourceNotFoundException.class, () -\u003e uniqueExerciseList.remove(WALK));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void remove_existingExercise_removesExercise() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.remove(WALK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e expectedUniqueExerciseList \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercises_nullUniqueExerciseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setAll((UniqueResourceList\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercises_uniqueExerciseList_replacesOwnListWithProvidedUniqueExerciseList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e expectedUniqueExerciseList \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jietung"
        },
        "content": "        expectedUniqueExerciseList.add(BASKETBALL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.setAll(expectedUniqueExerciseList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercises_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setAll((List\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercises_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.add(WALK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d Collections.singletonList(BASKETBALL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        uniqueExerciseList.setAll(exerciseList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        UniqueResourceList\u003cExercise\u003e expectedUniqueExerciseList \u003d new UniqueResourceList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        expectedUniqueExerciseList.add(BASKETBALL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void setExercises_listWithDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cExercise\u003e listWithDuplicateExercises \u003d Arrays.asList(WALK, WALK);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(DuplicateResourceException.class, () -\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            uniqueExerciseList.setAll(listWithDuplicateExercises));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            -\u003e uniqueExerciseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 8,
      "weihaw08": 164
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setExerciseBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 18,
      "weihaw08": 1
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/book/ExerciseBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_BASKETBALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.WALK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.exceptions.DuplicateResourceException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ExerciseBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private final ReadOnlyResourceBook\u003cExercise\u003e exerciseBook \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(Collections.emptyList(), exerciseBook.getResourceList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e exerciseBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void resetData_withValidReadOnlyExerciseBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e newData \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(newData, exerciseBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void resetData_withDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // Two exercises with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedWalk \u003d new ExerciseBuilder(WALK).withQuantity(VALID_QUANTITY_BASKETBALL)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cExercise\u003e newExercises \u003d Arrays.asList(WALK, editedWalk);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ExerciseBookStub newData \u003d new ExerciseBookStub(newExercises);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(DuplicateResourceException.class, () -\u003e exerciseBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void hasExercise_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e exerciseBook.hasResource(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void hasExercise_exerciseNotInExerciseBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(exerciseBook.hasResource(WALK));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void hasExercise_exerciseInExerciseBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBook.addResource(WALK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(exerciseBook.hasResource(WALK));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void hasExercise_exerciseWithSameIdentityFieldsInExerciseBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBook.addResource(WALK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedWalk \u003d new ExerciseBuilder(WALK).withQuantity(VALID_QUANTITY_BASKETBALL)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(exerciseBook.hasResource(editedWalk));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void getExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e exerciseBook.getResourceList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * A stub {@code ReadOnlyResourceBook\u003cExercise\u003e} whose exercises list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static class ExerciseBookStub extends ReadOnlyResourceBook\u003cExercise\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        private final ObservableList\u003cExercise\u003e exercises \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ExerciseBookStub(Collection\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            this.exercises.setAll(exercises);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        public ObservableList\u003cExercise\u003e getResourceList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            return exercises;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 4,
      "weihaw08": 97
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/property/CustomPropertyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_FULL_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.INVALID_PREFIX_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_FULL_NAME_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_FULL_NAME_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PARAMETER_TYPE_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PREFIX_NAME_RATING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.testutil.TypicalCustomProperties.ENDDATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.testutil.TypicalCustomProperties.INSTRUCTIONS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.testutil.TypicalCustomProperties.PRIORITY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.testutil.CustomPropertyBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "class CustomPropertyTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void execute_isValidFullName_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertTrue(CustomProperty.isValidFullName(VALID_FULL_NAME_REMARK));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void execute_isValidFullName_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(CustomProperty.isValidFullName(INVALID_FULL_NAME_DESC));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void execute_isValidShortName_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertTrue(CustomProperty.isValidFullName(VALID_PREFIX_NAME_RATING));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void execute_isValidShortName_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(CustomProperty.isValidFullName(INVALID_PREFIX_NAME_DESC));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertTrue(INSTRUCTIONS.equals(INSTRUCTIONS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(INSTRUCTIONS.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomProperty customPropertyCopy \u003d new CustomPropertyBuilder(INSTRUCTIONS).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertTrue(INSTRUCTIONS.equals(customPropertyCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(INSTRUCTIONS.equals(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // different custom property -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(INSTRUCTIONS.equals(ENDDATE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // different prefix -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        CustomProperty editedPriority \u003d new CustomPropertyBuilder(PRIORITY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwekke"
        },
        "content": "                .withPrefix(VALID_PREFIX_NAME_RATING).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(INSTRUCTIONS.equals(editedPriority));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // different full name -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        editedPriority \u003d new CustomPropertyBuilder(INSTRUCTIONS).withFullName(VALID_FULL_NAME_RATING).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(INSTRUCTIONS.equals(editedPriority));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        // different parameter type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        editedPriority \u003d new CustomPropertyBuilder(INSTRUCTIONS).withParameterType(VALID_PARAMETER_TYPE_RATING).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assertFalse(INSTRUCTIONS.equals(editedPriority));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 75
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/resource/CaloriesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class CaloriesTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Calories(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void constructor_invalidCalories_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String invalidCalories \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Calories(invalidCalories));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void isValidCalories() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // null Calories"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Calories.isValidCalories(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // blank Calories"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Calories.isValidCalories(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"32.?\")); // contains punctuation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Calories.isValidCalories(\"a332\")); // contains alphabet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // valid Calories"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"342\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"3223\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"0\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Calories.isValidCalories(\"32323\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "weihaw08": 43
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/resource/DateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Date.isValidDate(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Date.isValidDate(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Date.isValidDate(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Date.isValidDate(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Date.isValidDate(\"32/02/2019\")); // A month cannot have 32 days"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Date.isValidDate(\"12/02/2019\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Date.isValidDate(\"31/10/2019\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Date.isValidDate(\"31/02/2019\")); // Date will be round down to the latest day of that month"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "weihaw08": 42
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/resource/ExerciseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_CALORIES_BASKETBALL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_DATE_BASKETBALL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_NAME_BASKETBALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_BASKETBALL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.BASKETBALL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.WALK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e exercise.getMuscles().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void isSameExercise() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(WALK.isSameResource(WALK));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.isSameResource(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different date and calories -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedWalk \u003d new ExerciseBuilder(WALK).withDate(VALID_DATE_BASKETBALL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withCalories(VALID_CALORIES_BASKETBALL).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.isSameResource(editedWalk));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedWalk \u003d new ExerciseBuilder(WALK).withName(VALID_NAME_BASKETBALL).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.isSameResource(editedWalk));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // same name, same calories, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedWalk \u003d new ExerciseBuilder(WALK).withCalories(VALID_CALORIES_BASKETBALL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .withQuantity(VALID_QUANTITY_BASKETBALL).withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(WALK.isSameResource(editedWalk));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise walkCopy \u003d new ExerciseBuilder(WALK).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(WALK.equals(walkCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(WALK.equals(WALK));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different Exercise -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.equals(BASKETBALL));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Exercise editedWalk \u003d new ExerciseBuilder(WALK).withName(VALID_NAME_BASKETBALL).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.equals(editedWalk));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedWalk \u003d new ExerciseBuilder(WALK).withDate(VALID_DATE_BASKETBALL).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.equals(editedWalk));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // different calories -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedWalk \u003d new ExerciseBuilder(WALK).withCalories(VALID_CALORIES_BASKETBALL).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.equals(editedWalk));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "        editedWalk \u003d new ExerciseBuilder(WALK).withQuantity(VALID_QUANTITY_BASKETBALL).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertFalse(WALK.equals(editedWalk));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedWalk \u003d new ExerciseBuilder(WALK).withQuantity(VALID_QUANTITY_BASKETBALL).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.equals(editedWalk));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        editedWalk \u003d new ExerciseBuilder(WALK).withMuscles(VALID_MUSCLE_AEROBICS).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(WALK.equals(editedWalk));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 13,
      "weihaw08": 78
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/resource/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Run\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Run\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Run\", \"Walk\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Run Walk\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Walk\", \"Dive\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Walk Dive\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"dAnCe\", \"DivE\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Dance Dive\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(predicate.test(new ExerciseBuilder().withName(\"Dance\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Dance\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(predicate.test(new ExerciseBuilder().withName(\"Walk\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // Keywords match date and calories, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Dance\", \"26/09/2019\", \"333\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(predicate.test(new ExerciseBuilder().withName(\"Walk\").withDate(\"26/09/2019\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jietung"
        },
        "content": "                .withCalories(\"333\").withQuantity(\"2\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 58,
      "weihaw08": 16
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/resource/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Name.isValidName(\"^32\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Name.isValidName(\"Running*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Name.isValidName(\"running\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Name.isValidName(\"Running Fast\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Name.isValidName(\"Run Dive Walk Swim Triathlon\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Name.isValidName(\"3432\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Name.isValidName(\"Level 4\")); // alphanumeric with spaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Name.isValidName(\"Level4\")); // alphanumeric with no spaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 30,
      "weihaw08": 12
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/resource/QuantityTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // valid quantity"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"10\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"1\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"2.4\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "weihaw08": 35
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/resource/UnitTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.model.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class UnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Unit(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void constructor_invalidUnit_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String invalidUnit \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Unit(invalidUnit));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void isValidUnit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // null unit"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Unit.isValidUnit(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // invalid unit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertFalse(Unit.isValidUnit(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertFalse(Unit.isValidUnit(\"^32\")); // only non-alphabetic characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertFalse(Unit.isValidUnit(\"Running*\")); // contains non-alphabetic characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertFalse(Unit.isValidUnit(\"3432\")); // only numeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "        // valid unit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertTrue(Unit.isValidUnit(\"running\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertTrue(Unit.isValidUnit(\"RunningFast\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 37,
      "weihaw08": 3
    }
  },
  {
    "path": "src/test/java/seedu/exercise/model/tag/MuscleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "public class MuscleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Muscle(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Muscle(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Muscle.isValidMuscleName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 4,
      "-": 20,
      "weihaw08": 4
    }
  },
  {
    "path": "src/test/java/seedu/exercise/storage/JsonAdaptedExerciseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.storage.resource.JsonAdaptedExercise.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.SWIM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.resource.JsonAdaptedExercise;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonAdaptedExerciseTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String INVALID_NAME \u003d \"D@nce\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String INVALID_DATE \u003d \"32/13/2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"22m\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String INVALID_UNIT \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String INVALID_MUSCLE \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_NAME \u003d SWIM.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_DATE \u003d SWIM.getDate().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_CALORIES \u003d SWIM.getCalories().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String VALID_QUANTITY \u003d SWIM.getQuantity().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String VALID_UNIT \u003d SWIM.getQuantity().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final List\u003cJsonAdaptedMuscle\u003e VALID_MUSCLES \u003d SWIM.getMuscles().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        .map(JsonAdaptedMuscle::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Map\u003cString, String\u003e VALID_CUSTOM_PROPERTIES \u003d Map.of(\"Raating\", \"5\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_validExerciseDetails_returnsExercise() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(SWIM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertEquals(SWIM, exercise.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new JsonAdaptedExercise(INVALID_NAME, VALID_DATE, VALID_CALORIES, VALID_QUANTITY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                VALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(null, VALID_DATE, VALID_CALORIES,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            VALID_QUANTITY, VALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new JsonAdaptedExercise(VALID_NAME, INVALID_DATE, VALID_CALORIES, VALID_QUANTITY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                VALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, null, VALID_CALORIES,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            VALID_QUANTITY, VALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new JsonAdaptedExercise(VALID_NAME, VALID_DATE, INVALID_CALORIES, VALID_QUANTITY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                VALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_nullCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, VALID_DATE, null, VALID_QUANTITY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            VALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Calories.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jietung"
        },
        "content": "            new JsonAdaptedExercise(VALID_NAME, VALID_DATE, VALID_CALORIES, INVALID_QUANTITY,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                VALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, VALID_DATE, VALID_CALORIES, null,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            VALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void toModelType_invalidUnit_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jietung"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jietung"
        },
        "content": "                new JsonAdaptedExercise(VALID_NAME, VALID_DATE, VALID_CALORIES, VALID_QUANTITY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                    INVALID_UNIT, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String expectedMessage \u003d Unit.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jietung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public void toModelType_nullUnit_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jietung"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, VALID_DATE, VALID_CALORIES, VALID_QUANTITY,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            null, VALID_MUSCLES, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jietung"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Unit.class.getSimpleName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jietung"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_invalidMuscles_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        List\u003cJsonAdaptedMuscle\u003e invalidMuscles \u003d new ArrayList\u003c\u003e(VALID_MUSCLES);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        invalidMuscles.add(new JsonAdaptedMuscle(INVALID_MUSCLE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonAdaptedExercise exercise \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonAdaptedExercise(VALID_NAME, VALID_DATE, VALID_CALORIES, VALID_QUANTITY, VALID_UNIT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                invalidMuscles, VALID_CUSTOM_PROPERTIES);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, exercise::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 28,
      "weihaw08": 114
    }
  },
  {
    "path": "src/test/java/seedu/exercise/storage/JsonExerciseBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.CLAP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.SLAP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.WALK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonExerciseBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonExerciseBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonExerciseBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void readExerciseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExerciseBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private java.util.Optional\u003cReadOnlyResourceBook\u003cExercise\u003e\u003e readExerciseBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new JsonExerciseBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            .readResourceBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertFalse(readExerciseBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"notJsonFormatExerciseBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void readExerciseBook_invalidExerciseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"invalidExerciseBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void readExerciseBook_invalidAndValidExerciseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseBook(\"invalidAndValidExerciseBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void readAndSaveExerciseBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempExerciseBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e original \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jietung"
        },
        "content": "        JsonExerciseBookStorage jsonExerciseBookStorage \u003d new JsonExerciseBookStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        jsonExerciseBookStorage.saveResourceBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e readBack \u003d jsonExerciseBookStorage.readResourceBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(original, new ReadOnlyResourceBook\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        original.addResource(CLAP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        original.removeResource(WALK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        jsonExerciseBookStorage.saveResourceBook(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        readBack \u003d jsonExerciseBookStorage.readResourceBook(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(original, new ReadOnlyResourceBook\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        original.addResource(SLAP);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        jsonExerciseBookStorage.saveResourceBook(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        readBack \u003d jsonExerciseBookStorage.readResourceBook().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(original, new ReadOnlyResourceBook\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveExerciseBook_nullExerciseBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExerciseBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Saves {@code exerciseBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private void saveExerciseBook(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonExerciseBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                .saveResourceBook(exerciseBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void saveExerciseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExerciseBook(new ReadOnlyResourceBook\u003c\u003e(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 4,
      "weihaw08": 108
    }
  },
  {
    "path": "src/test/java/seedu/exercise/storage/JsonSerializableExerciseBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.serializablebook.JsonSerializableExerciseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.testutil.exercise.TypicalExercises;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class JsonSerializableExerciseBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableExerciseBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Path TYPICAL_EXERCISES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExerciseBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Path INVALID_EXERCISE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExerciseBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final Path DUPLICATE_EXERCISE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExerciseBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_typicalExercisesFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonSerializableExerciseBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXERCISES_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            JsonSerializableExerciseBook.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e exerciseBookFromFile \u003d dataFromFile.toModelType(Exercise.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e typicalExerciseBook \u003d TypicalExercises.getTypicalExerciseBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(exerciseBookFromFile, typicalExerciseBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_invalidExerciseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonSerializableExerciseBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXERCISE_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            JsonSerializableExerciseBook.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e dataFromFile.toModelType(Exercise.class));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void toModelType_duplicateExercise_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonSerializableExerciseBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXERCISE_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            JsonSerializableExerciseBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableExerciseBook.MESSAGE_DUPLICATE_RESOURCE, ()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            -\u003e dataFromFile.toModelType(Exercise.class));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 4,
      "weihaw08": 45
    }
  },
  {
    "path": "src/test/java/seedu/exercise/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jietung"
        },
        "content": "        userPrefs.setExerciseBookFilePath(Paths.get(\"exercisebook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/exercise/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import static seedu.exercise.testutil.exercise.TypicalExercises.getTypicalExerciseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonExerciseBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonRegimeBookStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.storage.bookstorage.JsonScheduleBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private StorageBook storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonExerciseBookStorage jsonExerciseBookStorage \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonExerciseBookStorage(getTempFilePath(\"eb\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonRegimeBookStorage jsonRegimeBookStorage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonRegimeBookStorage(getTempFilePath(\"rb\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonExerciseBookStorage allJsonExerciseBookStorage \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonExerciseBookStorage(getTempFilePath(\"aeb\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonScheduleBookStorage jsonScheduleBookStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonScheduleBookStorage((getTempFilePath(\"sb\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        JsonPropertyBookStorage propertyBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            new JsonPropertyBookStorage(getTempFilePath(\"pm\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        storageManager \u003d new StorageBook(jsonExerciseBookStorage, allJsonExerciseBookStorage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            jsonRegimeBookStorage, jsonScheduleBookStorage, userPrefsStorage, propertyBookStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * Note: This is an integration test that verifies the StorageBook is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void exerciseBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * Note: This is an integration test that verifies the StorageBook is properly wired to the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * {@link JsonExerciseBookStorage} class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonExerciseBookStorageTest} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e original \u003d getTypicalExerciseBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        storageManager.saveExerciseBook(original);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e retrieved \u003d storageManager.readExerciseBook().get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertEquals(original, new ReadOnlyResourceBook\u003c\u003e(retrieved));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public void getExerciseBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        assertNotNull(storageManager.getExerciseBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 47,
      "weihaw08": 38
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/CustomPropertyBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.property.ParameterType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": " * A utility class to help with building CustomProperty objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "public class CustomPropertyBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private static final String DEFAULT_PREFIX \u003d \"r\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private static final String DEFAULT_FULL_NAME \u003d \"Rating\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private static final String DEFAULT_PARAMETER_TYPE \u003d \"Number\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private Prefix prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private String fullName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    private ParameterType parameterType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public CustomPropertyBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        this.withPrefix(DEFAULT_PREFIX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        this.withFullName(DEFAULT_FULL_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        this.withParameterType(DEFAULT_PARAMETER_TYPE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public CustomPropertyBuilder(CustomProperty customPropertyToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        prefix \u003d customPropertyToCopy.getPrefix();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        fullName \u003d customPropertyToCopy.getFullName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        parameterType \u003d customPropertyToCopy.getParameterType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Sets the {@code Prefix} of the {@code CustomProperty} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public CustomPropertyBuilder withPrefix(String prefixName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        assert(!prefixName.equals(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        this.prefix \u003d new Prefix(prefixName + \"/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Sets the full name of the {@code CustomProperty} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public CustomPropertyBuilder withFullName(String fullName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     * Sets the {@code ParameterType} of the {@code CustomProperty} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwekke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public CustomPropertyBuilder withParameterType(String parameterType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        switch (parameterType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        case (\"Number\"):"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            this.parameterType \u003d ParameterType.NUMBER;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        case (\"Text\"):"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            this.parameterType \u003d ParameterType.TEXT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        case (\"Date\"):"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            this.parameterType \u003d ParameterType.DATE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            throw new AssertionError(\"Invalid parameterType\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public CustomProperty build() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwekke"
        },
        "content": "        return new CustomProperty(prefix, fullName, parameterType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 75
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/ExerciseBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * A utility class to help with building ExerciseBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * {@code ReadOnlyResourceBook\u003cExercise\u003e eb \u003d new ExerciseBookBuilder().withExercise(\"Dance\", \"Swim\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ExerciseBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private ReadOnlyResourceBook\u003cExercise\u003e exerciseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBook \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBookBuilder(ReadOnlyResourceBook\u003cExercise\u003e exerciseBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.exerciseBook \u003d exerciseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Adds a new {@code Exercise} to the {@code ReadOnlyResourceBook\u003cExercise\u003e} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBookBuilder withExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exerciseBook.addResource(exercise);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ReadOnlyResourceBook\u003cExercise\u003e build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return exerciseBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "weihaw08": 33
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns the middle index of the exercise in the {@code model}\u0027s exercise list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExerciseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns the last index of the exercise in the {@code model}\u0027s exercise list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Returns the exercise in the {@code model}\u0027s exercise list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static Exercise getExercise(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return model.getFilteredExerciseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 6,
      "-": 44,
      "weihaw08": 5
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/TypicalCustomProperties.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwekke"
        },
        "content": "package seedu.exercise.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_FULL_NAME_ENDDATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_FULL_NAME_RATING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_FULL_NAME_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PARAMETER_TYPE_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PARAMETER_TYPE_RATING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PARAMETER_TYPE_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PREFIX_NAME_ENDDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PREFIX_NAME_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_PREFIX_NAME_REMARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwekke"
        },
        "content": "import seedu.exercise.model.property.CustomProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwekke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwekke"
        },
        "content": " * A utility class containing a list of {@code CustomProperty} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwekke"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwekke"
        },
        "content": "public class TypicalCustomProperties {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final CustomProperty PRIORITY \u003d new CustomPropertyBuilder().withPrefix(\"d\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            .withFullName(\"Priority\").withParameterType(\"Number\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final CustomProperty INSTRUCTIONS \u003d new CustomPropertyBuilder().withPrefix(\"e\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            .withFullName(\"Instructions\").withParameterType(\"Text\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final CustomProperty EXPECTEDRECOVERY \u003d new CustomPropertyBuilder().withPrefix(\"f\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            .withFullName(\"Recovery\").withParameterType(\"Date\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    // Manually added - Custom Property\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final CustomProperty RATING \u003d new CustomPropertyBuilder().withPrefix(VALID_PREFIX_NAME_RATING)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            .withFullName(VALID_FULL_NAME_RATING).withParameterType(VALID_PARAMETER_TYPE_RATING).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final CustomProperty REMARK \u003d new CustomPropertyBuilder().withPrefix(VALID_PREFIX_NAME_REMARK)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            .withFullName(VALID_FULL_NAME_REMARK).withParameterType(VALID_PARAMETER_TYPE_REMARK).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwekke"
        },
        "content": "    public static final CustomProperty ENDDATE \u003d new CustomPropertyBuilder().withPrefix(VALID_PREFIX_NAME_ENDDATE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwekke"
        },
        "content": "            .withFullName(VALID_FULL_NAME_ENDDATE).withParameterType(VALID_PARAMETER_TYPE_ENDDATE).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwekke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwekke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwekke": 36
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Index INDEX_FIRST_EXERCISE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Index INDEX_SECOND_EXERCISE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Index INDEX_THIRD_EXERCISE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 2,
      "-": 7,
      "weihaw08": 3
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/exercise/EditExerciseDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.testutil.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * A utility class to help with building EditExerciseDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class EditExerciseDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private EditCommand.EditExerciseDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditExerciseDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor \u003d new EditCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditExerciseDescriptorBuilder(EditCommand.EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditExerciseDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an {@code EditExerciseDescriptor} with fields containing {@code exercise}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditExerciseDescriptorBuilder(Exercise exercise) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor \u003d new EditCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setName(exercise.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setCalories(exercise.getCalories());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setDate(exercise.getDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setQuantity(exercise.getQuantity());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setMuscles(exercise.getMuscles());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditExerciseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the {@code Calories} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditExerciseDescriptorBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setCalories(new Calories(calories));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditExerciseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the {@code Quantity} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditExerciseDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setQuantity(new Quantity(quantity));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Sets the {@code Unit} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public EditExerciseDescriptorBuilder withUnit(String unit) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jietung"
        },
        "content": "        descriptor.setUnit(new Unit(unit));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses the {@code muscles} into a {@code Set\u003cMuscle\u003e} and set it to the {@code EditExerciseDescriptor}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditExerciseDescriptorBuilder withMuscles(String... muscles) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        Set\u003cMuscle\u003e muscleSet \u003d Stream.of(muscles).map(Muscle::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.setMuscles(muscleSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public EditCommand.EditExerciseDescriptor build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 9,
      "weihaw08": 87
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/exercise/ExerciseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.testutil.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Calories;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Unit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jietung"
        },
        "content": " * A utility class to help with building Exercise objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ExerciseBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"Running\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String DEFAULT_DATE \u003d \"26/09/2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static final String DEFAULT_CALORIES \u003d \"111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String DEFAULT_QUANTITY \u003d \"0.5\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private static final String DEFAULT_UNIT \u003d \"hours\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Calories calories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jietung"
        },
        "content": "    private Unit unit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private Set\u003cMuscle\u003e muscles;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        calories \u003d new Calories(DEFAULT_CALORIES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        unit \u003d new Unit(DEFAULT_UNIT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        muscles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Initializes the ExerciseBuilder with the data of {@code exerciseToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBuilder(Exercise exerciseToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        name \u003d exerciseToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        date \u003d exerciseToCopy.getDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        calories \u003d exerciseToCopy.getCalories();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        quantity \u003d exerciseToCopy.getQuantity();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "        unit \u003d exerciseToCopy.getUnit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        muscles \u003d new HashSet\u003c\u003e(exerciseToCopy.getMuscles());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the {@code Name} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Parses the {@code muscles} into a {@code Set\u003cMuscle\u003e} and set it to the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBuilder withMuscles(String... muscles) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.muscles \u003d SampleDataUtil.getMuscleSet(muscles);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the {@code Date} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Sets the {@code Calories} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public ExerciseBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        this.calories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jietung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jietung"
        },
        "content": "     * Sets the {@code Unit} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jietung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jietung"
        },
        "content": "    public ExerciseBuilder withUnit(String unit) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jietung"
        },
        "content": "        this.unit \u003d new Unit(unit);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jietung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jietung"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public Exercise build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return new Exercise(name, date, calories, quantity, unit, muscles);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 16,
      "weihaw08": 90
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/exercise/ExerciseUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.testutil.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.property.Muscle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " * A utility class for Exercise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class ExerciseUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an add command string for adding the {@code exercise}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static String getAddCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jietung"
        },
        "content": "        return AddExerciseCommand.COMMAND_WORD + \" \" + getExerciseDetails(exercise);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the part of command string for the given {@code exercise}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private static String getExerciseDetails(Exercise exercise) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jietung"
        },
        "content": "        sb.append(PREFIX_CATEGORY + \"exercise \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        sb.append(PREFIX_NAME + exercise.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        sb.append(PREFIX_DATE + exercise.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        sb.append(PREFIX_CALORIES + exercise.getCalories().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        sb.append(PREFIX_QUANTITY + exercise.getQuantity().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "        sb.append(PREFIX_UNIT + exercise.getUnit().unit + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        exercise.getMuscles().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            s -\u003e sb.append(PREFIX_MUSCLE + s.muscleName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns the part of command string for the given {@code EditExerciseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static String getEditExerciseDescriptorDetails(EditCommand.EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.getCalories().ifPresent(calories -\u003e sb.append(PREFIX_CALORIES).append(calories.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        descriptor.getQuantity().ifPresent(quantity -\u003e sb.append(PREFIX_QUANTITY).append(quantity.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jietung"
        },
        "content": "        descriptor.getUnit().ifPresent(unit -\u003e sb.append(PREFIX_UNIT).append(unit.unit).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        if (descriptor.getMuscles().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            Set\u003cMuscle\u003e muscles \u003d descriptor.getMuscles().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            if (muscles.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                sb.append(PREFIX_MUSCLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "                muscles.forEach(s -\u003e sb.append(PREFIX_MUSCLE).append(s.muscleName).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 13,
      "weihaw08": 54
    }
  },
  {
    "path": "src/test/java/seedu/exercise/testutil/exercise/TypicalExercises.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "package seedu.exercise.testutil.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_CALORIES_AEROBICS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_CALORIES_BASKETBALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_DATE_AEROBICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_DATE_BASKETBALL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_AEROBICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_MUSCLE_BASKETBALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_NAME_AEROBICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_NAME_BASKETBALL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_AEROBICS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_QUANTITY_BASKETBALL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_UNIT_AEROBICS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.logic.commands.CommandTestUtil.VALID_UNIT_BASKETBALL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.ReadOnlyResourceBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "import seedu.exercise.model.resource.Exercise;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jietung"
        },
        "content": " * A utility class containing a list of {@code Exercise} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weihaw08"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "public class TypicalExercises {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise WALK \u003d new ExerciseBuilder().withName(\"Walking\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withQuantity(\"30\").withUnit(\"hours\").withCalories(\"222\").withDate(\"26/09/2019\").withMuscles(\"Legs\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise SWIM \u003d new ExerciseBuilder().withName(\"Swimming\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withQuantity(\"10\").withUnit(\"laps\").withCalories(\"333\").withDate(\"26/09/2019\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withMuscles(\"Legs\", \"Core\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise DANCE \u003d new ExerciseBuilder().withName(\"Dancing\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withDate(\"26/09/2019\").withCalories(\"456\").withQuantity(\"2\").withUnit(\"hours\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise BENCH_PRESS \u003d new ExerciseBuilder().withName(\"Bench Press\").withDate(\"26/09/2019\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withCalories(\"234\").withQuantity(\"10\").withUnit(\"counts\").withMuscles(\"Biceps\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise SKIP \u003d new ExerciseBuilder().withName(\"Skipping\").withDate(\"26/09/2019\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withCalories(\"333\").withQuantity(\"160\").withUnit(\"skips\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise SPRINT \u003d new ExerciseBuilder().withName(\"Sprinting\").withDate(\"26/09/2019\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withCalories(\"345\").withQuantity(\"30\").withUnit(\"sprints\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise SNAP \u003d new ExerciseBuilder().withName(\"Snapping\").withDate(\"26/09/2019\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withCalories(\"332\").withQuantity(\"800\").withUnit(\"times\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise CLAP \u003d new ExerciseBuilder().withName(\"Clapping\").withDate(\"27/09/2019\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withCalories(\"0\").withQuantity(\"11\").withUnit(\"claps\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise SLAP \u003d new ExerciseBuilder().withName(\"Slapping\").withDate(\"28/09/2019\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withCalories(\"234\").withQuantity(\"2\").withUnit(\"slaps\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jietung"
        },
        "content": "    // Manually added - Exercise\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise AEROBICS \u003d new ExerciseBuilder().withName(VALID_NAME_AEROBICS)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        .withDate(VALID_DATE_AEROBICS).withCalories(VALID_CALORIES_AEROBICS)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withQuantity(VALID_QUANTITY_AEROBICS).withUnit(VALID_UNIT_AEROBICS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withMuscles(VALID_MUSCLE_BASKETBALL).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static final Exercise BASKETBALL \u003d new ExerciseBuilder().withName(VALID_NAME_BASKETBALL)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        .withDate(VALID_DATE_BASKETBALL).withCalories(VALID_CALORIES_BASKETBALL)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withQuantity(VALID_QUANTITY_BASKETBALL).withUnit(VALID_UNIT_BASKETBALL)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jietung"
        },
        "content": "        .withMuscles(VALID_MUSCLE_AEROBICS, VALID_MUSCLE_BASKETBALL)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    private TypicalExercises() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     * Returns an {@code ReadOnlyResourceBook\u003cExercise\u003e} with all the typical exercises."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static ReadOnlyResourceBook\u003cExercise\u003e getTypicalExerciseBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        ReadOnlyResourceBook\u003cExercise\u003e eb \u003d new ReadOnlyResourceBook\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        for (Exercise exercise : getTypicalExercises()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "            eb.addResource(exercise);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weihaw08"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    public static List\u003cExercise\u003e getTypicalExercises() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(WALK, SWIM, DANCE, BENCH_PRESS, SKIP, SPRINT, SNAP));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weihaw08"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 28,
      "weihaw08": 51
    }
  },
  {
    "path": "src/test/java/seedu/exercise/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/exercise/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jietung"
        },
        "content": "package seedu.exercise.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jietung"
        },
        "content": "import static seedu.exercise.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jietung"
        },
        "content": "import seedu.exercise.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jietung": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003c?import seedu.exercise.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jietung"
        },
        "content": "\u003cfx:root type\u003d\"seedu.exercise.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jietung": 1,
      "-": 5
    }
  }
]
