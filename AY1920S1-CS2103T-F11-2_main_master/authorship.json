[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d Xpire"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F11-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-F11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Have you ever lost track of your items\u0027 expiry dates and end up throwing the items away? Have you ever open your fridge to search for your favourite chocolate, only to realise that it has already expired? Fret not! Xpire is here to save you! With features to help you keep track of your items\u0027 expiry dates as well as to remind you of soon-expiring items, you will never have to worry about when your items are expiring again. Next time, you will be sure to eat that chocolate before it expires!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Interested to try out our application? Head over to the \u003c\u003cUserGuide#, UserGuide\u003e\u003e to get started!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Xpire is a desktop expiry date tracker. It has a Graphical User Interface (GUI) but most of the user interactions happen using a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "* It is a Java application that hopes to automate and simplify the tracking of soon-to-expire items, mainly intended for students living on campus."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Xpire is an open source project that welcomes contributions from the community. If you are interested in contributing to this project, head over to the \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e to get started!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "* Original source of code: AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "febee99": 2,
      "JermyTan": 8,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "mainClassName \u003d \u0027io.xpire.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        \u0027site-name\u0027: \u0027Xpire\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-2/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "febee99": 1,
      "-": 150,
      "JermyTan": 5
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Xpire was developed by TeamXpire. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Tan Kai Qun, Jeremy"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::jermytan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://jermytan.github.io[homepage]] [https://github.com/JermyTan[github]] [\u003c\u003cjermytan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Integration + Deliverables and Deadlines + DevOps"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Sim Jun Yuen, Darren"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::kalsyc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://kalsyc.github.io[homepage]] [https://github.com/kalsyc[github]] [\u003c\u003ckalsyc#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Testing + UI/UX Designer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Phoebe Chan Kar Hui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::febee99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://febee99.github.io[homepage]] [https://github.com/febee99[github]] [\u003c\u003cfebee99#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Code Quality + Scheduling and Tracking"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Liaw Siew Yee"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::liawsy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://github.com/liawsy[github]] [\u003c\u003cliawsy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Storage + Documentation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Liu Xiaoyu"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::xiaoyu-nus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://github.com/xiaoyu-nus[github]] [\u003c\u003cxiaoyu-nus#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Reminder System + Logo and Website Designer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "JermyTan": 23
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* *Email us* : You can also reach us at `jeremytan97@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "JermyTan": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d Xpire - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "By: `TeamXpire`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/io/xpire/Main.java[`Main`] and link:{repoURL}/src/main/java/io/xpire/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CardListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/io/xpire/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "link:{repoURL}/src/main/java/io/xpire/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  `Logic` uses the `XpireParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding an item)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "febee99"
        },
        "content": "*API* : link:{repoURL}/src/main/java/io/xpire/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "* stores the Xpire data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "febee99"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cItem\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "febee99"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Xpire`, which `Item` can reference. This would allow `Xpire` to only require one `Tag` object per unique `Tag`, instead of each `Item` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "febee99"
        },
        "content": "*API* : link:{repoURL}/src/main/java/io/xpire/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "febee99"
        },
        "content": "* can save the Xpire data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "febee99"
        },
        "content": "Classes used by multiple components are in the `io.xpire.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "febee99"
        },
        "content": "// tag:tobuylist[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003d\u003d\u003d [Proposed] Replenish List"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//{Explain here how the ToReplenish/ToBuy List is implemented}_"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Items are added to the replenish list by the user using the replenish command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liawsy"
        },
        "content": "When an item expires, the item is automatically tagged as \"expired\"."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liawsy"
        },
        "content": "This enables the user to search for a list of expired items by searching for the \"expired\" tag."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liawsy"
        },
        "content": "With this, the user is able to view the list of expired items and decide which items to add to the replenish list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liawsy"
        },
        "content": "On the other hand, when an item has run out, the user is prompted to replenish the item using the replenish command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liawsy"
        },
        "content": "image::ItemManagerClassDiagram.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//The following sequence diagram shows how the operation works:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How item is added to the replenish list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* **Alternative 1 (current choice): Once an item expires or runs out,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liawsy"
        },
        "content": "the user is prompted to shift the item to the replenish list by typing the replenish command and item index.**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liawsy"
        },
        "content": "** Pros: User has flexibility in deciding what to add to the replenish list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liawsy"
        },
        "content": "** Cons: User has to manually type in a short command to add an item to the replenish list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* **Alternative 2: Once an item expires or runs out, item is transferred to the replenish list.**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liawsy"
        },
        "content": "** Pros: User need not manually key in item details to transfer it to the replenish list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liawsy"
        },
        "content": "** Cons: User may not want the item in the list and as such would expect a delete functionality for the to-replenish list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store the items"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//** Pros:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//** Cons:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//* **Alternative 2:**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//** Pros:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liawsy"
        },
        "content": "//** Cons:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "febee99"
        },
        "content": "// tag:autosort[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d Auto-sorting of items by name then date"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "febee99"
        },
        "content": "The auto-sorting mechanism is facilitated by `SortedUniqueItemList` which replaces `UniqueItemList`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "febee99"
        },
        "content": "`SortedUniqueItemList` supports the following new function(s):"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "febee99"
        },
        "content": "* `SortedUniqueItemList#setMethodOfSorting()` -- Specifies the MethodOfSorting and comparator to be used for the list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "febee99"
        },
        "content": "In `SortedUniqueItemList`, items are stored in a `SortedList\u003cItem\u003e` and sorted based on the comparator specified."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "febee99"
        },
        "content": "Given below is an example usage scenario and how the auto-sorting mechanism behaves at each step."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "febee99"
        },
        "content": "The following sequence diagram shows how the auto-sorting mechanism works:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "febee99"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How auto-sorting executes"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 1 (current choice):** Automatic sorting with the addition of every item."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Slightly more efficient algorithm for viewing items in O(1) time."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons: Slightly less efficient algorithm for adding items."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 2:** Sort only when items are viewed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Slightly more efficient algorithm for adding items in O(1) time."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons: Slightly less efficient algorithm for viewing items."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store the auto-sorted items"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 1 (current choice):** `SortedList\u003cItem\u003e`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Smooth integration with the internal ObservableList. Comparator can also be easily changed when necessary."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons: Sorted List can only be viewed when `asUnmodifiableObservableList()` in `SortedUniqueItemList` is called."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 2:** `TreeSet\u003cItem\u003e`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Disallows addition of identical items to the set."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons: May not be as compatible with the internalList which is of type ObservableList."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "febee99"
        },
        "content": "// end::autosort[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "febee99"
        },
        "content": "// tag:setreminder[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d Set Reminders for expiring items"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "The set reminder function is facilitated by `FilteredItemList`, in which the old item will"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "be replaced by a new one with its `reminderThreshold` field updated. It is activated using the command `set reminder`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "You can refer to the example usage scenario given below to see what happens at each stage of the execution."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Scenario: the user wants to activate a reminder for an item with index 1 in the current view of the list"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1 day before its expiry date."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Step 1:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Step 2:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Step 3:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Step 4:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "The reminder is now set up and is reflected in the UI like this:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "febee99"
        },
        "content": "The following sequence diagram shows how the operation works:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".SetReminderSequenceDiagram"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "image::SetReminderSequenceDiagram.png[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a set reminder command:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How set reminder executes"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "febee99"
        },
        "content": "// end::setreminder[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The undo/redo mechanism is facilitated by `CloneModel` and `StackManager`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "It is a separate class that stores a state of the model at any command in time. Internally, it runs three private functions that copy the data over."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The mechanism is supported by a StackManager which stores internally all the states and +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "decides when to pop or clear, depending on the command."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "There are two stacks that are stored in StackManager internally, the Undo and the Redo stack."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "These stacks are initialised and cleared upon beginning/ending every session."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "At every command (Other than undo/redo/help/exit), the state is stored internally. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "When an undo command is executed, it will pop the previous state and update the model via `updateModel`. +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The state that was undid will then be pushed into the Redo stack, should the user types in a redo command."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Step 1. The user launches the application for the first time. The two internal stacks in `StackManager` will be initialised."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Both stacks should be empty as there are no previous commands by the user. The current state is s0, the initial state of Xpire."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "image::UndoRedo/UndoRedoStep1.png[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Step 2. The user executes `delete|5` command to delete the 5th item in Xpire. The `delete` will then save the previous state, s0 by pushing it into the Undo Stack."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The current state will be the new state `s1` that has the 5th item in Xpire deleted."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "image::UndoRedo/UndoRedoStep2.png[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Step 3. The user executes `add|Apple|30/10/2019|3` to add a new item. Similar to Step 2, The `add` command will then save the previous state, s1 by pushing it into the Undo Stack."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The current state will be the new state `s2` with the item Apple added."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "image::UndoRedo/UndoRedoStep3.png[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "If a command fails its execution, it will not save the previous state, thus the Xpire state will not be pushed into the UndoStack."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Step 4. The user now decides that adding the item was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will then update the current model with the model in the previous state."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Internally within StackManager, the most recent state, s1, will be popped from the Undo Stack to become the current state. At the same time, s2, the new state with the added item, will be pushed into the Redo Stack."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "image::UndoRedo/UndoRedoStep4.png[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "If there are no commands to undo (e.g. at the start of a new Xpire session), undo will return an Error to the user instead. This is done by checking whether the UndoStack is empty."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The `redo` command does the opposite -- It will pop the latest state from the Redo Stack and set it as the current state whilst pushing the current state into the Undo Stack."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Similarly, if there are no commands to redo, redo will return an Error to the user. This is done by checking if the Redo Stack is empty."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "From Step 4, there are 3 scenarios which showcases the behaviour of StackManager after an Undo Command has been executed."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Step 5a. The user suddenly decides that he should not have undid the previous AddCommand, thus he wants to redo the action. This is done by inputting \u0027redo\u0027 in Xpire."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Internally within Stack Manager, the current state will be the popped state, s2, from the Redo Stack. The current state, s1, will then be psuehd back into the Undo Stack."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The current states and their locations should be the same as after the execution of the Add command in Step 3."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "image::UndoRedo/UndoRedoStep5a.png[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Step 5b. The user decides to further undo his actions, which now includes the first Delete command. The initial state, s0, will then be popped from the Undo Stack and set as the current state."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The current state, s1, will then be pushed into the Redo Stack."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "image::UndoRedo/UndoRedoStep5b.png[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Step 5c. The user may also decide to execute some other command (which is the most likely scenario) other than Undo/Redo. For instance, the user inputs `tag|2|#Fruit`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "When this happens, the existing states in the Redo Stack will be cleared. The state s1, will then be pushed into the Undo Stack whilst the current state will be the new state s3 that includes the new Tag command."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "image::UndoRedo/UndoRedoStep5c.png[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Not all commands will save states to StackManager. Exit and Help commands will not save states. Undo and Redo commands should only act on commands that update the items or change the view of the items to the user."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "The following activity diagram summarises what happens when a user executes a new command:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "image::UndoRedo/UndoRedoActivityDiagram.png[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire model."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the item being deleted)."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Hard to do when we are applying stackable search/sort commands."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of model states."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update the filtered list shown to the user and the backend Xpire data."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Search"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "This feature allows users to filter out specific items either by name or by tag(s) through providing the relevant keyword(s). Items which contain any of the keywords will be shown on the view panel. For search by name, partial words can be matched. For search by tag, only exact words will be matched."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "This implementation is under `Logic` and `Model` components."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Below is the UML sequence diagram of an example usage scenario."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::SearchCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "febee99"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "febee99"
        },
        "content": "The following sequence diagram shows how the operation works:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "febee99"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How set reminder executes"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "febee99"
        },
        "content": "// tag:recommendations[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d Spelling correction with alternative recommendations"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "febee99"
        },
        "content": "The spelling correction mechanism is based primarily on the Damerau–Levenshtein distance algorithm, which computes the edit distance between two strings."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "febee99"
        },
        "content": "This distance is based on the number of substitutions, deletions, insertions or transpositions of characters, needed to convert the source string into the target string."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "febee99"
        },
        "content": "Relevant functions supporting this operation are implemented in `StringUtil`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "febee99"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "febee99"
        },
        "content": "The following sequence diagram shows how the sort operation works with recommendations:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "febee99"
        },
        "content": "The following sequence diagram shows how the search operation works with recommendations:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "febee99"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an unknown command:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How recommendations execute"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 1 (current choice):** Displays recommendations after user inputs command that fails to produce results."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Simpler and straightforward implementation."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons: May be less intuitive to the user as opposed to auto-completed commands."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 2:** Auto-completion of commands."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Lowers likelihood of spelling mistakes in user input to begin with."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons: We must ensure that the structure of every single command and their variations are taken into consideration."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store the recommendations"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 1 (current choice):** Use a TreeMap to store entries that comprise a set of recommendations and their corresponding edit distance."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Entries are automatically sorted by their edit distance, thus words with a smaller edit distance will be recommended first. Duplicate entries are also prohibited."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "febee99"
        },
        "content": "* **Alternative 2:** Store all possible recommendations in a long list."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Pros: Simpler implementation."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "febee99"
        },
        "content": "** Cons: Not closely related words may also be recommended to the user."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "febee99"
        },
        "content": "// end::recommendations[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "We use Gradle for build automation. See \u003c\u003cUsingGradle#, here\u003e\u003e for more details."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "We use https://travis-ci.org/[Travis CI] to perform _Continuous Integration_ on our project. See \u003c\u003cUsingTravis#, here\u003e\u003e for more details."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "We use https://www.netlify.com/[Netlify] to preview the HTML pages of any modified asciidocs files when reviewing pull requests. See \u003c\u003cUsingNetlify#, here\u003e\u003e for more details."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Follow the steps below to make a new release:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/io/xpire/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ".  Tag the repo with the version number. e.g. `v1.4`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you have created."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Xpire often depends on third-party libraries. For instance, the https://github.com/FasterXML/jackson[Jackson library] is being used for JSON parsing in Xpire. Below are 2 ways to manage these _dependencies_:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Use Gradle to manage and automatically download dependencies (Recommended)."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Manually download and include those libraries in the repo (this requires extra work and bloats the repo size)."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Has a preference for command-line interfaces (CLI)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Able to type fast"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Has a need to track the expiry dates of numerous items"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Prefers desktop applications over other forms"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Wants to be able to search up an item’s expiry date quickly"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Has a need for items to be tagged appropriately"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Needs items to be organised into what has not expired and what to buy/replenish"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Wants to be notified of items that are soon expiring or has expired"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Tech-savvy and familiar with CLI"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Requires an app to check what items are about to expire for a particular recipe [v2.0]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Wants to save recipes in a convenient format [v2.0]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*Value proposition*: manage tracking of items\u0027 expiry dates faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"23%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|Priority |As a ... |I want to ... |So that I ..."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |new user |see usage instructions |can refer to instructions when I forget how to use the application"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |input the names of items |"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |input the expiry dates of items |"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |save the list of items I am tracking |can come back to it after closing the application"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |view the list of things I am tracking |know which items are expiring soon"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |add items to the tracking list |am able to track new items"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |delete items from the tracking list |can remove items that I do not need to track anymore"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |exit from the application |do not have to be on the application all the time"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |be reminded of items that are expiring soon |can use them before they expire or prepare to replenish them"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |view the list of expired things that are to be replenished |know what to replenish"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |sort my items according to name or date |can find my items more easily"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* * *` |user |search up my items by their tags or names |can find my items more easily"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* *` |user |set quantity of my items |can take note of items that are soon running out or need using before the expiry date"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* *` |user |input description of items |can write small notes or annotate about the item"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* *` |user |search items and delete |can delete an item easily without having to remember their ID"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* *` |user |undo my previous command |can return to the previous state/list if I have accidentally executed a command I do not want"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* *` |user |tag items |categorise and organise them better"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "|`* *` |user |edit items |can update their details easily when I need to"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "febee99"
        },
        "content": "|`*` |user |import tracking list into phone via QR Code |can remind my other friends when their items are expiring"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "febee99"
        },
        "content": "//|`*` |user |track items via recipes |can be reminded of what items are expiring soon and need replenishing"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "febee99"
        },
        "content": "|`*` |user |track items and their quantity |know what items have run out and need replenishing"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "(For all use cases below, the *System* is `Xpire` and the *Actor* is the `user`, unless specified otherwise. Additionally, any references made to the `list` refers to both the tracking list and the to-buy list, unless specific otherwise.)"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 - Add item"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1. User requests to add an item to the list."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2. Xpire adds the item."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* 1a. Xpire detects an error in the input."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "** 1a1. Xpire shows an error message."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 - Delete item"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Precondition: Display board is showing a list of items."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User requests to delete a specific item in the list."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  Xpire deletes the item."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "febee99"
        },
        "content": "** 1a1. Xpire shows an error message."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Search item(s)"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Precondition: Display board is showing a list of items."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User requests to search for specific item(s) in the list."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  Xpire shows the searched item(s)."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* 1a. The given keyword(s) has no matching results."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "** 1a1. Xpire shows an empty list."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 - Clear list"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User +++\u003cu\u003eviews all items in the list (UC05)\u003c/u\u003e+++."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  User requests to clear the list."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "3.  Xpire removes all items from the list."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC05 - View all items"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User requests to view all items in the list."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  Xpire shows the full list of items."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - View help"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User requests for help."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  Xpire shows the help messages."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC07 - Terminate Xpire"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User requests to exit the program."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  Xpire closes."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC08 - Check for expiring items"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User requests to view list of expiring items."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  Xpire shows list of expiring items."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* 1a. The list is empty"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "** 1a1. Xpire shows an empty list."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC09 - Tag item"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Precondition: Display board is showing a list of items."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User requests to tag an item in the list."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  Xpire tags the item."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "** 1a1. Expire shows an error message."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d\u003d Use case: UC10 - Sort items"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Precondition: Display board is showing a list of items."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "1.  User requests to sort the items."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "2.  Xpire sorts the items in the list."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "+"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "febee99"
        },
        "content": "Accessibility"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app shall be accessible by people who have downloaded the JAR file."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app shall be accessible to people who are colour blind, to the extent that they shall be able to discern all text and other information displayed by the system as easily as a person without colour blindness."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "febee99"
        },
        "content": "Availability"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app shall be available once it is started up and running."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  Reminders shall only be available on the app."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  Reminders shall only be available after the app is started."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "febee99"
        },
        "content": "Efficiency"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app should start up within 5 seconds."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The response to any user action should become visible within 5 seconds."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "febee99"
        },
        "content": "Performance"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app list should be able to hold up to 1000 items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app should be able to sort up to 1000 items without any sags in performance."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "febee99"
        },
        "content": "Reliability"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app shall only accept and process user actions written in the correct format."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app shall throw appropriate exceptions when any user action is in an invalid format."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app shall throw appropriate exceptions when any user action fails to be processed."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "febee99"
        },
        "content": "Integrity"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The precision of calculations with derived data shall be at the same degree of precision as the originating source data."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  All dates entered will be parsed accurately as to the original date format."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "febee99"
        },
        "content": "Product Scope"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The product is not required to handle items without expiry dates."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The product is not required to handle items without names."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The product is not required to produce reminders when the app is inactive."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "febee99"
        },
        "content": "Usability"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The user interface should be self-explanatory and intuitive enough for first-time users or users who are not IT-savvy."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "febee99"
        },
        "content": "Maintainability"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  A development programmer who has at least one year of experience supporting this software application shall be able to add a new product feature, including source code modifications and testing, with no more than two days of labour."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The app code base shall be easy to read and interpret by a developer with at least one year of experience."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "febee99"
        },
        "content": "Modifiability"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  Function calls shall not be nested more than two levels deep."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "febee99"
        },
        "content": "Installability"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The installation process shall be convenient. The application shall be downloaded as a JAR file from the newest tagged release."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  The software shall be installed from Github, a popular portable medium."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "febee99"
        },
        "content": "Interoperability"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "febee99"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "liawsy"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"22%,\u003c78%\"]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|Command |Executes user input in the application"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|CommandBox |UI component that takes in user input"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|FXML |XML-based user interface markup language for defining user interface of a JaxaFX application"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|ItemCard |UI component that displays information on an item"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "|CardListPanel |UI component that displays list of items"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|JavaFX |Software platform for creating and delivering desktop applications and rich Internet applications"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|JSON |An open-standard file format that uses human-readable text to transmit data objects consisting of attribute–value pairs and array data types"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|Logic |Handles user input for the application and returns the application\u0027s output"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|MainWindow |Provides the basic application layout containing a menu bar and space where other JavaFX elements can be placed"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|Model |Represents data in the expiry date tracker and exposes immutable items list"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|Parser |Converts user input into a Command object"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|SceneBuilder |Visual layout tool that allows developers to design JavaFX application user interfaces"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|Storage |Manages data in the expiry date tracker in local storage"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "liawsy"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*+++\u003cu\u003eFridgely\u003c/u\u003e+++*"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Author: Justin Ehlert"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Able to sync with multiple devices."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Has barcode scanner to automatically add item."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Cannot efficiently change the location tag of the item. To change the location tag, user has to manually recreate the same item with another tag and delete the current item."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "*+++\u003cu\u003eExpiry Date Tracker Lite\u003c/u\u003e+++*"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Author: Lalit Kumar Verma"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Has the option to use it in multiple languages."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Provides a summary view of \"expiring\" and \"expired\" items."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Forces user to take photo of every item while adding to the list."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d Deleting an item"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "febee99"
        },
        "content": ". Deleting an item while all items are listed"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "febee99"
        },
        "content": ".. Prerequisites: List all items using the `list` command. Multiple items in the list."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "febee99"
        },
        "content": "   Expected: First item is deleted from the list. Details of the deleted item shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "febee99"
        },
        "content": "   Expected: No item is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 98,
      "liawsy": 61,
      "febee99": 229,
      "JermyTan": 182,
      "-": 361,
      "xiaoyu-nus": 22
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "// Update the User Guide:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "// 1. Include the new feature."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "// 2. If it is a new command, include the feature in the command summary at the end."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "//    Match the order of command summary with the order of the respective features."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "// 3. If it is not a new command, ensure that the format of the feature in the command summary remain correct."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "// 4. Things have to be included in the feature: Function + Format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "// 5. Things may be included in the feature: remark, example, tip."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "// 6. Update FAQs if applicable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d Xpire - User Guide"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-2/main/tree/master"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "By: `TeamXpire`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Xpire is for those who *prefer to use a desktop app for tracking expiry dates of items*. More importantly, Xpire is *optimised for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you have trouble tracking your items\u0027 expiry dates, Xpire can help you manage and notify you of items that are soon-expiring. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ".  Download the latest `xpire.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for Xpire."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* `*view*` : views all items"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `*check*|20` : views items that is going to expire within the given number of days"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* `*add*|Banana|25/9/2019` : adds an item named `Banana` with expiry date `25/9/2019` to list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* `*delete*|3` : deletes the 3rd item shown in the current list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* `*exit*` : exits the app"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* Words that are enclosed with `\u003c` and `\u003e` are the parameters to be supplied by the user e.g. in `set reminder|\u003cindex\u003e|\u003creminder threshold\u003e`, `\u003cindex\u003e` and `\u003creminder threshold\u003e` are parameters which can be used as `set reminder|1|7`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Parameters in square brackets are optional e.g `check[|\u003cdays\u003e]` can be used as `check|7` or `check`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Optional parameters with `…`​ after them can be used multiple times including zero times e.g. `tag|\u003cindex\u003e|[\u003ctag\u003e]...` can be used as `tag|1|#Fruit #Frozen #Cold`, `tag|1`, or `tag|1|#Fruit`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Displays the help window. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003d\u003d\u003d Adding an item: `add`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Adds an item to your tracker. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "Upon addition of the item, the updated list sorted by name then date in chronological order, will be displayed. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Format: `add|\u003citem name\u003e|\u003cexpiry date\u003e[|\u003cquantity\u003e]`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "* `add|durian|30/9/2020` (without quantity) +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "Adds the item `durian` with expiry date `30/9/2019` with quantity `1`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* `add|ice cream|18/8/2020|2` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "Adds the item `ice cream` with expiry date `18/8/2019` with quantity `2`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* Item quantity **must be a positive integer** 1,2,3..."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* When not specified, the item quantity is assumed to be 1."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "For items with single quantity, you can save time by keying in only the item name and expiry date."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "\u003d\u003d\u003d Listing all items : `view`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Shows all items in the list. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "All items are sorted by both name (lexicographical order) and date (chronological order). +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Format: `view`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003d\u003d\u003d Setting reminder for an item: `set reminder`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Sets a reminder threshold for your item. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `set reminder|\u003cindex\u003e|\u003creminder threshold\u003e`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "This allows the check command to quickly find the item once the reminder threshold is exceeded."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* Reminder threshold refers to *the number of days before the item\u0027s expiry date* to activate the reminder."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* All items have their default reminder threshold set to 0."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* To reset a reminder threshold, simply write over the old one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* To delete a reminder, reset the reminder threshold to 0."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `set reminder|2|4` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Sets a reminder for the second item in the list 4 days before its expiry date."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `set|1|0` +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Removes the reminder for the first item in the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003d\u003d\u003d Listing expiring items : `check`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Lists items that will expire within the specified number of days in your tracker. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Format: `check|\u003cdays\u003e`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Lists items whose reminder has been activated. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `check`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* Number of days *must be a non-negative integer* 0,1,2,3,.."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "`check|0` lists items that have already expired or expire on the day of checking."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `check`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `check|20` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Lists items expiring in the next 20 days."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003d\u003d\u003d Sorting all items : `sort`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Sorts all items in your list by either name or date. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Format: `sort|\u003ckey\u003e`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "febee99"
        },
        "content": "* Items can be sorted by either name or date."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "febee99"
        },
        "content": "* For example, Apple will sort ahead of Banana, while 1/1/2000 will sort ahead of 1/1/2001."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "febee99"
        },
        "content": "* `sort|name`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "febee99"
        },
        "content": "* `sort|date`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "\u003d\u003d\u003d Searching item by name: `search`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Search items whose names or tag(s) contain any of the given keywords. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Format: `search|\u003ckeyword\u003e[|\u003cother keywords\u003e]...`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* The search is case insensitive. e.g `ham` will match `Ham` and `#fruit` will match `#Fruit`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* The order of the keywords does not matter. e.g. `Turkey Ham|Apple` will match `Apple|Turkey Ham`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Only the name and tag, if any, are searched."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* For name search, partial words can be matched e.g. `Papa` will match `Papayas`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* For tag search, only exact words will be matched e.g. `#Fruit` will match `#Fruit` but `#Fru` will not match `#Fruit`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* Items matching at least one keyword will be returned (an `OR` search). e.g. `Apple|Pear` will return `Granny Smith Apple` and `Japanese Pear`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "febee99"
        },
        "content": "* If no items are found, any closely related keywords, if any, will be displayed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* `search|kebab` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Returns `Chicken Kebab` and `kebab`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "febee99"
        },
        "content": "* `search|Chicken Ham` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "febee99"
        },
        "content": "Returns `Chicken Ham`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* `search|milk|tea|#Drink` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Returns any items with names containing `milk` or `tea`, or with the tag `#Drink`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003d\u003d\u003d Deleting items, tags or quantity : `delete`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Deletes the specified item from your list. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Format: `delete|\u003cindex\u003e` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "OR +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Deletes tag(s) from the specified item. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Format: `delete|\u003cindex\u003e|\u003ctag\u003e[\u003cother tags\u003e]...` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liawsy"
        },
        "content": "OR +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Reduces item quantity by the specified quantity. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Format `delete|\u003cindex\u003e|\u003cquantity\u003e`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* The index refers to the index number shown on the list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Tags must be prefixed with a \u0027#\u0027."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* The item must contain the tags to be deleted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* The quantity *must be a positive integer* 1, 2 ,3..."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* The quantity specified must be more than the item\u0027s current quantity."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* `view` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "`delete|2` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Deletes the 2nd item in the list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "febee99"
        },
        "content": "* `sort|name` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "febee99"
        },
        "content": "`delete|3` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "febee99"
        },
        "content": "Deletes the 3rd item in the sorted list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* `search|potato` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "`delete|1` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Deletes the 1st item in the results of the `search` command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* `view` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "`delete|3|#Fruit #Food` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Deletes the tags `#Fruit` and `#Food` from the 3rd item in the list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* `view` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liawsy"
        },
        "content": "`delete|4|1` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Reduces the quantity from the 4th item by 1."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "\u003d\u003d\u003d Tagging an item : `tag`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "An item can have any number of tags (including 0)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Tags an item from the list according to user input +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Format: `tag|\u003cindex\u003e|\u003ctag\u003e[\u003cother tags\u003e]...`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "OR"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Shows the tags you have created +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Format: `tag`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Tags the item at the specified `\u003cindex\u003e`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* The index refers to the index number shown in the list."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* The index *must be a positive integer* (e.g. 1, 2, 3, ... )."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Tags must be prefixed with a \u0027#\u0027."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* Tags will be formatted in Sentence-Case (i.e. first letter will be upper-case while the rest of the letters are lower-case)."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "****"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* `view` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "`tag|2|#Nestle #Caffeine` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Tags the 2nd item in the list with `#Nestle` and `#Caffeine`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "* `tag` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Shows all tags created."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Clears all entries from the list. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Items are saved in the hard disk automatically after any command that modifies the list. +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "//\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "//_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Xpire folder."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* *Add* `add|\u003citem name\u003e|\u003cexpiry date\u003e[|\u003cquantity\u003e]...` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "e.g. `add|durian|30/9/2019`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* *View* : `view`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* *Set reminder* : `set reminder|\u003cindex\u003e|\u003creminder threshold\u003e` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `set reminder|1|7`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* *Check* : `check[|\u003cdays\u003e]` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `check|20`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* *Sort* : `sort|\u003ckey\u003e` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "febee99"
        },
        "content": "e.g. `sort|date`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* *Search* : `search|\u003ckeyword\u003e[|\u003cother keywords\u003e]...` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "e.g. `search|milk|tea|pearls`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "liawsy"
        },
        "content": "* *Delete* : `delete|\u003cindex\u003e[|\u003ctag\u003e or \u003cquantity\u003e]` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `delete|3`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "* *Tag* : `tag|\u003cindex\u003e|[\u003ctag\u003e]...`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 64,
      "liawsy": 34,
      "febee99": 19,
      "JermyTan": 18,
      "-": 120,
      "xiaoyu-nus": 43
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteItem(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveXpire(xpire)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "febee99": 1,
      "-": 35,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "docs/diagrams/AutoSortSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":XpireParser\" as XpireParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":Xpire\" as Xpire MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":SortedUniqueItemList\" as SortedUniqueItemList MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "[-\u003e LogicManager : execute(\"add Strawberry\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "LogicManager -\u003e XpireParser : parseCommand(\"add Strawberry\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate XpireParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "AddCommandParser --\u003e XpireParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser -\u003e AddCommandParser : parse(\"Strawberry\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "AddCommandParser --\u003e XpireParser : a"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "AddCommandParser -[hidden]-\u003e XpireParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate XpireParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "AddCommand -\u003e Model : addItem(\"Strawberry\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "Model -\u003e Xpire : addItem(\"Strawberry\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate Xpire"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "Xpire -\u003e SortedUniqueItemList : add(\"Strawberry\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate SortedUniqueItemList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "SortedUniqueItemList --\u003e Xpire :"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate SortedUniqueItemList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "Xpire -\u003e Model :"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate Xpire"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "febee99": 87
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "Xpire *-right-\u003e \"1\" SortedUniqueItemList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "Xpire *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "UniqueTagList -[hidden]down- SortedUniqueItemList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "UniqueTagList -[hidden]down- SortedUniqueItemList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "SortedUniqueItemList o-right-\u003e Item"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Item o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Item *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "Item *--\u003e ExpiryDate"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "Item *--\u003e Quantity"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "febee99": 7,
      "-": 11,
      "xiaoyu-nus": 2
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "if () then ([command commits Xpire])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    :Save Xpire to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    xpireStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "febee99": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":XpireParser\" as XpireParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "LogicManager -\u003e XpireParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate XpireParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "DeleteCommandParser --\u003e XpireParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "DeleteCommandParser --\u003e XpireParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e XpireParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate XpireParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "DeleteCommand -\u003e Model : deleteItem(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "febee99": 10,
      "-": 58,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "docs/diagrams/ItemManagerClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "class ItemManager {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "- model: Model"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "- storage: Storage"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "~ void updateItemTags()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "interface Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "+ void saveXpire(ReadOnlyXpire)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "+ void saveXpire(ReadOnlyXpire, Path)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "~ void updateItemTags()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "+ getXpire(): ReadOnlyXpire"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "class StorageManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "- xpireStorage: XpireStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "class ModelManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "- xpire: Xpire"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "class Xpire {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "- items: SortedUniqueItemList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "~ void checkExpiryDates()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "class SortedUniqueItemList {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "+ Iterator\u003cItem\u003e iterator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "class Item {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "- tags: Set\u003cTag\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "+ boolean isItemExpired()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "- void addTag(Tag)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "ItemManager --\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "ItemManager --\u003e Storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Storage \u003c|.. StorageManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Model \u003c|.. ModelManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "ModelManager --\u003e Xpire"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Xpire --\u003e SortedUniqueItemList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "SortedUniqueItemList --\u003e Item"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "liawsy": 41
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "Class XpireParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "LogicManager --\u003e\"1\" XpireParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "febee99": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "Interface ReadOnlyXpire \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "Class Xpire"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "Class ReadOnlyXpire"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Package Item {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Class Item"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Class ReminderThreshold"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "Class ExpiryDate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "Class Quantity"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Class ReminderThreshold"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "Class SortedUniqueItemList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "Xpire .up.|\u003e ReadOnlyXpire"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "ModelManager o--\u003e \"1\" Xpire"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "Xpire *--\u003e \"1\" SortedUniqueItemList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "SortedUniqueItemList o--\u003e \"*\" Item"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Item *--\u003e Name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "Item *--\u003e ExpiryDate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "Item *--\u003e Quantity"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Item *--\u003e ReminderThreshold"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Item *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Item *--\u003e ReminderThreshold"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "Name -[hidden]right-\u003e ExpiryDate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "ExpiryDate -[hidden]right-\u003e Quantity"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "ModelManager --\u003e\"1\" Item : filtered list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "febee99": 14,
      "-": 34,
      "xiaoyu-nus": 9
    }
  },
  {
    "path": "docs/diagrams/SetReminderSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "participant \":XpireParser\" as XpireParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "participant \":SetReminderCommandParser\" as SetReminderCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "participant \"s:SetReminderCommand\" as SetReminderCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "participant \":Xpire\" as Xpire MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "[-\u003e LogicManager : execute(\"set reminder|1|1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "LogicManager -\u003e XpireParser : parseCommand(\"set reminder|1|1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate XpireParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "create SetReminderCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "XpireParser -\u003e SetReminderCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate SetReminderCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "SetReminderCommandParser --\u003e XpireParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate SetReminderCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "XpireParser -\u003e SetReminderCommandParser : parse(\"1|1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate SetReminderCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "create SetReminderCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "SetReminderCommandParser -\u003e SetReminderCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate SetReminderCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "SetReminderCommand --\u003e SetReminderCommandParser : s"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate SetReminderCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "SetReminderCommandParser --\u003e XpireParser : s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate SetReminderCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "SetReminderCommandParser -[hidden]-\u003e XpireParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "destroy SetReminderCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "XpireParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate XpireParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "LogicManager -\u003e SetReminderCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate SetReminderCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "SetReminderCommand -\u003e Model : setItem(1,1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Model --\u003e Xpire : setItem(1,1)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate Xpire"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Xpire --\u003e Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate Xpire"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Model --\u003e SetReminderCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "SetReminderCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "CommandResult --\u003e SetReminderCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "SetReminderCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate SetReminderCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 76
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "Interface XpireStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "Class JsonXpireStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "StorageManager o--\u003e XpireStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "JsonXpireStorage .left.|\u003e XpireStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "JsonXpireStorage .down.\u003e JsonSerializableXpireStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "JsonSerializableXpireStorage .right.\u003e JsonSerializableItem"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "JsonSerializableItem .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "febee99": 6,
      "-": 17,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Class ItemListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Class ItemCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "MainWindow *-down-\u003e ItemListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "ItemListPanel -down-\u003e ItemCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "ItemListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "ItemCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "ItemCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "ItemListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "xiaoyu-nus": 8
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State1 as \"__xp0:Xpire__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State2 as \"__xp1:Xpire__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State3 as \"__xp2:Xpire__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "febee99": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "title After command \"delete|5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State1 as \"__xp0:Xpire__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State2 as \"__xp1:Xpire__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State3 as \"__xp2:Xpire__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "febee99": 4,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "title After command \"add|Strawberry|3/2/2020|1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State1 as \"__xp0:Xpire__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State2 as \"__xp1:Xpire__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State3 as \"__xp2:Xpire__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "febee99": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State1 as \"__xp0:Xpire__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State2 as \"__xp1:Xpire__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State3 as \"__xp2:Xpire__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "febee99": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State1 as \"__xp0:Xpire__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State2 as \"__xp1:Xpire__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State3 as \"__xp2:Xpire__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "febee99": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State1 as \"__xp0:Xpire__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State2 as \"__xp1:Xpire__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class State3 as \"__xp3:Xpire__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "note right on link: State xp2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "febee99": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "participant \":XpireParser\" as XpireParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "participant \":StackManager\" as StackManager MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "LogicManager -\u003e XpireParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "activate XpireParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "UndoCommand --\u003e XpireParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "XpireParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "deactivate XpireParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "UndoCommand -\u003e Model : undo()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "Model -\u003e StackManager : updateModel(prevState)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "activate StackManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "StackManager -\u003e StackManager :resetData(cloneModel)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "StackManager --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "deactivate StackManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 7,
      "febee99": 7,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "ecp -\u003e ec ++: index, editItemDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "docs/team/febee99.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d Phoebe Chan Kar Hui - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::febee99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://febee99.github.io[homepage]] [https://github.com/febee99[github]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Code Quality + Scheduling and Tracking"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d PROJECT: Xpire"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Xpire is a desktop application used for tracking expiry dates of items.  The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 10,
      "-": 68
    }
  },
  {
    "path": "docs/team/jermytan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d Tan Kai Qun, Jeremy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::jermytan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://jermytan.github.io[homepage]] [https://github.com/JermyTan[github]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Integration + Deliverables and Deadlines + DevOps"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d PROJECT: Xpire"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Xpire is a desktop application used for tracking expiry dates of items.  The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 10,
      "-": 68
    }
  },
  {
    "path": "docs/team/kalsyc.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d Sim Jun Yuen, Darren - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::kalsyc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://kalsyc.github.io[homepage]] [https://github.com/kalsyc[github]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Testing + UI/UX Designer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d PROJECT: Xpire"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Xpire is a desktop application used for tracking expiry dates of items.  The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 10,
      "-": 68
    }
  },
  {
    "path": "docs/team/liawsy.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d Liaw Siew Yee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::liawsy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://github.com/liawsy[github]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Storage + Documentation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d PROJECT: Xpire"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Xpire is a desktop application used for tracking expiry dates of items.  The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 10,
      "-": 68
    }
  },
  {
    "path": "docs/team/xiaoyu-nus.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d Liu Xiaoyu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "image::xiaoyu-nus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "{empty}[https://github.com/xiaoyu-nus[github]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Responsibilities: Reminder System + Logo and Website Designer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003d\u003d PROJECT: Xpire"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "Xpire is a desktop application used for tracking expiry dates of items.  The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 10,
      "-": 68
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.item.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "febee99": 1,
      "-": 116
    }
  },
  {
    "path": "src/main/java/io/xpire/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/io/xpire/Login.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Runs application login."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class Login extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Parent root \u003d FXMLLoader.load(Login.class.getResource(\"/view/LoginForm.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Scene scene \u003d new Scene(root);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 27
    }
  },
  {
    "path": "src/main/java/io/xpire/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Entry point."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // Comment/uncomment the lines to execute either Xpire or login page."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        //Application.launch(Login.class, args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 7,
      "-": 24
    }
  },
  {
    "path": "src/main/java/io/xpire/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.JsonXpireStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.XpireStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Xpire ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        XpireStorage xpireStorage \u003d new JsonXpireStorage("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                userPrefs.getXpireFilePath()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        storage \u003d new StorageManager(xpireStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s expiry date tracker and {@code userPrefs}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * \u003cbr\u003e The data from the sample expiry date tracker will be used instead if {@code storage}\u0027s expiry date tracker"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * is not found, or an empty expiry date tracker will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * {@code storage}\u0027s expiry date tracker."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Optional\u003cReadOnlyXpire\u003e expiryDateTrackerOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ReadOnlyXpire initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            expiryDateTrackerOptional \u003d storage.readXpire();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "            if (!expiryDateTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Expiry Date Tracker\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            initialData \u003d expiryDateTrackerOptional.orElseGet(SampleDataUtil::getSampleXpire);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Expiry Date Tracker\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            initialData \u003d new Xpire();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Expiry Date Tracker\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            initialData \u003d new Xpire();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "febee99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpiryDateTracker\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        logger.info(\"Starting Xpire \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Xpire ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 10,
      "JermyTan": 36,
      "-": 140
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof Config)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Config other \u003d (Config) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return Objects.equals(this.logLevel, other.logLevel)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 Objects.equals(this.userPrefsFilePath, other.userPrefsFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        sb.append(\"Preference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 13,
      "-": 47
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.windowCoordinates !\u003d null ? new Point(this.windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof GuiSettings)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            GuiSettings other \u003d (GuiSettings) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.windowWidth \u003d\u003d other.windowWidth"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.windowHeight \u003d\u003d other.windowHeight"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 Objects.equals(this.windowCoordinates, other.windowCoordinates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return Objects.hash(this.windowWidth, this.windowHeight, this.windowCoordinates);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        sb.append(\"Width : \" + this.windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        sb.append(\"Height : \" + this.windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        sb.append(\"Position : \" + this.windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 20,
      "-": 51
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final String LOG_FILE \u003d \"xpire.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return clazz \u003d\u003d null ? Logger.getLogger(\"\") : getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 106
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The item index provided is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_ITEMS_LISTED_OVERVIEW \u003d \"%d items listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_INVALID_REMINDER_THRESHOLD \u003d \"%s is not a valid reminder threshold.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_INVALID_TAGS \u003d \"Tags are not in the item specified!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_DELETE_MODE \u003d \"Unknown Delete mode.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_SUGGESTIONS \u003d \" Did you mean %s?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "febee99": 5,
      "JermyTan": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", this.major, this.minor, this.patch, this.isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (this.major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (this.minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.minor - other.minor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (this.patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.patch - other.patch;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (this.isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (this.isEarlyAccess) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", this.major, this.minor, this.patch);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!this.isEarlyAccess) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 23,
      "-": 86
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof Index)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Index other \u003d (Index) obj;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.zeroBasedIndex \u003d\u003d other.zeroBasedIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.zeroBasedIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 17,
      "-": 47
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Represents an error during conversion of data from one format to another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Converts a collection of objects into its string representation."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Optional mapper functions can be provided to mutate the string representation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param items Any java object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param mappers String processing functions."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @return A collection of strings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static Collection\u003cString\u003e stringifyCollection(Collection\u003c?\u003e items, Function\u003cString, String\u003e... mappers) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Function\u003cString, String\u003e finalMapper \u003d Function.identity();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        for (Function\u003cString, String\u003e mapper : mappers) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            finalMapper \u003d finalMapper.andThen(mapper);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return items.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .map(finalMapper)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "JermyTan": 22,
      "-": 34
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/util/DateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ReminderDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Helper functions for handling dates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Converts a {@code LocalDate} object to its string representation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Empty string is returned if date is unable to be parsed into string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param date Date object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param dateFormat String format of the date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @return Date in string if conversion is successful, else empty string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static String convertDateToString(LocalDate date, String dateFormat) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireAllNonNull(date, dateFormat);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateFormat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return date.format(formatter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } catch (IllegalArgumentException | DateTimeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Converts date in string to a {@code LocalDate} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * {@code null} is returned if string is unable to be parsed into date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param dateInString Date in string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param dateFormat String format of the date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @return Date if conversion is successful, else null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static LocalDate convertStringToDate(String dateInString, String dateFormat) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireAllNonNull(dateInString, dateFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateFormat);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateInString, formatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } catch (IllegalArgumentException | DateTimeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Checks if 2 dates are within input {@code days}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * If the {@code earlierDate} is later than {@code laterDate}, then {@code true} is returned."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param days Offset range between the 2 dates."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param earlierDate The earlier date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param laterDate The later date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @return {@code true} if 2 dates are within range or if earlierDate is later than laterDate, else {@code false}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static boolean isWithinRange(int days, LocalDate earlierDate, LocalDate laterDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireAllNonNull(earlierDate, laterDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        AppUtil.checkArgument(days \u003e\u003d 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return earlierDate.plusDays(days).compareTo(laterDate) \u003e\u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Retrieves the difference in the number of days between the {@code earlierDate} and the {@code laterDate}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * If earlierDate is later than laterDate, 0 is returned."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param earlierDate The earlier date."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param laterDate The later date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @return Difference in number of days between the 2 dates. 0 is returned when earlierDate is later than laterDate."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static long getOffsetDays(LocalDate earlierDate, LocalDate laterDate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireAllNonNull(earlierDate, laterDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        long offset \u003d ChronoUnit.DAYS.between(earlierDate, laterDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return Math.max(offset, 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static Optional\u003cReminderDate\u003e getReminderDate(LocalDate laterDate, int offsetDays) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        requireAllNonNull(laterDate, offsetDays);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (offsetDays \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return Optional.of(new ReminderDate(laterDate.minusDays(offsetDays)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Retrieves the current date according to local system clock."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @return Current date."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 90,
      "xiaoyu-nus": 12
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/io/xpire/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code phrase}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *   Ignores case, allows partial phrase match."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABcdef\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc d\") \u003d\u003d true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param phrase cannot be null and cannot be empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static boolean containsPhraseIgnoreCase(String sentence, String phrase) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(phrase);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String trimmedPhrase \u003d phrase.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        AppUtil.checkArgument(!trimmedPhrase.isEmpty(), \"Phrase parameter cannot be empty\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return sentence.toLowerCase().contains(trimmedPhrase.toLowerCase());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Will return false for any other non-null string input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns true if {@code s} represents a non-negative integer."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Will return false for any other non-null string input."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * e.g. empty string, \"-1\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static boolean isNonNegativeInteger(String s) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns true if {@code s} represents an integer smaller than or equal to the given maximum value {@code max}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns false for any other non-null string input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static boolean isExceedingMaxValue(String s, int max) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return value \u003e max;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Converts string to sentence-case (first character upper-case, the rest lower-case)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param string String to be converted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @return new String in sentence case."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static String convertToSentenceCase(String string) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(string);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String newString;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        switch (string.length()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            newString \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            newString \u003d string.toUpperCase();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            newString \u003d Character.toUpperCase(string.charAt(0)) + string.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return newString;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author febee99-reused"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //https://github.com/crwohlfeil/damerau-levenshtein/blob/master/src/main/java/com/codeweasel/DamerauLevenshtein.java"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //with minor modifications"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns the Levenshtein Distance between strings source and target."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * How many edits are needed to change source into target."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * If returns 0, the strings are same."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * If returns 1, that means either a character is added, removed, replaced or swapped."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param source the first string"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param target the second string"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The Levenshtein Distance between the two strings."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static int computeDistance (String source, String target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (source \u003d\u003d null || target \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new IllegalArgumentException(\"Parameter must not be null\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "febee99"
        },
        "content": "        int sourceLength \u003d source.length();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "febee99"
        },
        "content": "        int targetLength \u003d target.length();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (sourceLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return targetLength;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (targetLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return sourceLength;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "febee99"
        },
        "content": "        int[][] dist \u003d new int[sourceLength + 1][targetLength + 1];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (int i \u003d 0; i \u003c sourceLength + 1; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "febee99"
        },
        "content": "            dist[i][0] \u003d i;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (int j \u003d 0; j \u003c targetLength + 1; j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "febee99"
        },
        "content": "            dist[0][j] \u003d j;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (int i \u003d 1; i \u003c sourceLength + 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "febee99"
        },
        "content": "            for (int j \u003d 1; j \u003c targetLength + 1; j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "febee99"
        },
        "content": "                int cost \u003d source.charAt(i - 1) \u003d\u003d target.charAt(j - 1) ? 0 : 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "febee99"
        },
        "content": "                //minimum cost between insertion, deletion, replacement"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "febee99"
        },
        "content": "                dist[i][j] \u003d Math.min(Math.min(dist[i - 1][j] + 1, dist[i][j - 1] + 1), dist[i - 1][j - 1] + cost);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "febee99"
        },
        "content": "                //check for transpositions"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "febee99"
        },
        "content": "                if (i \u003e 1 \u0026\u0026 j \u003e 1"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "febee99"
        },
        "content": "                        \u0026\u0026 source.charAt(i - 1) \u003d\u003d target.charAt(j - 2)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "febee99"
        },
        "content": "                        \u0026\u0026 source.charAt(i - 2) \u003d\u003d target.charAt(j - 1)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    dist[i][j] \u003d Math.min(dist[i][j], dist[i - 2][j - 2] + cost);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "febee99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return dist[sourceLength][targetLength];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns suggestions of alternatives for an invalid word entered."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param invalidWord The invalid word entered."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param set The set of alternative words."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param limit The maximum degree of differences between words compared which is accepted."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return Suggestions that are the most appropriate replacements for the word entered."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static String getSuggestions(String invalidWord, Set\u003cString\u003e set, int limit) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "febee99"
        },
        "content": "        StringBuilder matches \u003d new StringBuilder();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "febee99"
        },
        "content": "        TreeMap\u003cInteger, TreeSet\u003cString\u003e\u003e allMatches \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (String s : set) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "febee99"
        },
        "content": "            if (s.startsWith(invalidWord)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "febee99"
        },
        "content": "                allMatches.putIfAbsent(-1, new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "febee99"
        },
        "content": "                allMatches.get(-1).add(s);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "febee99"
        },
        "content": "            } else if (!allMatches.containsValue(s)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "febee99"
        },
        "content": "                int i \u003d StringUtil.computeDistance(s.toLowerCase(), invalidWord.toLowerCase());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "febee99"
        },
        "content": "                if (i \u003c\u003d limit) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    allMatches.putIfAbsent(i, new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    allMatches.get(i).add(s);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "febee99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (Map.Entry\u003cInteger, TreeSet\u003cString\u003e\u003e entry : allMatches.entrySet()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            //System.out.println(\"Key: \" + entry.getKey() + \". Value: \" + entry.getValue());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "febee99"
        },
        "content": "            matches.append(entry.getValue());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return matches.toString();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns a formatted string containing similar words to the word specified."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param word The word specified to find similar words for."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param allWordsToCompare The set that contains all words to compare the word to."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param limit The maximum degree of polarity between words acceptable."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The string which contains all similar words."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static String findSimilar(String word, Set\u003cString\u003e allWordsToCompare, int limit) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (!StringUtil.getSuggestions(word, allWordsToCompare, limit).isEmpty()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return String.format(Messages.MESSAGE_SUGGESTIONS, getSuggestions(word, allWordsToCompare, limit));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns all similar tags to the tag keyword specified."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param word The tag keyword specified to find similar tags for."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param allTags The set that contains all tags to compare the word to."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The string which contains all similar tags."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static String findSimilarItemTags(String word, Set\u003cTag\u003e allTags) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return StringUtil.findSimilar(word, allTags.stream()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                                   .map(Tag::toString)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                                   .collect(Collectors.toSet()), 3);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns all similar item names to the search keyword specified."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param word The keyword specified to find similar items for."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param allNames The set that contains all names to compare the word to."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The string which contains all similar names."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static String findSimilarItemNames(String word, Set\u003cName\u003e allNames) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return StringUtil.findSimilar(word, allNames.stream()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                                    .map(Name::toString)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                                    .map(x -\u003e x.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                                    .flatMap(Arrays::stream)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                                    .collect(Collectors.toSet()), 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "febee99": 129,
      "JermyTan": 50,
      "-": 48,
      "xiaoyu-nus": 14
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns an xpire object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @see Model#getXpire()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    ReadOnlyXpire getXpire();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of items */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns the user prefs\u0027 xpire file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    Path getXpireFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 2,
      "JermyTan": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.XpireParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final XpireParser xpireParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpireParser \u003d new XpireParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Command command \u003d this.xpireParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        commandResult \u003d command.execute(this.model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            this.storage.saveXpire(this.model.getXpire());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public ReadOnlyXpire getXpire() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.model.getXpire();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.model.getFilteredItemList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Path getXpireFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.model.getXpireFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.model.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 1,
      "JermyTan": 24,
      "-": 53
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Adds an item to the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an item to the list.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"Format: add|\u003citem name\u003e|\u003cexpiry date\u003e[|\u003cquantity\u003e]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"|Strawberry|11/12/1999|2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New item added: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Item toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public AddCommand(Item item) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.toAdd \u003d item;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Executes {@code AddCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return success message from {@code CommandResult} if item is successfully added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws CommandException if item added is a duplicate."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (model.hasItem(this.toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model.addItem(this.toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof AddCommand)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            AddCommand other \u003d (AddCommand) obj;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.toAdd.equals(other.toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.toAdd.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 12,
      "febee99": 2,
      "JermyTan": 26,
      "-": 28
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/CheckCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiringSoonPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ReminderThresholdExceededPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Displays all items whose expiry date falls within the specified duration (in days)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"check\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item(s) expiring soon\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays all items whose expiry date is within\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"the specified duration (in days). Expired items, if any, are also included in the list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Format: check[|\u003cdays\u003e] (days must be a non negative number)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"|7\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"If no duration is specified, expired items and items whose days to expiry date are less than or equals \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"to the remainder threshold will be displayed.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final Predicate\u003cItem\u003e predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CheckCommand(ExpiringSoonPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CheckCommand(ReminderThresholdExceededPredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model.updateFilteredItemList(this.predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else if (!(obj instanceof CheckCommand)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            CheckCommand other \u003d (CheckCommand) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return this.predicate.equals(other.predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.predicate.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 17,
      "xiaoyu-nus": 43
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Clears all items in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model.setXpire(new Xpire());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 2,
      "JermyTan": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof CommandResult)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            CommandResult other \u003d (CommandResult) obj;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.feedbackToUser.equals(other.feedbackToUser)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.showHelp \u003d\u003d other.showHelp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.exit \u003d\u003d other.exit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return Objects.hash(this.feedbackToUser, this.showHelp, this.exit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 13,
      "-": 55
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Deletes an item identified with its displayed index or tag(s) associated with the item."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Private enum to indicate whether command is deleting item, quantity or tags."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private enum DeleteMode { ITEM, QUANTITY, TAGS }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            \"Three formats available for \" + COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"1) Deletes the item identified by the index number.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Format: delete|\u003cindex\u003e (index must be a positive integer)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"|1\" + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"2) Deletes all tags in the item identified by the index number.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"Format: delete|\u003cindex\u003e|\u003ctag\u003e[\u003cother tags\u003e]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"|1\" + \"|#Fruit #Food\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"3) Reduces the quantity in the item identified by the index number. \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"Format: delete|\u003cindex\u003e|\u003cquantity\u003e (quantity must be positive and less than item\u0027s quantity.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Deleted Item: %s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_DELETE_TAGS_SUCCESS \u003d \"Deleted tags from item: %s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_DELETE_TAGS_FAILURE \u003d \"Did not manage to delete any tags.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"You have specified tag(s) that are not found in item: %s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static final String MESSAGE_DELETE_QUANTITY_SUCCESS \u003d \"Reduced quantity by %s from item: %s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static final String MESSAGE_DELETE_QUANTITY_FAILURE \u003d \"Invalid quantity specified. \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"Quantity must be positive and less than item\u0027s quantity.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_DELETE_FAILURE \u003d \"Did not manage to delete anything\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private final Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private final DeleteMode mode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tagSet \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.mode \u003d DeleteMode.ITEM;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public DeleteCommand(Index targetIndex, Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tagSet \u003d tagSet;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.mode \u003d DeleteMode.TAGS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public DeleteCommand(Index targetIndex, Quantity quantity) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.tagSet \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.mode \u003d DeleteMode.QUANTITY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "        List\u003cItem\u003e lastShownList \u003d model.getFilteredItemList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (this.targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item targetItem \u003d lastShownList.get(this.targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        switch(this.mode) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        case ITEM:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            model.deleteItem(targetItem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, targetItem));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        case TAGS:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            assert this.tagSet !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            Item newTaggedItem \u003d removeTagsFromItem(targetItem, this.tagSet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            model.setItem(targetItem, newTaggedItem);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TAGS_SUCCESS, targetItem));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case QUANTITY:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            assert this.quantity !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            Item newQuantityItem \u003d reduceItemQuantity(targetItem, quantity);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            model.setItem(targetItem, newQuantityItem);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            /* TODO: Transfer to To-Buy-List*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (Quantity.quantityIsZero(newQuantityItem.getQuantity())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                model.deleteItem(targetItem);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    String.format(MESSAGE_DELETE_QUANTITY_SUCCESS, quantity.toString(), targetItem));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNKNOWN_DELETE_MODE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Removes Tag(s) from target item."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @param targetItem The specified item that tags are to be removed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @param tagSet Set of tags to remove."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @return Original item with removed tags."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private Item removeTagsFromItem(Item targetItem, Set\u003cTag\u003e tagSet) throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e originalTags \u003d targetItem.getTags();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        if (!originalTags.containsAll(tagSet)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        for (Tag tag: originalTags) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            if (!tagSet.contains(tag)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                newTags.add(tag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        targetItem.setTags(newTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return targetItem;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Reduces item\u0027s quantity by amount specified."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param targetItem Item which amount will be reduced."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param reduceByQuantity Quantity to be reduced."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Item reduceItemQuantity(Item targetItem, Quantity reduceByQuantity) throws CommandException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                                                                                       ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity originalQuantity \u003d targetItem.getQuantity();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (originalQuantity.isLessThan(reduceByQuantity)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_QUANTITY_FAILURE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity updatedQuantity \u003d originalQuantity.deductQuantity(reduceByQuantity);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        targetItem.setQuantity(updatedQuantity);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return targetItem;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            DeleteCommand other \u003d (DeleteCommand) obj;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return this.targetIndex.equals(other.targetIndex)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                    \u0026\u0026 this.mode.equals(other.mode);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.targetIndex.hashCode();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 66,
      "liawsy": 49,
      "febee99": 2,
      "JermyTan": 22,
      "-": 30
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Xpire as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Searches and displays all items whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches and displays all items whose names \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"or tag(s) contain any of the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Searching for names allows partial match while searching for tags requires exact match.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Format: search|\u003ckeyword\u003e[|\u003cother keywords\u003e]... (keyword(s) for tags must be prefixed with a \u0027#\u0027)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"|apple|#fridge|banana\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public SearchCommand(ContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model.updateFilteredItemList(this.predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(String.format(Messages.MESSAGE_ITEMS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "                model.getFilteredItemList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (model.getFilteredItemList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "            predicate.getKeywords().forEach(s -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "                if (s.startsWith(\"#\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    sb.append(StringUtil.findSimilarItemTags(s, model.getAllItemTags()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    sb.append(StringUtil.findSimilarItemNames(s, model.getAllItemNames()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "            });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof SearchCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            SearchCommand other \u003d (SearchCommand) obj;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.predicate.equals(other.predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.predicate.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 13,
      "JermyTan": 29,
      "-": 22
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/SetReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Changes the reminder threshold for an item identified with its displayed index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class SetReminderCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set reminder\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the reminder threshold of the item \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"identified with its displayed index. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Existing threshold will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Format: set reminder|\u003cindex\u003e|\u003cthreshold\u003e (both index and threshold must be positive numbers)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"|1|7\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SET \u003d \"Reminder for item %d has been set to %s day(s)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \" before expiry date\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_RESET \u003d \"Disabled reminder for item %d\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private final ReminderThreshold threshold;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param index Index of the item in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param threshold New threshold."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public SetReminderCommand(Index index, ReminderThreshold threshold) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireAllNonNull(index, threshold);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cItem\u003e lastShownList \u003d model.getFilteredItemList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (this.index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Item itemToSetReminder \u003d lastShownList.get(this.index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item editedItem \u003d itemToSetReminder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        editedItem.setReminderThreshold(this.threshold);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        model.setItem(itemToSetReminder, editedItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model.updateFilteredItemList(Model.PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new CommandResult(this.threshold.getValue() \u003e 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                ? String.format(MESSAGE_SUCCESS_SET, this.index.getOneBased(), this.threshold)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                : String.format(MESSAGE_SUCCESS_RESET, this.index.getOneBased()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof SetReminderCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            SetReminderCommand other \u003d (SetReminderCommand) obj;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return this.index.equals(other.index) \u0026\u0026 this.threshold.equals(other.threshold);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 61,
      "xiaoyu-nus": 17
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Sorts the items in the displayed list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all items according to the specified key.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"If key is \u0027name\u0027, items will be sorted according to their names in alphabetical order.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"If key is \u0027date\u0027, items will be sorted according to their expiry dates in chronological order.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Format: sort|\u003ckey\u003e (where key is \u0027name\u0027 or \u0027date\u0027)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"|name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all items\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final MethodOfSorting method;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public SortCommand(MethodOfSorting method) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.method \u003d method;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model.sortItemList(this.method);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "        model.updateFilteredItemList(Model.PREDICATE_SORT_ALL_ITEMS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \" by \" + method);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else if (!(obj instanceof SortCommand)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "            SortCommand other \u003d (SortCommand) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return this.method.equals(other.method);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return this.method.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 39,
      "JermyTan": 13
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/TagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Adds tag(s) to item identified using its displayed index from the expiry date tracker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Private enum to indicate whether command shows all tags or tags and item"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    enum TagMode { SHOW, TAG }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \": Tags the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"Format: \u003cindex\u003e|\u003ctag\u003e[\u003cother tags\u003e]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"(index must be a positive integer; each tag must be prefixed with a \u0027#\u0027)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"|1|#Food #Fruit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_TAG_ITEM_SUCCESS \u003d \"Tagged item: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_TAG_SHOW_SUCCESS \u003d \"All item tags:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_TAG_SHOW_FAILURE \u003d \"There are no tags.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private final TagItemDescriptor tagItemDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private final TagMode mode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public TagCommand(Index index, TagItemDescriptor tagItemDescriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tagItemDescriptor \u003d new TagItemDescriptor(tagItemDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.mode \u003d TagMode.TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public TagCommand(Index index, String[] str) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tagItemDescriptor \u003d new TagItemDescriptor();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tagItemDescriptor.setTags(Arrays.stream(str).map(Tag::new).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.mode \u003d TagMode.TAG;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public TagCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tagItemDescriptor \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.mode \u003d TagMode.SHOW;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public TagMode getMode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return this.mode;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        List\u003cItem\u003e lastShownList \u003d model.getFilteredItemList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        switch (this.mode) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        case TAG:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            if (this.index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Item itemToTag \u003d lastShownList.get(this.index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Item taggedItem \u003d createTaggedItem(itemToTag, this.tagItemDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            model.setItem(itemToTag, taggedItem);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_TAG_ITEM_SUCCESS, taggedItem));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        case SHOW:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            List\u003cItem\u003e itemList \u003d model.getAllItemList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            itemList.forEach(item -\u003e tagSet.addAll(item.getTags()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            if (tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                return new CommandResult(MESSAGE_TAG_SHOW_FAILURE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            List\u003cString\u003e tagNameList \u003d tagSet.stream().map(Tag::toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            StringBuilder str \u003d appendTagsToFeedback(tagNameList, new StringBuilder(MESSAGE_TAG_SHOW_SUCCESS));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return new CommandResult(str.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Appends tags to user feedback to show all tags."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @param tagNameList List of tag names."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @param str StringBuilder to append to."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static StringBuilder appendTagsToFeedback(List\u003cString\u003e tagNameList, StringBuilder str) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        for (String tagName: tagNameList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            str.append(\"\\n\").append(tagName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Creates and returns a {@code Item} with the details of {@code itemToTag}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * edited with {@code tagItemDescriptor}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static Item createTaggedItem(Item itemToTag, TagItemDescriptor tagItemDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assert itemToTag !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d updateTags(itemToTag, tagItemDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return new Item(itemToTag.getName(), itemToTag.getExpiryDate(), itemToTag.getQuantity(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                updatedTags, itemToTag.getReminderThreshold());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Returns an updated set of tags."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @param itemToTag Item to be tagged."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @param tagItemDescriptor Descriptor that specifies additional tags to be added on or tags to be cleared."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @return Set containing updated tags."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static Set\u003cTag\u003e updateTags(Item itemToTag, TagItemDescriptor tagItemDescriptor) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.addAll(itemToTag.getTags());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.addAll(tagItemDescriptor.getTags());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return set;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return this.tagItemDescriptor.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        if (!(other instanceof TagCommand)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        TagCommand e \u003d (TagCommand) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        if (mode.equals(TagMode.SHOW)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return mode.equals(e.mode);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                \u0026\u0026 tagItemDescriptor.equals(e.tagItemDescriptor)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                \u0026\u0026 mode.equals(e.mode);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Stores the tags to edit the item with."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static class TagItemDescriptor {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        public TagItemDescriptor() {}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        public TagItemDescriptor(TagItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            if (tags !\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                TreeSet\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                set.addAll(tags);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                this.tags \u003d set;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                this.tags \u003d null;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        public Set\u003cTag\u003egetTags() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return (this.tags !\u003d null) ? Collections.unmodifiableSet(this.tags) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            if (!(other instanceof TagItemDescriptor)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            TagItemDescriptor e \u003d (TagItemDescriptor) other;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 208,
      "JermyTan": 11
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Display all items to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displayed all items\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model.updateFilteredItemList(Model.PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 7,
      "-": 15
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiryDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String[] arguments \u003d args.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (!areArgumentsPresent(arguments)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Item item;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Name name \u003d ParserUtil.parseName(arguments[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(arguments[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (hasQuantity(arguments)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            Quantity quantity \u003d ParserUtil.parseQuantity(arguments[2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            item \u003d new Item(name, expiryDate, quantity);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            item \u003d new Item(name, expiryDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return new AddCommand(item);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static boolean areArgumentsPresent(String...arguments) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return arguments.length \u003e\u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static boolean hasQuantity(String...arguments) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return arguments.length \u003e\u003d 3 \u0026\u0026 !arguments[2].equals(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "liawsy": 20,
      "JermyTan": 9,
      "-": 16,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/CheckCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.CheckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiringSoonPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ReminderThresholdExceededPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Parses input arguments and creates a new CheckCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CheckCommandParser implements Parser\u003cCheckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final int MAX_VALUE \u003d 36500;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Parses the given {@code String} of argument in the context of the CheckCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * and returns a CheckCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CheckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CheckCommand(new ReminderThresholdExceededPredicate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!StringUtil.isNonNegativeInteger(trimmedArgs)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (StringUtil.isExceedingMaxValue(trimmedArgs, MAX_VALUE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new CheckCommand(new ExpiringSoonPredicate(Integer.parseInt(trimmedArgs)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 16,
      "xiaoyu-nus": 26
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String[] splitArgs \u003d args.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            index \u003d ParserUtil.parseIndex(splitArgs[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (containsTag(splitArgs)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return deleteTagsCommand(index, splitArgs[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } else if (containsQuantity(splitArgs)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return deleteQuantityCommand(index, splitArgs[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } else if (splitArgs.length \u003e 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return deleteItemCommand(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean containsTag (String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return args.length \u003e 1 \u0026\u0026 args[1].contains(\"#\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean containsQuantity(String[] args) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return (args.length \u003d\u003d 2) \u0026\u0026 isIntegerType(args[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns true if given argument is of type integer."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean isIntegerType(String arg) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            Integer.parseInt(arg);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private DeleteCommand deleteItemCommand(Index index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private DeleteCommand deleteTagsCommand(Index index, String arg) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d ParserUtil.parseTagsFromInput(arg);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return new DeleteCommand(index, set);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private DeleteCommand deleteQuantityCommand(Index index, String arg) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity newQuantity \u003d ParserUtil.parseQuantity(arg);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return new DeleteCommand(index, newQuantity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 20,
      "liawsy": 31,
      "JermyTan": 6,
      "-": 19,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Parses a {@code String expiryDate} into an {@code ExpiryDate}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static ExpiryDate parseExpiryDate(String expiryDate) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String trimmedDate \u003d expiryDate.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (expiryDate.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new ParseException(ExpiryDate.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (!ExpiryDate.isValidFormatExpiryDate(trimmedDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new ParseException(ExpiryDate.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (!ExpiryDate.isValidRangeExpiryDate(trimmedDate)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new ParseException(ExpiryDate.MESSAGE_CONSTRAINTS_RANGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return new ExpiryDate(trimmedDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Parses a {@code String quantity} into an {@code Quantity}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (!Quantity.isValidInputQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String sentenceCaseTag \u003d StringUtil.convertToSentenceCase(trimmedTag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return new Tag(sentenceCaseTag);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            String trimmedTag \u003d tagName.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            if (!trimmedTag.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                tagSet.add(parseTag(trimmedTag));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Parses a {@code String key} into a {@code MethodOfSorting}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws ParseException if the given {@code key} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static MethodOfSorting parseMethodOfSorting(String key) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String trimmedMethodOfSorting \u003d key.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (!MethodOfSorting.isValidMethodOfSorting(trimmedMethodOfSorting)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "febee99"
        },
        "content": "            Set\u003cString\u003e allowedArgs \u003d new TreeSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    MethodOfSorting.SORT_NAME, MethodOfSorting.SORT_DATE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String output \u003d StringUtil.findSimilar(key, allowedArgs, 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new ParseException(MethodOfSorting.MESSAGE_CONSTRAINTS + output);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return new MethodOfSorting(trimmedMethodOfSorting);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Parses a {@code String reminderThreshold} into an {@code }."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws ParseException if the given {@code reminderThreshold} is invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static ReminderThreshold parseReminderThreshold(String reminderThreshold) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(reminderThreshold);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String trimmedReminderThreshold \u003d reminderThreshold.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!ReminderThreshold.isValidReminderThreshold(trimmedReminderThreshold)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new ParseException(ReminderThreshold.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new ReminderThreshold(trimmedReminderThreshold);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Parses tag from user input in the form of \"#Tag1 #Tag2\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @param arg Argument that contains tags."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @return Set containing parsed tags from user input."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @throws ParseException if tags cannot be parsed properly."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static Set\u003cTag\u003e parseTagsFromInput(String arg) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String tagInput \u003d arg.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String[] tags \u003d tagInput.split(\"#\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String[] copiedTags;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            copiedTags \u003d Arrays.copyOfRange(tags, 1, tags.length); //to get rid of empty string"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set \u003d ParserUtil.parseTags(Arrays.asList(copiedTags));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return set;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 32,
      "liawsy": 18,
      "febee99": 29,
      "JermyTan": 30,
      "-": 65,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/SearchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.stream(trimmedArgs.split(\"\\\\|\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .map(String::trim)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .filter(keyword -\u003e !keyword.isEmpty())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .map(keyword -\u003e keyword.startsWith(\"#\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                ? \"#\" + StringUtil.convertToSentenceCase(keyword.substring(1))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                : keyword.toLowerCase())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new SearchCommand(new ContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 39
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/SetReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_REMINDER_THRESHOLD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.SetReminderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Parses input arguments and creates a new SetReminderCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class SetReminderCommandParser implements Parser\u003cSetReminderCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String REGEX \u003d \"\\\\|\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetReminderCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * and returns a SetCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public SetReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ReminderThreshold threshold;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (args.split(REGEX).length \u003c 2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                    SetReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args.split(REGEX)[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    SetReminderCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            threshold \u003d ParserUtil.parseReminderThreshold(args.split(REGEX)[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_REMINDER_THRESHOLD,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                    SetReminderCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new SetReminderCommand(index, threshold);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 36,
      "xiaoyu-nus": 17
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        MethodOfSorting method \u003d ParserUtil.parseMethodOfSorting(trimmedArgs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return new SortCommand(method);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 22,
      "JermyTan": 5
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/TagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Parses input arguments and creates a new TagCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String[] splitArgs \u003d args.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        if (splitArgs[0].isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return new TagCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            index \u003d ParserUtil.parseIndex(splitArgs[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new ParseException(String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    .format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        TagCommand.TagItemDescriptor tagItemDescriptor \u003d new TagCommand.TagItemDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        if (hasTags(splitArgs)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            set \u003d ParserUtil.parseTagsFromInput(splitArgs[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            throw new ParseException(String"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                    .format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        tagItemDescriptor.setTags(set);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return new TagCommand(index, tagItemDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static boolean hasTags(String[] arguments) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return arguments.length \u003e 1 \u0026\u0026 arguments[1].trim().split(\"#\").length \u003e 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 46,
      "JermyTan": 9
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/XpireParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.CheckCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.SetReminderCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class XpireParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // Removes leading and trailing white spaces and trailing bars."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String trimmedUserInput \u003d userInput.trim()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                                           .replaceAll(\"\\\\|+$\", \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String commandWord \u003d trimmedUserInput.split(\"\\\\|\", 2)[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (commandWord.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String arguments;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            arguments \u003d trimmedUserInput.split(\"\\\\|\", 2)[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            arguments \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return new ViewCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CheckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CheckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        case SetReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return new SetReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return parseUnknownCommandWord(commandWord);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Parses invalid command words to check if there were any possible input mistakes."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param command the invalid command word"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private static Command parseUnknownCommandWord(String command) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String[] allCommandWords \u003d new String[] {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": "            AddCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "            ClearCommand.COMMAND_WORD, SearchCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "            ViewCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "            HelpCommand.COMMAND_WORD, SortCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "febee99"
        },
        "content": "            SetReminderCommand.COMMAND_WORD, TagCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": "            CheckCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "febee99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Set\u003cString\u003e allCommandsSet \u003d new TreeSet\u003c\u003e(Arrays.asList(allCommandWords));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": "        sb.append(StringUtil.findSimilar(command, allCommandsSet, 1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": "        throw new ParseException(sb.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 3,
      "febee99": 32,
      "JermyTan": 39,
      "-": 39,
      "xiaoyu-nus": 3
    }
  },
  {
    "path": "src/main/java/io/xpire/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/io/xpire/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SORT_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns the user prefs\u0027 xpire file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    Path getXpireFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Sets the user prefs\u0027 xpire file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void setXpireFilePath(Path xpireFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Replaces xpire data with the data in {@code xpire}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void setXpire(ReadOnlyXpire xpire);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /** Returns the xpire */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    ReadOnlyXpire getXpire();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns true if an item with the same identity as {@code item} exists in xpire."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "    boolean hasItem(Item item);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Deletes the given item."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * The item must exist in xpire."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    void deleteItem(Item target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Adds the given item."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * {@code item} must not already exist in xpire."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "    void addItem(Item item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Replaces the given item {@code target} with {@code editedItem}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * {@code target} must exist in xpire."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in xpire."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "    void setItem(Item target, Item editedItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Sorts the filtered item list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param method The method of sorting."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "    void sortItemList(MethodOfSorting method);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns a set containing all existing names of items in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The set of all existing names."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "    Set\u003cName\u003e getAllItemNames();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns a set containing all existing tags of items in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The set of all existing tags."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": "    Set\u003cTag\u003e getAllItemTags();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered item list */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Returns a list of all the items."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @return List of all items."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    List\u003cItem\u003e getAllItemList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Updates the filter of the filtered item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "febee99"
        },
        "content": "    void updateFilteredItemList(Predicate\u003cItem\u003e predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 8,
      "febee99": 39,
      "JermyTan": 17,
      "-": 59
    }
  },
  {
    "path": "src/main/java/io/xpire/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Represents the in-memory model of the xpire data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final Xpire xpire;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Initializes a ModelManager with the given xpire and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public ModelManager(ReadOnlyXpire xpire, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CollectionUtil.requireAllNonNull(xpire, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        logger.fine(\"Initializing with xpire: \" + xpire + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpire \u003d new Xpire(xpire);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.filteredItems \u003d new FilteredList\u003c\u003e(this.xpire.getItemList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this(new Xpire(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Path getXpireFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.userPrefs.getXpireFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void setXpireFilePath(Path xpireFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(xpireFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.userPrefs.setXpireFilePath(xpireFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d expiryDateTracker  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void setXpire(ReadOnlyXpire xpire) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpire.resetData(xpire);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public ReadOnlyXpire getXpire() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.xpire;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.xpire.hasItem(item);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void deleteItem(Item target) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpire.removeItem(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpire.addItem(item);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpire.setItem(target, editedItem);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Set\u003cTag\u003e getAllItemTags() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "febee99"
        },
        "content": "        List\u003cItem\u003e itemList \u003d this.xpire.getItemList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "febee99"
        },
        "content": "        itemList.forEach(item -\u003e tagSet.addAll(item.getTags()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Set\u003cName\u003e getAllItemNames() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Set\u003cName\u003e nameSet \u003d new TreeSet\u003c\u003e(Comparator.comparing(Name::toString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "febee99"
        },
        "content": "        List\u003cItem\u003e itemList \u003d this.xpire.getItemList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "febee99"
        },
        "content": "        itemList.forEach(item -\u003e nameSet.add(item.getName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return nameSet;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void sortItemList(MethodOfSorting method) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(method);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.xpire.setMethodOfSorting(method);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "febee99"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * {@code versionedXpire}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.filteredItems;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Predicate\u003c? super Item\u003e p \u003d this.filteredItems.getPredicate();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (predicate \u003d\u003d PREDICATE_SHOW_ALL_ITEMS || p \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "febee99"
        },
        "content": "            // a view command or first ever search command"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            this.filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "febee99"
        },
        "content": "            // search commands have been executed before"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "febee99"
        },
        "content": "            this.filteredItems.setPredicate(predicate.and(p));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public List\u003cItem\u003e getAllItemList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return this.xpire.getItemList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.xpire.equals(other.xpire)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.filteredItems.equals(other.filteredItems);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 7,
      "liawsy": 1,
      "febee99": 52,
      "JermyTan": 43,
      "-": 89
    }
  },
  {
    "path": "src/main/java/io/xpire/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    Path getXpireFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/io/xpire/model/ReadOnlyXpire.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Unmodifiable view of an xpire."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public interface ReadOnlyXpire {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns an unmodifiable view of the item list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    ObservableList\u003cItem\u003e getItemList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 1,
      "JermyTan": 6,
      "-": 8
    }
  },
  {
    "path": "src/main/java/io/xpire/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private Path xpireFilePath \u003d Paths.get(\"data\" , \"xpire.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        setXpireFilePath(newUserPrefs.getXpireFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Path getXpireFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.xpireFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void setXpireFilePath(Path expiryDateTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(expiryDateTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpireFilePath \u003d expiryDateTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof UserPrefs)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            UserPrefs other \u003d (UserPrefs) obj;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.guiSettings.equals(other.guiSettings) \u0026\u0026 this.xpireFilePath.equals(other.xpireFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return Objects.hash(this.guiSettings, this.xpireFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        sb.append(\"Gui Settings : \" + this.guiSettings + \"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        sb.append(\"Local data file location : \" + this.xpireFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 1,
      "JermyTan": 18,
      "-": 64
    }
  },
  {
    "path": "src/main/java/io/xpire/model/Xpire.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.SortedUniqueItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Wraps all data at xpire level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Duplicates are not allowed (by .isSameItem comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class Xpire implements ReadOnlyXpire {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final SortedUniqueItemList items \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Xpire() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Creates a Xpire object using the Items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Xpire(ReadOnlyXpire toBeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.resetData(toBeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Replaces the contents of the item list with {@code items}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.items.setItems(items);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Resets the existing data of this {@code Xpire} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void resetData(ReadOnlyXpire newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.setItems(newData.getItemList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns true if an item with the same identity as {@code item} exists in xpire."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.items.contains(item);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Adds a item to xpire."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * The item must not already exist in xpire."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.items.add(item);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Replaces the given item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * {@code target} must exist in xpire."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in xpire."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(editedItem);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.items.setItem(target, editedItem);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Removes {@code key} from this {@code Xpire}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * {@code key} must exist in xpire."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void removeItem(Item key) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.items.remove(key);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Set method of sorting."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setMethodOfSorting(MethodOfSorting method) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.items.setMethodOfSorting(method);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(this.items.asUnmodifiableObservableList().size() + \" items\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.items.asUnmodifiableObservableList().forEach(x-\u003e sb.append(x));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.items.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof Xpire)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Xpire other \u003d (Xpire) obj;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.items.equals(other.items);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.items.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 85,
      "JermyTan": 34
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/ContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.util.CollectionUtil.stringifyCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class ContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public ContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collections.sort(keywords);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        boolean keywordsInName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        boolean keywordsInTags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        for (String keyword: this.keywords) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            keywordsInName \u003d StringUtil.containsPhraseIgnoreCase(item.getName().toString(), keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            keywordsInTags \u003d keyword.startsWith(\"#\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 keyword.length() \u003e 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 new HashSet\u003c\u003e(stringifyCollection(item.getTags(), tag -\u003e tag.substring(1, tag.length() - 1)))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    .contains(keyword.substring(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            if (keywordsInName || keywordsInTags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof ContainsKeywordsPredicate)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            ContainsKeywordsPredicate other \u003d (ContainsKeywordsPredicate) obj;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.keywords.equals(other.keywords);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.keywords.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 4,
      "JermyTan": 57
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/ExpiringSoonPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code ExpiryDate} falls within the date given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class ExpiringSoonPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final int days;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public ExpiringSoonPredicate(int days) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return DateUtil.isWithinRange(this.days, DateUtil.getCurrentDate(), item.getExpiryDate().getDate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof ExpiringSoonPredicate)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            ExpiringSoonPredicate other \u003d (ExpiringSoonPredicate) obj;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.days \u003d\u003d other.days;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.days;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 22,
      "xiaoyu-nus": 16
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/ExpiryDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.DateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Represents an Item\u0027s expiry date in xpire."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFormatExpiryDate(String)} (String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ExpiryDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d/M/yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_RANGE \u003d \"Only Expiry dates that have not yet passed are accepted\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "            \"Expiry dates should only contain numbers, in the format \" + DATE_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final String EXPIRED \u003d \"Expired!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final String DAYS_LEFT \u003d \"%d day%s left\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Constructs a {@code ExpiryDate}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param expiryDate A valid expiryDate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "        AppUtil.checkArgument(isValidFormatExpiryDate(expiryDate), MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.date \u003d DateUtil.convertStringToDate(expiryDate, DATE_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns true if a given string is a valid expiry date with format d/M/yyyy."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static boolean isValidFormatExpiryDate(String date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return DateUtil.convertStringToDate(date, DATE_FORMAT) !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns true if a given string is a valid expiry date that has not yet passed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static boolean isValidRangeExpiryDate(String date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "        LocalDate d \u003d DateUtil.convertStringToDate(date, DATE_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return d.isAfter(DateUtil.getCurrentDate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public String getStatus(LocalDate current) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        long offset \u003d DateUtil.getOffsetDays(current, this.date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return offset \u003e 0 ? String.format(DAYS_LEFT, offset, offset \u003d\u003d 1 ? \"\" : \"s\") : EXPIRED;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        long offset \u003d DateUtil.getOffsetDays(DateUtil.getCurrentDate(), this.date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return String.valueOf(offset);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return Long.parseLong(getStatus()) \u003c\u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return DateUtil.convertDateToString(this.date, DATE_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public String toStringWithCountdown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return String.format(\"%s (%s)\", this.toString(), this.getStatus(DateUtil.getCurrentDate()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof ExpiryDate)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            ExpiryDate other \u003d (ExpiryDate) obj;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.date.equals(other.date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 53,
      "JermyTan": 28,
      "xiaoyu-nus": 12
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static io.xpire.model.item.Quantity.DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.model.item.ReminderThreshold.DEFAULT_THRESHOLD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Represents a Item in Xpire."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private Quantity quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private ReminderThreshold reminderThreshold \u003d new ReminderThreshold(DEFAULT_THRESHOLD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Only called in Tag and Edit commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Item(Name name, ExpiryDate expiryDate, Quantity quantity, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, expiryDate, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Tags are optional."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Item(Name name, ExpiryDate expiryDate, Quantity quantity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, expiryDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Quantity is optional."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Item(Name name, ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, expiryDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Constructor with all parameters for ItemBuilder class. (Used in testing)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public Item(Name name, ExpiryDate expiryDate, Quantity quantity, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                ReminderThreshold reminderThreshold) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, expiryDate, tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.reminderThreshold \u003d reminderThreshold;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public Item(Item item) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.name \u003d item.getName();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.expiryDate \u003d item.getExpiryDate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.quantity \u003d item.getQuantity();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tags \u003d item.getTags();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.reminderThreshold \u003d item.getReminderThreshold();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ExpiryDate getExpiryDate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.expiryDate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return this.quantity;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Sets and overrides the quantity."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param newQuantity Quantity to be updated."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void setQuantity(Quantity newQuantity) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d newQuantity;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return Collections.unmodifiableSet(this.tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Sets and overrides the tags."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @param tags tags."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns the reminder threshold."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * @return {@code ReminderThreshold} object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public ReminderThreshold getReminderThreshold() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.reminderThreshold;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Sets and overrides the reminder threshold."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param reminderThreshold reminder threshold."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void setReminderThreshold(ReminderThreshold reminderThreshold) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.reminderThreshold \u003d reminderThreshold;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns true if both items of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean isSameItem(Item other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return other !\u003d null"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.name.equals(other.name)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.expiryDate.equals(other.expiryDate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns {@Code true} if the item has expired."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.getExpiryDate().isExpired();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns {@Code true} if the item has a {@Code ReminderThreshold}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean hasReminderThreshold() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return !this.reminderThreshold.equals(new ReminderThreshold(DEFAULT_THRESHOLD));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns true if both items have the same identity and data fields."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof Item)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Item other \u003d (Item) obj;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.name.equals(other.name)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.expiryDate.equals(other.expiryDate)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.tags.equals(other.tags)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    \u0026\u0026 this.quantity.equals(other.quantity)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    \u0026\u0026 this.reminderThreshold.equals(other.reminderThreshold);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return Objects.hash(this.name, this.expiryDate, this.tags, this.quantity, this.reminderThreshold);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "febee99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        builder.append(this.name.toString() + \"\\n\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .append(\"Expiry date: \" + this.expiryDate.toStringWithCountdown() + \"\\n\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .append(\"Quantity: \" + this.quantity.toString());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        if (!this.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            builder.append(\"\\nTags: \");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            this.getTags().forEach((builder::append));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 40,
      "liawsy": 40,
      "febee99": 66,
      "JermyTan": 32,
      "xiaoyu-nus": 27
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Represents an Item\u0027s name in xpire."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * The first character of the item name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof Name)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Name other \u003d (Name) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.name.equals(other.name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 1,
      "JermyTan": 18,
      "-": 42
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/Quantity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * Represents the quantity of an item."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * Users are only allowed to key in positive integers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * Internally, there can be quantity of value 0."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * Guarantees: immutable and valid in {@link #isValidInputQuantity(String test)}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            \"Quantity added should be a positive integer and should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static final int MAX_VALUE \u003d 100000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static final String INTERNAL_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            \"Quantity added should be a non-negative integer and should not be blank\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param quantity A valid input quantity, i.e. positive integer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        requireNonNull(trimmedQuantity);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        AppUtil.checkArgument(isValidInputQuantity(trimmedQuantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.quantity \u003d Integer.parseInt(trimmedQuantity);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param quantity A valid quantity, i.e. a non-negative integer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Quantity(String quantity, boolean internalCall) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (internalCall) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            AppUtil.checkArgument(isValidQuantity(trimmedQuantity), INTERNAL_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            this.quantity \u003d Integer.parseInt(trimmedQuantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Quantity(int quantity) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (quantity \u003c 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return StringUtil.isNonNegativeInteger(test) \u0026\u0026 Integer.parseInt(test) \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns true if a given input string is a valid quantity."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns true if a given input string is a valid quantity and lies below the maximum value."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static boolean isValidInputQuantity(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return StringUtil.isNonZeroUnsignedInteger(test) \u0026\u0026 Integer.parseInt(test) \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns true if quantity is zero."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static boolean quantityIsZero(Quantity quantity) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return quantity.quantity \u003d\u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public boolean isLessThan(Quantity deductAmount) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return this.quantity \u003c deductAmount.quantity;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Reduces quantity by specified amount."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param deductAmount Amount to be deducted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return Quantity to be deducted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws ParseException if new quantity is negative."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Quantity deductQuantity(Quantity deductAmount) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity newQuantity;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        newQuantity \u003d new Quantity(this.quantity - deductAmount.quantity);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return newQuantity;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"\" + this.quantity;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } else if (!(obj instanceof Quantity)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            Quantity other \u003d (Quantity) obj;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return this.quantity \u003d\u003d other.quantity;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return this.quantity;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 110,
      "xiaoyu-nus": 7
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/ReminderDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.util.DateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Represents an Item\u0027s reminder date in the expiry date tracker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class ReminderDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d/M/yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a {@code ReminderDate}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param date A valid ReminderDate."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public ReminderDate(LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns true if a given string is a valid expiry date with format d/M/yyyy."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static boolean isValidReminderDate(String date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return DateUtil.convertStringToDate(date, DATE_FORMAT) !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.date.format(DATE_FORMATTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                || (other instanceof ReminderDate // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                \u0026\u0026 this.date.equals(((ReminderDate) other).date)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.date.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 4,
      "xiaoyu-nus": 54
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/ReminderThreshold.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Represents an Item\u0027s reminder threshold."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidReminderThreshold(String)}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class ReminderThreshold {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Reminder threshold should be a non-negative integer.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String DEFAULT_THRESHOLD \u003d \"0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final int MAX_VALUE \u003d 36500;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final int reminderThreshold;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a {@code ReminderThreshold}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param reminderThreshold A valid reminder threshold."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public ReminderThreshold(String reminderThreshold) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(reminderThreshold);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        AppUtil.checkArgument(isValidReminderThreshold(reminderThreshold), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.reminderThreshold \u003d Integer.parseInt(reminderThreshold);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns true if a given integer is a valid reminder threshold."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static boolean isValidReminderThreshold(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return StringUtil.isNonNegativeInteger(test) \u0026\u0026 (!StringUtil.isExceedingMaxValue(test, MAX_VALUE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.reminderThreshold;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean isDefault() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.reminderThreshold \u003d\u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return \"\" + this.reminderThreshold;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof ReminderThreshold)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            ReminderThreshold other \u003d (ReminderThreshold) obj;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.reminderThreshold \u003d\u003d other.reminderThreshold;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.reminderThreshold;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "liawsy": 1,
      "JermyTan": 31,
      "xiaoyu-nus": 36
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/ReminderThresholdExceededPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code ExpiryDate} falls within the date given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class ReminderThresholdExceededPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return DateUtil.isWithinRange(item.getReminderThreshold().getValue(),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                DateUtil.getCurrentDate(),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                item.getExpiryDate().getDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return obj instanceof ReminderThresholdExceededPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 14,
      "xiaoyu-nus": 13
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/SortedUniqueItemList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": " * An item is considered unique by comparing using {@code Item#isSameItem(Item)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": " * items uses Item#isSameItem(Item) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": " * unique in terms of identity in the SortedUniqueItemList. However, the removal of a item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": " * @see Item#isSameItem(Item)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class SortedUniqueItemList implements Iterable\u003cItem\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private MethodOfSorting methodOfSorting \u003d new MethodOfSorting(\"name\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final SortedList\u003cItem\u003e sortedInternalList \u003d new SortedList\u003c\u003e(internalList, methodOfSorting.getComparator());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "            FXCollections.unmodifiableObservableList(this.sortedInternalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean contains(Item toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.internalList.stream().anyMatch(toCheck::isSameItem);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Adds an item to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void add(Item toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "        methodOfSorting \u003d new MethodOfSorting(\"name\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Replaces the item { @code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        int index \u003d this.internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!target.isSameItem(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void remove(Item toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!this.internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItems(SortedUniqueItemList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.internalList.setAll(replacement.sortedInternalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CollectionUtil.requireAllNonNull(items);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.internalList.setAll(items);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Set method of sorting."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setMethodOfSorting(MethodOfSorting method) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.methodOfSorting \u003d method;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.sortedInternalList.setComparator(methodOfSorting.getComparator());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ObservableList\u003cItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Iterator\u003cItem\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return this.sortedInternalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else if (!(obj instanceof SortedUniqueItemList)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "febee99"
        },
        "content": "            SortedUniqueItemList other \u003d (SortedUniqueItemList) obj;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return this.internalUnmodifiableList.equals(other.internalUnmodifiableList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return this.internalUnmodifiableList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean itemsAreUnique(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return items.size() \u003d\u003d items.stream().distinct().count();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 1,
      "febee99": 117,
      "JermyTan": 30
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/exceptions/DuplicateItemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "        super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 4,
      "JermyTan": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/exceptions/ItemNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "febee99": 5,
      "JermyTan": 1
    }
  },
  {
    "path": "src/main/java/io/xpire/model/item/sort/MethodOfSorting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Represents a MethodOfSorting in the expiry date tracker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidMethodOfSorting(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class MethodOfSorting {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sorting can only be done by \u0027name\u0027 or \u0027date\u0027.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String SORT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String SORT_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Comparator\u003cItem\u003e nameSorter \u003d Comparator.comparing(l-\u003el.getName().toString(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Comparator\u003cItem\u003e dateSorter \u003d Comparator.comparing(l-\u003el.getExpiryDate().getDate(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "            Comparator.nullsFirst(Comparator.naturalOrder()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Comparator\u003cItem\u003enameThenDateSorter \u003d nameSorter.thenComparing(dateSorter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final String method;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Constructs a {@code MethodOfSorting}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param method A valid method of sorting."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public MethodOfSorting(String method) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "        requireNonNull(method);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        AppUtil.checkArgument(isValidMethodOfSorting(method), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.method \u003d method;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns true if a given string is a valid method of sorting."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static boolean isValidMethodOfSorting(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return (test.equals(SORT_NAME) || test.equals(SORT_DATE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns a comparator for the given method of sorting."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Comparator\u003cItem\u003e getComparator() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "        switch (method) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return dateSorter;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return nameThenDateSorter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns the string value of the method of sorting."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The string representation of the method of sorting."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.method;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else if (!(obj instanceof MethodOfSorting)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "            MethodOfSorting other \u003d (MethodOfSorting) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return this.method.equals(other.method);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return method.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 3,
      "febee99": 71,
      "JermyTan": 6
    }
  },
  {
    "path": "src/main/java/io/xpire/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Represents a Tag in the expiry date tracker. Tags are in Sentence-Case when parsed in."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric and start with #\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else if (!(obj instanceof Tag)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Tag other \u003d (Tag) obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return this.tagName.equals(other.tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.tagName.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return \"[\" + this.tagName + \"]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 4,
      "JermyTan": 19,
      "-": 40
    }
  },
  {
    "path": "src/main/java/io/xpire/model/tag/TagComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "package io.xpire.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Comparator which specifies the lexicographical ordering of tags"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class TagComparator implements Comparator\u003cTag\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public int compare(Tag o1, Tag o2) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return o1.getTagName().compareTo(o2.getTagName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 15
    }
  },
  {
    "path": "src/main/java/io/xpire/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiryDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Contains utility methods for populating {@code Xpire} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static Item[] getSampleItems() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return new Item[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            new Item(new Name(\"Ice Cream\"), new ExpiryDate(\"12/10/2019\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new Quantity(\"1\"), getTagSet(\"Food\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            new Item(new Name(\"Jeremy Vaseline\"), new ExpiryDate(\"30/06/2022\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new Quantity(\"10\"), getTagSet(\"Moisturiser\", \"Lube\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static ReadOnlyXpire getSampleXpire() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire sampleXpire \u003d new Xpire();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (Item sampleItem : getSampleItems()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            sampleXpire.addItem(sampleItem);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return sampleXpire;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .map(StringUtil::convertToSentenceCase)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 5,
      "liawsy": 1,
      "febee99": 3,
      "JermyTan": 14,
      "-": 24
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/JsonAdaptedItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Jackson-friendly version of {@link Item}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "class JsonAdaptedItem {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final String expiryDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private final String reminderThreshold;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Constructs a {@code JsonAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public JsonAdaptedItem(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                           @JsonProperty(\"expiryDate\") String expiryDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                           @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                           @JsonProperty(\"reminderThreshold\") String reminderThreshold,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                           @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.reminderThreshold \u003d reminderThreshold;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Converts a given {@code Item} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public JsonAdaptedItem(Item source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.expiryDate \u003d source.getExpiryDate().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.reminderThreshold \u003d source.getReminderThreshold().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.tags.addAll(source"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .getTags()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Item toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        final Name modelName \u003d new Name(this.name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (this.expiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    ExpiryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (!ExpiryDate.isValidFormatExpiryDate(this.expiryDate)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new IllegalValueException(ExpiryDate.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        final ExpiryDate modelExpiryDate \u003d new ExpiryDate(this.expiryDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (this.quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (!Quantity.isValidInputQuantity(this.quantity)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(this.quantity);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (this.reminderThreshold \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    ReminderThreshold.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!ReminderThreshold.isValidReminderThreshold(this.reminderThreshold)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new IllegalValueException(ReminderThreshold.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        final ReminderThreshold modelReminderThreshold \u003d new ReminderThreshold(this.reminderThreshold);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        final List\u003cTag\u003e itemTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        for (JsonAdaptedTag tag : this.tags) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            itemTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        modelTags.addAll(itemTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Item item \u003d new Item(modelName, modelExpiryDate, modelQuantity, modelTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        item.setReminderThreshold(modelReminderThreshold);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 4,
      "liawsy": 15,
      "febee99": 59,
      "JermyTan": 38,
      "xiaoyu-nus": 6
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.tagName \u003d StringUtil.convertToSentenceCase(tagName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.tagName \u003d StringUtil.convertToSentenceCase(source.getTagName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (!Tag.isValidTagName(this.tagName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new Tag(this.tagName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 9,
      "-": 40
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/JsonSerializableXpire.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * An Immutable Xpire that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "@JsonRootName(value \u003d \"xpire\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "class JsonSerializableXpire {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Items list contains duplicate item(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final List\u003cJsonAdaptedItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Constructs a {@code JsonSerializableXpire} with the given items."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public JsonSerializableXpire(@JsonProperty(\"items\") List\u003cJsonAdaptedItem\u003e items) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.items.addAll(items);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Converts a given {@code ReadOnlyXpire} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableXpire}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public JsonSerializableXpire(ReadOnlyXpire source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        items.addAll(source.getItemList().stream().map(JsonAdaptedItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Converts this expiry date tracker into the model\u0027s {@code ExpiryDateTracker} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Xpire toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire xpire \u003d new Xpire();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (JsonAdaptedItem jsonAdaptedItem : items) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "            Item item \u003d jsonAdaptedItem.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            if (xpire.hasItem(item)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            xpire.addItem(item);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return xpire;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 42,
      "JermyTan": 18
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.readUserPrefs(this.filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, this.filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 8,
      "-": 39
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/JsonXpireStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * A class to access Xpire data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class JsonXpireStorage implements XpireStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonXpireStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public JsonXpireStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Path getXpireFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Optional\u003cReadOnlyXpire\u003e readXpire() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return readXpire(this.filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Similar to {@link #readXpire()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Optional\u003cReadOnlyXpire\u003e readXpire(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Optional\u003cJsonSerializableXpire\u003e jsonTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                filePath, JsonSerializableXpire.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (jsonTracker.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return Optional.of(jsonTracker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void saveXpire(ReadOnlyXpire xpire) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        saveXpire(xpire, this.filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Similar to {@link #saveXpire(ReadOnlyXpire)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void saveXpire(ReadOnlyXpire xpire, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(xpire);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableXpire(xpire), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 80
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public interface Storage extends XpireStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    Path getXpireFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    Optional\u003cReadOnlyXpire\u003e readXpire() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void saveXpire(ReadOnlyXpire xpire) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Manages storage of Xpire data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private XpireStorage xpireStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public StorageManager(XpireStorage xpireStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpireStorage \u003d xpireStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Path getXpireFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.xpireStorage.getXpireFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Optional\u003cReadOnlyXpire\u003e readXpire() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return readXpire(this.xpireStorage.getXpireFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Optional\u003cReadOnlyXpire\u003e readXpire(Path filePath) throws"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return this.xpireStorage.readXpire(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void saveXpire(ReadOnlyXpire xpire) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        saveXpire(xpire, this.xpireStorage.getXpireFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void saveXpire(ReadOnlyXpire xpire, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.xpireStorage.saveXpire(xpire, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 1,
      "JermyTan": 23,
      "-": 54
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/io/xpire/storage/XpireStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Represents a storage for {@link Xpire}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public interface XpireStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    Path getXpireFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Returns Xpire data as a {@link ReadOnlyXpire}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    Optional\u003cReadOnlyXpire\u003e readXpire() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @see #getXpireFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    Optional\u003cReadOnlyXpire\u003e readXpire(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Saves the given {@link ReadOnlyXpire} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @param xpire cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void saveXpire(ReadOnlyXpire xpire) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @see #saveXpire(ReadOnlyXpire)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void saveXpire(ReadOnlyXpire xpire, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 47
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/CardListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CardListPanel extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String FXML \u003d \"CardListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Collection\u003cItemCard\u003e oldCardList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private VBox card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Label view;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CardListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        displayItem(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Renders items in the {@Code itemList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    void displayItem(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        card.getChildren().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Collection\u003cItemCard\u003e cardList \u003d IntStream.range(0, itemList.size())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                .mapToObj(i -\u003e new ItemCard(itemList.get(i), i + 1))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        for (ItemCard itemCard : cardList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            card.getChildren().add(itemCard.getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        oldCardList \u003d cardList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 50
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String[] possibleWords \u003d {\"sort\", \"set reminder\", \"exit\", \"clear\", \"add\", \"delete\", \"search\", \"view\", \"help\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \"check\", \"tag\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        TextFields.bindAutoCompletion(commandTextField, suggestions);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 6,
      "JermyTan": 6,
      "-": 73
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \"https://ay1920s1-cs2103t-f11-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String HELP_MESSAGE \u003d USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Hyperlink helpMessage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Opens the User Guide window in browser."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void openLink() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Desktop.getDesktop().browse(new URL(USERGUIDE_URL).toURI());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            logger.severe(\"Cannot open browser.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            logger.severe(\"Corrupted URL. Cannot open the page.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 2,
      "-": 80,
      "xiaoyu-nus": 24
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/ItemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ReminderDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * An UI component that displays information of a {@code Item}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private static final String FXML \u003d \"ItemCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private HBox box;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Label expiryDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Label reminder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private StackPane days;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ItemCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.name.setText(item.getName().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.expiryDate.setText(\"Expiry date: \" + item.getExpiryDate().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity.setText(\"Quantity: \" + item.getQuantity().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Optional\u003cReminderDate\u003e reminderDate \u003d DateUtil.getReminderDate("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                item.getExpiryDate().getDate(), item.getReminderThreshold().getValue());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (reminderDate.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            this.reminder.setText(\"Reminder: \" + reminderDate.get().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            this.reminder.setVisible(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.item.getTags()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .forEach(tag -\u003e this.tags.getChildren().add(new Label(tag.getTagName())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.status.setText(item.getExpiryDate().getStatus());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        box.setOnMouseClicked(e -\u003e box.requestFocus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.setColor();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private void setColor() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        long remainingDays \u003d Long.parseLong(item.getExpiryDate().getStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        int reminderThreshold \u003d item.getReminderThreshold().getValue();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (item.isExpired()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            days.getStyleClass().add(\"expired\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else if (item.hasReminderThreshold() \u0026\u0026 remainingDays \u003c reminderThreshold) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            days.getStyleClass().add(\"remind\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            days.getStyleClass().add(\"healthy\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ItemCard card \u003d (ItemCard) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "liawsy": 3,
      "febee99": 9,
      "JermyTan": 5,
      "-": 48,
      "xiaoyu-nus": 38
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/ItemListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ItemListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private ListView\u003cItem\u003e itemListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ItemListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 42,
      "JermyTan": 3,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/LoginForm.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import com.jfoenix.controls.JFXButton;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import com.jfoenix.controls.JFXPasswordField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import com.jfoenix.controls.JFXTextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * User login form."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class LoginForm implements Initializable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXButton register;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXTextField username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXButton login;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXPasswordField password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Authenticates user\u0027s credentials."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void handleLogin(ActionEvent event) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        final String username \u003d this.username.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        final String password \u003d this.password.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        if (username.equals(\"test\") \u0026\u0026 password.equals(\"password\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            System.out.println(\"Login successful!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            System.out.println(\"Wrong credentials\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Navigates user to sign up form."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void handleRegister(ActionEvent event) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.login.getScene().getWindow().hide();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Stage register \u003d new Stage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Parent root \u003d FXMLLoader.load(LoginForm.class.getResource(\"/view/SignUpForm.fxml\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Scene scene \u003d new Scene(root);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        register.setScene(scene);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        register.show();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        register.setResizable(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void initialize(URL location, ResourceBundle resources) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 69
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private ItemListPanel itemListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private ResultWindow resultWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private CardListPanel cardListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private StackPane cardListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private StackPane itemListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        resultWindow \u003d new ResultWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         * ResultWindow contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         * in CommandBox or ResultWindow."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // itemListPanel \u003d new ItemListPanel(logic.getFilteredItemList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // itemListPanelPlaceholder.getChildren().add(itemListPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        cardListPanel \u003d new CardListPanel(logic.getFilteredItemList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        cardListPanelPlaceholder.getChildren().add(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getXpireFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Opens the result window"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void handleResult(String feedback) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        resultWindow.setFeedbackToUser(feedback);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        resultWindow.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        resultWindow.focus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        resultWindow.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ItemListPanel getItemListPanel() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return itemListPanel;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            cardListPanel.displayItem(logic.getFilteredItemList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            cardListPanelPlaceholder.getChildren().remove(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            cardListPanelPlaceholder.getChildren().add(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            //handleResult(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            //handleResult(e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 3,
      "JermyTan": 9,
      "-": 177,
      "xiaoyu-nus": 30
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/ResultWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Allows the result to pop up."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class ResultWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String FXML \u003d \"ResultWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Label resultText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Creates a new ResultWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public ResultWindow(Stage root) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.getRoot().initStyle(StageStyle.TRANSPARENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Creates a new ResultWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public ResultWindow() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Shows the result window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        logger.fine(\"Showing feedback to user.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns true if the result window is currently being shown."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Hides the result window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Hides the result window."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void hideOnKey(KeyEvent e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        hide();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Focuses on the result window."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        resultText.setText(feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 105
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/SignUpForm.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import com.jfoenix.controls.JFXButton;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import com.jfoenix.controls.JFXPasswordField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import com.jfoenix.controls.JFXTextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * User sign up form."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class SignUpForm implements Initializable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXButton back;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXTextField username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXButton signUp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXPasswordField password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private JFXPasswordField confirmPassword;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Navigates user back to login form."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void handleBack(ActionEvent event) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        this.signUp.getScene().getWindow().hide();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Stage login \u003d new Stage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Parent root \u003d FXMLLoader.load(SignUpForm.class.getResource(\"/view/LoginForm.fxml\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Scene scene \u003d new Scene(root);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        login.setScene(scene);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        login.show();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        login.setResizable(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    void handleSignUp(ActionEvent event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void initialize(URL location, ResourceBundle resources) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 63
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/xpire_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 5,
      "-": 80,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "src/main/java/io/xpire/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    protected final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 2,
      "-": 85,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "src/main/resources/view/CardListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cVBox fx:id\u003d\"card\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "xiaoyu-nus": 10
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "JermyTan": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".list-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 15pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-text-fill: #eee;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-padding: 0px, 2px;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".card {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color:  #515658;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".card:focused {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-color: #576f78;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-border-color: #4a738a;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-border-radius: 15px;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".card:hover {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-border-color: #4a738a;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-border-radius: 15px;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".card:focused \u003e .stack-pane-days {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-color: #588fa8;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".remind {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-color: #9c892a;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".expired {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-color: #8a4857;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".healthy {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-color:  #648a48;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".stack-pane-days {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-radius:  0 15 15 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "#cardPane .label {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-pref-height: 18px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-insets: 2;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-padding: 5 1 5 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "#status .label{"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 25px;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-color: white;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "#filterField, #cardListPanel, #itemWebpage {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-box-border: transparent;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "#resultDisplayPlaceholder {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-border-color: #666 transparent transparent transparent;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-border-width: 2px;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 10;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".panel-header {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 324,
      "xiaoyu-nus": 74
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cLabel text\u003d\"Refer to the User Guide: \" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cHyperlink fx:id\u003d\"helpMessage\" text\u003d\"Hyperlink\" onAction\u003d\"#openLink\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "xiaoyu-nus": 3
    }
  },
  {
    "path": "src/main/resources/view/ItemCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" minHeight\u003d\"80.0\" style\u003d\"-fx-background-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "  \u003cGridPane prefWidth\u003d\"150.0\" style\u003d\"-fx-background-color: transparent;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cHBox fx:id\u003d\"box\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"70.0\" styleClass\u003d\"card\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "          \u003cVBox alignment\u003d\"CENTER_LEFT\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "              \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003cInsets /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cHBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expiryDate\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                           \u003cImageView fitHeight\u003d\"13.0\" fitWidth\u003d\"13.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" translateX\u003d\"-5.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                              \u003cimage\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                                 \u003cImage url\u003d\"@../images/expiry_date_icon.png\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                              \u003c/image\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                           \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                           \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003cInsets top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cLabel fx:id\u003d\"reminder\" minWidth\u003d\"80.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reminder\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"13.0\" fitWidth\u003d\"13.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" translateX\u003d\"-5.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                        \u003cImage url\u003d\"@../images/reminder_icon.png\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cLabel fx:id\u003d\"quantity\" contentDisplay\u003d\"CENTER\" minWidth\u003d\"60.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cStackPane fx:id\u003d\"days\" minWidth\u003d\"60.0\" prefWidth\u003d\"60.0\" styleClass\u003d\"stack-pane-days\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cLabel fx:id\u003d\"status\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                        \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "xiaoyu-nus": 79
    }
  },
  {
    "path": "src/main/resources/view/ItemListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003cLabel styleClass\u003d\"panel-header\" text\u003d\"View\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "  \u003cListView fx:id\u003d\"itemListView\" style\u003d\"-fx-border-color: transparent;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "-": 6,
      "xiaoyu-nus": 12
    }
  },
  {
    "path": "src/main/resources/view/LoginForm.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXButton?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXPasswordField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXTextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"400.0\" minWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #192124 #192124;\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"io.xpire.ui.LoginForm\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"60.0\" fitWidth\u003d\"75.0\" layoutX\u003d\"266.0\" layoutY\u003d\"36.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/xpire_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cLabel layoutX\u003d\"278.0\" layoutY\u003d\"84.0\" text\u003d\"Xpire\" textFill\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"28.0\" fitWidth\u003d\"33.0\" layoutX\u003d\"148.0\" layoutY\u003d\"136.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/user.png\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXTextField fx:id\u003d\"username\" focusColor\u003d\"#d3d3d3\" layoutX\u003d\"190.0\" layoutY\u003d\"136.0\" prefHeight\u003d\"28.0\" prefWidth\u003d\"222.0\" promptText\u003d\" Username\" style\u003d\"-fx-text-fill: #d3d3d3; -fx-prompt-text-fill: #b0b0b0;\" unFocusColor\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXTextField\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"39.0\" fitWidth\u003d\"33.0\" layoutX\u003d\"145.0\" layoutY\u003d\"184.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/password.png\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXPasswordField fx:id\u003d\"password\" focusColor\u003d\"#d3d3d3\" layoutX\u003d\"190.0\" layoutY\u003d\"186.0\" prefHeight\u003d\"28.0\" prefWidth\u003d\"222.0\" promptText\u003d\" Password\" style\u003d\"-fx-text-fill: #d3d3d3; -fx-prompt-text-fill: #b0b0b0;\" unFocusColor\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXPasswordField\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXButton fx:id\u003d\"login\" layoutX\u003d\"189.0\" layoutY\u003d\"247.0\" onAction\u003d\"#handleLogin\" prefHeight\u003d\"28.0\" prefWidth\u003d\"222.0\" style\u003d\"-fx-background-color: #6b9da8;\" text\u003d\"Login\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cLabel layoutX\u003d\"177.0\" layoutY\u003d\"314.0\" text\u003d\"Don\u0027t have an account?\" textFill\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXButton fx:id\u003d\"register\" layoutX\u003d\"340.0\" layoutY\u003d\"309.0\" onAction\u003d\"#handleRegister\" style\u003d\"-fx-background-color: #6b9da8;\" text\u003d\"Register\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 60
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"480.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Xpire\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    \u003cImage url\u003d\"@/images/xpire_icon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    \u003cScene fill\u003d\"#ff8d97\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cVBox style\u003d\"-fx-background-color: #383838;\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cLabel styleClass\u003d\"list-header\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cScrollPane fitToHeight\u003d\"false\" fitToWidth\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cVBox style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"cardListPanelPlaceholder\" style\u003d\"-fx-border-color: transparent; -fx-background-color: transparent;\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" alignment\u003d\"BOTTOM_CENTER\" maxHeight\u003d\"100\" minHeight\u003d\"80.0\" prefHeight\u003d\"80.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                 \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" alignment\u003d\"BOTTOM_CENTER\" prefHeight\u003d\"16.0\" style\u003d\"-fx-border-color: transparent;\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "-": 40,
      "xiaoyu-nus": 34
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "JermyTan": 1
    }
  },
  {
    "path": "src/main/resources/view/ResultWindow.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".result-window {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ".label{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     -fx-line-spacing: 10px;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 9
    }
  },
  {
    "path": "src/main/resources/view/ResultWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        \u003cScene fill\u003d\"#ffffff00\" onKeyPressed\u003d\"#hideOnKey\" onMouseClicked\u003d\"#hide\" stylesheets\u003d\"@ResultWindow.css\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cHBox minHeight\u003d\"0.0\" minWidth\u003d\"500.0\" style\u003d\"-fx-background-radius: 10; -fx-background-color: rgba(40, 40, 40, 0.8);\" styleClass\u003d\"result-window\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cLabel fx:id\u003d\"resultText\" minWidth\u003d\"543.0\" text\u003d\"Label\" textFill\u003d\"#dadada\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "xiaoyu-nus": 22
    }
  },
  {
    "path": "src/main/resources/view/SignUpForm.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXButton?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXPasswordField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXTextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"400.0\" minWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #192124 #192124;\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"io.xpire.ui.SignUpForm\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"60.0\" fitWidth\u003d\"75.0\" layoutX\u003d\"266.0\" layoutY\u003d\"36.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/xpire_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cLabel layoutX\u003d\"278.0\" layoutY\u003d\"84.0\" text\u003d\"Xpire\" textFill\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"28.0\" fitWidth\u003d\"33.0\" layoutX\u003d\"148.0\" layoutY\u003d\"136.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/user.png\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXTextField fx:id\u003d\"username\" focusColor\u003d\"#d3d3d3\" layoutX\u003d\"190.0\" layoutY\u003d\"136.0\" prefHeight\u003d\"28.0\" prefWidth\u003d\"222.0\" promptText\u003d\" Username\" style\u003d\"-fx-text-fill: #d3d3d3; -fx-prompt-text-fill: #b0b0b0;\" unFocusColor\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXTextField\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"39.0\" fitWidth\u003d\"33.0\" layoutX\u003d\"145.0\" layoutY\u003d\"184.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/password.png\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXPasswordField fx:id\u003d\"password\" focusColor\u003d\"#d3d3d3\" layoutX\u003d\"190.0\" layoutY\u003d\"186.0\" prefHeight\u003d\"28.0\" prefWidth\u003d\"222.0\" promptText\u003d\" Password\" style\u003d\"-fx-text-fill: #d3d3d3; -fx-prompt-text-fill: #b0b0b0;\" unFocusColor\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXPasswordField\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"39.0\" fitWidth\u003d\"33.0\" layoutX\u003d\"145.0\" layoutY\u003d\"237.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/confirm_password.png\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXPasswordField fx:id\u003d\"confirmPassword\" focusColor\u003d\"#d3d3d3\" layoutX\u003d\"190.0\" layoutY\u003d\"239.0\" prefHeight\u003d\"28.0\" prefWidth\u003d\"222.0\" promptText\u003d\" Confirm password\" style\u003d\"-fx-text-fill: #d3d3d3; -fx-prompt-text-fill: #b0b0b0;\" unFocusColor\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXPasswordField\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXButton fx:id\u003d\"signUp\" layoutX\u003d\"189.0\" layoutY\u003d\"304.0\" onAction\u003d\"#handleSignUp\" prefHeight\u003d\"28.0\" prefWidth\u003d\"222.0\" style\u003d\"-fx-background-color: #6b9da8;\" text\u003d\"Sign Up\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"23.0\" fitWidth\u003d\"15.0\" layoutX\u003d\"7.0\" layoutY\u003d\"14.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cImage url\u003d\"@../images/back.png\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003cJFXButton fx:id\u003d\"back\" layoutX\u003d\"7.0\" layoutY\u003d\"8.0\" onAction\u003d\"#handleBack\" text\u003d\"  Back to login\" textFill\u003d\"#d3d3d3\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "      \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 70
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cFont size\u003d\"9.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 1,
      "-": 10,
      "xiaoyu-nus": 9
    }
  },
  {
    "path": "src/test/java/io/xpire/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 4,
      "-": 132
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "        final Index fifthItemIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(fifthItemIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(fifthItemIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(fifthItemIndex.equals(fifthItemIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(fifthItemIndex.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(fifthItemIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(fifthItemIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 7,
      "JermyTan": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/xpire_icon.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 7,
      "-": 30,
      "xiaoyu-nus": 1
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void stringifyCollection_emptyCollection_noStrings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object[] objects \u003d new Object[] {};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String[] objectStrings \u003d new String[] {};"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collection\u003cObject\u003e objectCollection \u003d Arrays.asList(objects);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collection\u003cString\u003e expected \u003d Arrays.asList(objectStrings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(expected, CollectionUtil.stringifyCollection(objectCollection));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void stringifyCollection_singleElement_singleString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object obj1 \u003d new Object();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object[] objects \u003d new Object[] {obj1};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String[] objectStrings \u003d new String[] {obj1.toString()};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collection\u003cObject\u003e objectCollection \u003d Arrays.asList(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collection\u003cString\u003e expected \u003d Arrays.asList(objectStrings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(expected, CollectionUtil.stringifyCollection(objectCollection));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void stringifyCollection_multipleElements_multipleStrings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object obj1 \u003d new Object();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object obj2 \u003d new Object();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object obj3 \u003d new Object();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object[] objects \u003d new Object[] {obj1, obj2, obj3};"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String[] objectStrings \u003d new String[] {obj1.toString(), obj2.toString(), obj3.toString()};"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collection\u003cObject\u003e objectCollection \u003d Arrays.asList(objects);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collection\u003cString\u003e expected \u003d Arrays.asList(objectStrings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(expected, CollectionUtil.stringifyCollection(objectCollection));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void stringifyCollection_multipleMappersOrderSensitive_multipleMappedStrings() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object obj1 \u003d new Object();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object obj2 \u003d new Object();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object obj3 \u003d new Object();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Object[] objects \u003d new Object[] {obj1, obj2, obj3};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String[] objectStrings \u003d new String[] {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                obj1.toString().toUpperCase().concat(\"test\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                obj2.toString().toUpperCase().concat(\"test\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                obj3.toString().toUpperCase().concat(\"test\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collection\u003cObject\u003e objectCollection \u003d Arrays.asList(objects);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Collection\u003cString\u003e expected \u003d Arrays.asList(objectStrings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(expected, CollectionUtil.stringifyCollection(objectCollection,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            item -\u003e item.toUpperCase(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            item -\u003e item.concat(\"test\")));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertNotEquals(expected, CollectionUtil.stringifyCollection(objectCollection,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            item -\u003e item.concat(\"test\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            item -\u003e item.toUpperCase()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CollectionUtil.requireAllNonNull(objects);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CollectionUtil.requireAllNonNull(collection);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 65,
      "-": 101
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 8,
      "-": 108
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/io/xpire/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.testutil.TypicalItems;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .containsPhraseIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Phrase parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            -\u003e StringUtil.containsPhraseIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .containsPhraseIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertFalse(StringUtil.containsPhraseIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertFalse(StringUtil.containsPhraseIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertFalse(StringUtil.containsPhraseIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //---------------- Tests for isNonNegativeInteger --------------------------------------"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void isNonNegativeInteger() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonNegativeInteger(\"\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonNegativeInteger(\" \"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonNegativeInteger(\"a\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonNegativeInteger(\"aaa\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(StringUtil.isNonNegativeInteger(\"0\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(StringUtil.isNonNegativeInteger(\"01\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(StringUtil.isNonNegativeInteger(\"-1\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(StringUtil.isNonNegativeInteger(\"1\")); //\"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //---------------- Tests for convertToSentenceCase --------------------------------------"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void convertToSentenceCase() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.convertToSentenceCase(\"\"), \"\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.convertToSentenceCase(\" \"), \" \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: upper case strings"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.convertToSentenceCase(\"FRUIT\"), \"Fruit\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.convertToSentenceCase(\"SWEET\"), \"Sweet\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: lower case strings"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.convertToSentenceCase(\"fruit\"), \"Fruit\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.convertToSentenceCase(\"sweet\"), \"Sweet\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // EP: mix of upper and lower case strings"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.convertToSentenceCase(\"frUit\"), \"Fruit\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.convertToSentenceCase(\"SweEt\"), \"Sweet\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //---------------- Tests for computeDistance --------------------------------------"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void computeDistance() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Equal strings"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"banana\", \"banana\"), 0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Both empty strings"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"\", \"\"), 0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Either as empty strings"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"banana\", \"\"), 6);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Either as empty strings"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"\", \"strawberry\"), 10);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Transpositions"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"aplpe\", \"apple\"), 1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"friut\", \"fruit\"), 1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Substitutions"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"apble\", \"apple\"), 1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"abble\", \"apple\"), 2);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"abbee\", \"apple\"), 3);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Deletions"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"fruitt\", \"fruit\"), 1);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.computeDistance(\"cllear\", \"clear\"), 1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //---------------- Tests for getSuggestions --------------------------------------"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void getSuggestions() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Set\u003cName\u003e allItems \u003d TypicalItems.getTypicalItems()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                         .stream()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                         .map(x-\u003e x.getName())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                         .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Set\u003cString\u003e allNames \u003d allItems.stream()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                       .map(Name::toString)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                       .map(x -\u003e x.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                       .flatMap(Arrays::stream)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                       .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "febee99"
        },
        "content": "        int limit \u003d 2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Similar keywords recommended"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.getSuggestions(\"banaa\", allNames, limit), \"[Banana]\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.getSuggestions(\"fihs\", allNames, limit), \"[Fish]\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.getSuggestions(\"mik\", allNames, limit), \"[Milk]\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Kiwi not found as it is not in typicalItems"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.getSuggestions(\"kiww\", allNames, limit), \"\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "febee99"
        },
        "content": "    //---------------- Tests for findSimilar --------------------------------------"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void findSimilar() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Set\u003cName\u003e allItems \u003d TypicalItems.getTypicalItems()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                         .stream()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                         .map(x-\u003e x.getName())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                         .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Set\u003cString\u003e allNames \u003d allItems.stream()"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                       .map(Name::toString)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                       .map(x -\u003e x.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                       .flatMap(Arrays::stream)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                       .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "febee99"
        },
        "content": "        int limit \u003d 2;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Similar keywords recommended"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(StringUtil.findSimilar(\"banaa\", allNames, limit),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "febee99"
        },
        "content": "                String.format(Messages.MESSAGE_SUGGESTIONS, \"[Banana]\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 157,
      "JermyTan": 20,
      "-": 84
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.JsonXpireStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonXpireStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                new JsonXpireStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String deleteCommand \u003d \"delete|9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String listCommand \u003d ViewCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertCommandSuccess(listCommand, ViewCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonXpireStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                new JsonXpireIoExceptionThrowingStub("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \"|\" + VALID_NAME_BANANA + \"|\" + VALID_EXPIRY_DATE_BANANA"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                + \"| \" + VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder(BANANA).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.addItem(expectedItem);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void getFilteredItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredItemList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static class JsonXpireIoExceptionThrowingStub extends JsonXpireStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        private JsonXpireIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        public void saveXpire(ReadOnlyXpire xpire, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 3,
      "febee99": 5,
      "JermyTan": 30,
      "-": 120,
      "xiaoyu-nus": 4
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.TypicalItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model \u003d new ModelManager(TypicalItems.getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_newItem_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item validItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.addItem(validItem);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandSuccess(new AddCommand(validItem), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validItem), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_duplicateItem_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item itemInList \u003d model.getXpire().getItemList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandFailure(new AddCommand(itemInList), model, AddCommand.MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 8,
      "JermyTan": 11,
      "-": 26
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_KIWI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_KIWI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void constructor_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_itemAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ModelStubAcceptingItemAdded modelStub \u003d new ModelStubAcceptingItemAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Item kiwi \u003d new ItemBuilder().withName(VALID_NAME_KIWI)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                                            .withExpiryDate(VALID_EXPIRY_DATE_KIWI)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                                            .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(kiwi).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, kiwi), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(Arrays.asList(kiwi), modelStub.itemsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_duplicateItem_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Item kiwi \u003d new ItemBuilder().withName(VALID_NAME_KIWI)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_KIWI)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(kiwi);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithItem(kiwi);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //duplicate items cannot be added to the list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item apple \u003d new ItemBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item banana \u003d new ItemBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        AddCommand addAppleCommand \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        AddCommand addBananaCommand \u003d new AddCommand(banana);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        AddCommand addAppleCommandCopy \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        public Path getXpireFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        public void setXpireFilePath(Path xpireFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public void addItem(Item item) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        public void setXpire(ReadOnlyXpire newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        public ReadOnlyXpire getXpire() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public void deleteItem(Item target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "febee99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public Set\u003cTag\u003e getAllItemTags() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "febee99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public Set\u003cName\u003e getAllItemNames() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "febee99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public void sortItemList(MethodOfSorting method) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        public List\u003cItem\u003e getAllItemList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * A Model stub that contains a single item."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private class ModelStubWithItem extends ModelStub {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "febee99"
        },
        "content": "        private final Item item;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ModelStubWithItem(Item item) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "febee99"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "febee99"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "febee99"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return this.item.isSameItem(item);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * A Model stub that always accept the item being added."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private class ModelStubAcceptingItemAdded extends ModelStub {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "febee99"
        },
        "content": "        final ArrayList\u003cItem\u003e itemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "febee99"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return itemsAdded.stream().anyMatch(item::isSameItem);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public void addItem(Item item) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "febee99"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "febee99"
        },
        "content": "            itemsAdded.add(item);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        public ReadOnlyXpire getXpire() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            return new Xpire();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 18,
      "liawsy": 12,
      "febee99": 49,
      "JermyTan": 17,
      "-": 128
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/CheckCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.logic.commands.CheckCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRED_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRED_MILK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRED_ORANGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRING_FISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ExpiringSoonPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ReminderThresholdExceededPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * {@code CheckCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CheckCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute_checkReminder_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ReminderThresholdExceededPredicate predicate \u003d new ReminderThresholdExceededPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        CheckCommand command \u003d new CheckCommand(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(Arrays.asList(EXPIRED_APPLE, EXPIRING_FISH, EXPIRED_MILK, EXPIRED_ORANGE),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "                model.getFilteredItemList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute_checkDays_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expectedMessage \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ExpiringSoonPredicate predicate \u003d new ExpiringSoonPredicate(5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        CheckCommand command \u003d new CheckCommand(predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(Arrays.asList(EXPIRED_APPLE, EXPIRED_MILK, EXPIRED_ORANGE), model.getFilteredItemList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        CheckCommand checkReminderCommand \u003d new CheckCommand(new ReminderThresholdExceededPredicate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        CheckCommand checkDaysCommand \u003d new CheckCommand(new ExpiringSoonPredicate(5));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(checkReminderCommand.equals(checkReminderCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        CheckCommand checkDaysCommandCopy \u003d new CheckCommand(new ExpiringSoonPredicate(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(checkDaysCommand.equals(checkDaysCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(checkReminderCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(checkReminderCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(checkReminderCommand.equals(checkDaysCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 4,
      "xiaoyu-nus": 71
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.TypicalItems;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Model model \u003d new ModelManager(TypicalItems.getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalItems.getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        expectedModel.setXpire(new Xpire());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 30
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (CommandException | ParseException ce) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * - the expiry date tracker, filtered item list and selected item in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire expectedXpire \u003d new Xpire(actualModel.getXpire());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "        List\u003cItem\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredItemList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(expectedXpire, actualModel.getXpire());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredItemList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the item at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * {@code model}\u0027s expiry date tracker."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static void showItemAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredItemList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item item \u003d model.getFilteredItemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        final String[] splitName \u003d item.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        model.updateFilteredItemList(new ContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(1, model.getFilteredItemList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 2,
      "febee99": 9,
      "JermyTan": 13,
      "-": 59
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.showItemAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIFTH_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_SEVENTH_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_SIXTH_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_DUCK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_JELLY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_JELLY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_JELLY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_REMINDER_THRESHOLD_JELLY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_DRINK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRIDGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRUIT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_PROTEIN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item itemToDelete \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItemList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "        showItemAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item itemToDelete \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "        showNoItem(expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "        showItemAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getXpire().getItemList().size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //test to delete tags for item with tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_deleteTagsFromItemNotAllFields_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item targetItem \u003d model.getFilteredItemList().get(INDEX_THIRD_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(VALID_TAG_FRIDGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(VALID_TAG_PROTEIN));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_THIRD_ITEM, set);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder().withName(VALID_NAME_DUCK)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withExpiryDate(VALID_EXPIRY_DATE_DUCK)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TAGS_SUCCESS, expectedItem);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        expectedModel.setItem(targetItem, expectedItem); //set target item with no tags"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //Tags don\u0027t exist for you to delete."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_deleteTagsFromItemNotAllFields_throwsCommandException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(VALID_TAG_DRINK));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_SIXTH_ITEM, set);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //test to delete tags for item with all fields present"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_deleteTagsFromItemAllFields_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item targetItem \u003d model.getFilteredItemList().get(INDEX_FIFTH_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(VALID_TAG_FRIDGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIFTH_ITEM, set);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder().withName(VALID_NAME_JELLY)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withExpiryDate(VALID_EXPIRY_DATE_JELLY)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withQuantity(VALID_QUANTITY_JELLY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withReminderThreshold(VALID_REMINDER_THRESHOLD_JELLY)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TAGS_SUCCESS, expectedItem);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        expectedModel.setItem(targetItem, expectedItem); //set target item with no tags"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //test that does not delete any tags due to empty set"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_deleteNoTagsFromItemAllFields_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item targetItem \u003d model.getFilteredItemList().get(INDEX_FIFTH_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIFTH_ITEM, set);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder().withName(VALID_NAME_JELLY)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withExpiryDate(VALID_EXPIRY_DATE_JELLY)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withQuantity(VALID_QUANTITY_JELLY)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withTags(VALID_TAG_FRIDGE)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withReminderThreshold(VALID_REMINDER_THRESHOLD_JELLY)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TAGS_SUCCESS, expectedItem);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        expectedModel.setItem(targetItem, expectedItem); //set target item with no tags"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_deleteTagsFromItemAllFields_throwsCommandException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(VALID_TAG_FRUIT));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_SEVENTH_ITEM, set);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TAGS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void execute_deleteQuantityLessThanItemQuantityFromItem_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //All item fields present"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item targetItem \u003d model.getFilteredItemList().get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity quantityToDeduct \u003d new Quantity(\"2\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM, quantityToDeduct);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder().withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_BANANA)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                .withQuantity(\"3\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                .withReminderThreshold(VALID_REMINDER_THRESHOLD_BANANA)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_QUANTITY_SUCCESS,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                quantityToDeduct.toString(), targetItem);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        expectedModel.setItem(targetItem, expectedItem);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //Not all item fields present"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        targetItem \u003d model.getFilteredItemList().get(INDEX_SIXTH_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        quantityToDeduct \u003d new Quantity(\"1\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(INDEX_SIXTH_ITEM, quantityToDeduct);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        expectedItem \u003d new ItemBuilder().withName(VALID_NAME_EXPIRED_MILK)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_EXPIRED_MILK)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                .withQuantity(\"1\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_QUANTITY_SUCCESS,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                quantityToDeduct.toString(), targetItem);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        expectedModel.setItem(targetItem, expectedItem);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void execute_deleteQuantityEqualsToItemQuantityFromItem_success() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Quantity quantityToDeduct \u003d new Quantity(\"1\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_THIRD_ITEM, quantityToDeduct);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Item itemToDelete \u003d model.getFilteredItemList().get(INDEX_THIRD_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_QUANTITY_SUCCESS,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                quantityToDeduct.toString(), itemToDelete);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        expectedModel.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void execute_deleteQuantityMoreThanItemQuantityFromItem_throwsCommandException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Item itemToDelete \u003d model.getFilteredItemList().get(INDEX_THIRD_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity quantityToDeduct \u003d new Quantity(\"3\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_THIRD_ITEM, quantityToDeduct);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertCommandFailure(deleteCommand, model, DeleteCommand.MESSAGE_DELETE_QUANTITY_FAILURE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "febee99"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "febee99"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "febee99"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private void showNoItem(Model model) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "febee99"
        },
        "content": "        model.updateFilteredItemList(p -\u003e false);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(model.getFilteredItemList().isEmpty());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 85,
      "liawsy": 43,
      "febee99": 22,
      "JermyTan": 18,
      "-": 69,
      "xiaoyu-nus": 23
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 18
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_ITEMS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_SUGGESTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.DUCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.JELLY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                new ContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                new ContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SearchCommand findFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SearchCommand findSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SearchCommand findFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_noMatchingKeywords_noItemsFoundNoRecommendations() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d preparePredicate(\"Pineapple|Pear|#Cold\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItemList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_noMatchingKeywords_noItemsFoundWithRecommendations() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 0)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + String.format(MESSAGE_SUGGESTIONS, \"[Banana]\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d preparePredicate(\"Banaan\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItemList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_allMatchingKeywords_someItemsFoundNoRecommendations() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d preparePredicate(\"Banaan|#Fridge\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(Arrays.asList(DUCK, JELLY), model.getFilteredItemList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_allMatchingKeywords_someItemsFoundWithRecommendations() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 0)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + String.format(MESSAGE_SUGGESTIONS, \"[[Fridge]]\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + String.format(MESSAGE_SUGGESTIONS, \"[Banana]\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d preparePredicate(\"Banaan|#Fridg\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItemList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void execute_allMatchingKeywords_multipleItemsFound() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d preparePredicate(\"Banana|#Fridge\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(Arrays.asList(BANANA, DUCK, JELLY), model.getFilteredItemList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void execute_someMatchingKeywords_multipleItemsFound() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d preparePredicate(\"Pineapple|Banana|#Protein|#Cold\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(Arrays.asList(BANANA, DUCK), model.getFilteredItemList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Parses {@code userInput} into a {@code ContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private ContainsKeywordsPredicate preparePredicate(String parsedUserInput) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new ContainsKeywordsPredicate(Arrays.asList(parsedUserInput.split(\"\\\\|\")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 43,
      "JermyTan": 39,
      "-": 45
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/SetReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.SetReminderCommand.MESSAGE_SUCCESS_RESET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.SetReminderCommand.MESSAGE_SUCCESS_SET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * {@code SetReminderCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class SetReminderCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        SetReminderCommand setFirstCommand \u003d new SetReminderCommand(INDEX_FIRST_ITEM, new ReminderThreshold(\"1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        SetReminderCommand setSecondCommand \u003d new SetReminderCommand(INDEX_FIRST_ITEM, new ReminderThreshold(\"2\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(setFirstCommand.equals(setFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        SetReminderCommand setFirstCommandCopy \u003d new SetReminderCommand(INDEX_FIRST_ITEM, new ReminderThreshold(\"1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(setFirstCommand.equals(setFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(setFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(setFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(setFirstCommand.equals(setSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItemList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ReminderThreshold validThreshold \u003d new ReminderThreshold(\"2\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        SetReminderCommand setReminderCommand \u003d new SetReminderCommand(outOfBoundIndex, validThreshold);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertCommandFailure(setReminderCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute_setReminder_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Index firstIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ReminderThreshold threshold \u003d new ReminderThreshold(\"1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        SetReminderCommand command \u003d new SetReminderCommand(firstIndex, threshold);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_SET, firstIndex.getOneBased(), threshold);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void execute_disableReminder_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Index firstIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ReminderThreshold threshold \u003d new ReminderThreshold(\"0\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SetReminderCommand command \u003d new SetReminderCommand(firstIndex, threshold);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_RESET, firstIndex.getOneBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 25,
      "JermyTan": 11,
      "xiaoyu-nus": 49
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.DUCK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRED_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRED_MILK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRED_ORANGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRING_FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.JELLY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * {@code SortCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_sortByName_showsSortedList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS + \" by name\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "        MethodOfSorting methodOfSorting \u003d new MethodOfSorting(\"name\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortCommand command \u003d new SortCommand(methodOfSorting);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.sortItemList(methodOfSorting);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.updateFilteredItemList(Model.PREDICATE_SORT_ALL_ITEMS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "                Arrays.asList(EXPIRED_APPLE, BANANA, DUCK, EXPIRING_FISH, JELLY, EXPIRED_MILK, EXPIRED_ORANGE),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "                model.getFilteredItemList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void execute_sortByDate_showsSortedList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS + \" by date\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "        MethodOfSorting methodOfSorting \u003d new MethodOfSorting(\"date\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortCommand command \u003d new SortCommand(methodOfSorting);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.sortItemList(methodOfSorting);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedModel.updateFilteredItemList(Model.PREDICATE_SORT_ALL_ITEMS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "                Arrays.asList(EXPIRED_MILK, EXPIRED_ORANGE, EXPIRED_APPLE, EXPIRING_FISH, BANANA, DUCK, JELLY),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "                model.getFilteredItemList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 23,
      "febee99": 44
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/TagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.showItemAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIFTH_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_JELLY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_JELLY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_JELLY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_REMINDER_THRESHOLD_JELLY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRIDGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRUIT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_PROTEIN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * {@code TagCommand}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item itemToTag \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_ITEM, new String[]{VALID_TAG_FRIDGE, VALID_TAG_FRUIT});"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(tagCommand.getMode(), TagCommand.TagMode.TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withExpiryDate(VALID_EXPIRY_DATE_APPLE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withTags(VALID_TAG_FRIDGE, VALID_TAG_FRUIT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        expectedModel.setItem(itemToTag, expectedItem);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ITEM_SUCCESS, expectedItem);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItemList().size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, new String[]{VALID_TAG_FRIDGE, VALID_TAG_FRUIT});"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        showItemAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item itemToTag \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_ITEM, new String[]{VALID_TAG_FRIDGE, VALID_TAG_FRUIT});"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(tagCommand.getMode(), TagCommand.TagMode.TAG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withExpiryDate(VALID_EXPIRY_DATE_APPLE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withTags(VALID_TAG_FRIDGE, VALID_TAG_FRUIT)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        expectedModel.setItem(itemToTag, expectedItem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        showSomeItem(expectedModel, new ArrayList\u003c\u003e() {{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                add(expectedItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            }});"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ITEM_SUCCESS, expectedItem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        showItemAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getXpire().getItemList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, new String[]{VALID_TAG_FRIDGE, VALID_TAG_FRUIT});"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //add tags to an already tagged item should add on more tags"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_addMoreTags_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item itemToTag \u003d model.getFilteredItemList().get(INDEX_FIFTH_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIFTH_ITEM, new String[]{VALID_TAG_FRUIT});"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(tagCommand.getMode(), TagCommand.TagMode.TAG);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder().withName(VALID_NAME_JELLY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withExpiryDate(VALID_EXPIRY_DATE_JELLY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withQuantity(VALID_QUANTITY_JELLY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withTags(VALID_TAG_FRIDGE, VALID_TAG_FRUIT)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .withReminderThreshold(VALID_REMINDER_THRESHOLD_JELLY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                             .build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ITEM_SUCCESS, expectedItem);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        expectedModel.setItem(itemToTag, expectedItem);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //adding tags that already exist should not add duplicates or edit the existing tags"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_addDuplicateTags_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item itemToTag \u003d model.getFilteredItemList().get(INDEX_FIFTH_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIFTH_ITEM, new String[]{VALID_TAG_FRIDGE});"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(tagCommand.getMode(), TagCommand.TagMode.TAG);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder().withName(VALID_NAME_JELLY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_JELLY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .withQuantity(VALID_QUANTITY_JELLY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .withTags(VALID_TAG_FRIDGE)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .withReminderThreshold(VALID_REMINDER_THRESHOLD_JELLY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ITEM_SUCCESS, expectedItem);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        expectedModel.setItem(itemToTag, expectedItem);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //model should not change, should return all tags in items"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void execute_showTags_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(tagCommand.getMode(), TagCommand.TagMode.SHOW);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        List\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        tagList.add((new Tag(VALID_TAG_FRIDGE)).toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        tagList.add((new Tag(VALID_TAG_PROTEIN)).toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d TagCommand.appendTagsToFeedback(tagList,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new StringBuilder(TagCommand.MESSAGE_TAG_SHOW_SUCCESS)).toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show items."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private void showSomeItem(Model model, ArrayList\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        model.updateFilteredItemList(items::contains);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 153,
      "xiaoyu-nus": 5
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/commands/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.showItemAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpiryDateTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getXpire(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertCommandSuccess(new ViewCommand(), model, ViewCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "        showItemAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertCommandSuccess(new ViewCommand(), model, ViewCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 2,
      "JermyTan": 12,
      "-": 25
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalItems.KIWI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_EXPIRY_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_KIWI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_KIWI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder(BANANA).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CommandParserTestUtil.assertEqualsParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_NAME_BANANA"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                + \" | \" + VALID_EXPIRY_DATE_BANANA + \" |\" + VALID_QUANTITY_BANANA,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //no whitespace preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CommandParserTestUtil.assertEqualsParseSuccess(parser, VALID_NAME_BANANA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                        + \"|\" + VALID_EXPIRY_DATE_BANANA + \"|\" + VALID_QUANTITY_BANANA,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        // no quantity specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder(KIWI).withQuantity(\"1\").withReminderThreshold(\"0\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String userInput \u003d VALID_NAME_KIWI + \"|\" + VALID_EXPIRY_DATE_KIWI + \"|\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CommandParserTestUtil.assertEqualsParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void parse_invalidInput_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        // missing bars"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_APPLE + VALID_EXPIRY_DATE_APPLE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_NAME + \"|\" + VALID_EXPIRY_DATE_BANANA"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"|\", Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // invalid expiry date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_APPLE + \"|\" + INVALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                ExpiryDate.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_BANANA + \"|\" + VALID_EXPIRY_DATE_BANANA"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                + \"|\" + INVALID_QUANTITY, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, INVALID_NAME + \"|\" + VALID_EXPIRY_DATE_BANANA"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            + \"|\", Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 16,
      "liawsy": 12,
      "JermyTan": 45,
      "xiaoyu-nus": 10
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/CheckCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertEqualsParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.logic.commands.CheckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ExpiringSoonPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ReminderThresholdExceededPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CheckCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private CheckCommandParser parser \u003d new CheckCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void parse_validArgs_returnsCheckCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \" 1\", new CheckCommand(new ExpiringSoonPredicate(1)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"\", new CheckCommand(new ReminderThresholdExceededPredicate()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \" \", new CheckCommand(new ReminderThresholdExceededPredicate()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertParseFailure(parser, \"abc\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE)); // non-numeric characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertParseFailure(parser, \"-3\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE)); // non-positive integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertParseFailure(parser, \"1.5\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE)); // non-integer number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertParseFailure(parser, (CheckCommandParser.MAX_VALUE + 1) + \"\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE)); // exceeding max number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 4,
      "xiaoyu-nus": 32
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static void assertEqualsParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * not equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static void assertNotEqualsParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            assertNotEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 18,
      "-": 34
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertEqualsParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * TODO: Quantity Deletion"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //invalid trailing arguments"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertParseFailure(parser, \"1||||||1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_deleteSingleTagMode_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(\"Tag1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"1|#Tag1\", new DeleteCommand(INDEX_FIRST_ITEM, set));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_deleteMultipleTagMode_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(\"Tag1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(\"Tag2\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"1|#Tag1\", new DeleteCommand(INDEX_FIRST_ITEM, set));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_deleteBlankTagMode_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertParseFailure(parser, \"1|#\", Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void parse_deleteValidQuantity_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity validQuantity \u003d new Quantity(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"1|1\", new DeleteCommand(INDEX_FIRST_ITEM, validQuantity));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //invalid Quantity"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void parse_deleteInvalidQuantity_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertParseFailure(parser, \"1|-2\", Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 26,
      "liawsy": 19,
      "JermyTan": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_EXPIRY_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_EXPIRY_DATE_RANGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_REMINDER_THRESHOLD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_KIWI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_JELLY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_JELLY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_REMINDER_THRESHOLD_JELLY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_DRINK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRUIT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.ExpiryDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static final String WHITESPACE \u003d \"       \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static final String VALID_EXPIRY_DATE_1 \u003d \"2/9/2050\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static final String VALID_EXPIRY_DATE_2 \u003d \"02/09/2050\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private static final String VALID_METHOD_OF_SORTING_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private static final String VALID_METHOD_OF_SORTING_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static final String INVALID_METHOD_OF_SORTING \u003d \"random\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME_JELLY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME_JELLY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME_JELLY + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME_JELLY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseExpiryDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExpiryDate(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseExpiryDate_invalidFormat_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExpiryDate(INVALID_EXPIRY_DATE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseExpiryDate_invalidRange_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExpiryDate(INVALID_EXPIRY_DATE_RANGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseExpiryDate_validValueWithoutWhitespace_returnsExpiryDate() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ExpiryDate expectedExpiryDate \u003d new ExpiryDate(VALID_EXPIRY_DATE_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedExpiryDate, ParserUtil.parseExpiryDate(VALID_EXPIRY_DATE_1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseExpiryDate_validValueWithWhitespace_returnsTrimmedExpiryDate() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expiryDateWithWhitespace \u003d WHITESPACE + VALID_EXPIRY_DATE_2 + WHITESPACE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ExpiryDate expectedExpiryDate \u003d new ExpiryDate(VALID_EXPIRY_DATE_1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedExpiryDate, ParserUtil.parseExpiryDate(expiryDateWithWhitespace));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_DRINK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_DRINK));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_DRINK + WHITESPACE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_DRINK);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_DRINK, INVALID_TAG)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_DRINK, VALID_TAG_FRUIT));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        expectedTagSet.addAll(Arrays.asList(new Tag(VALID_TAG_DRINK), new Tag(VALID_TAG_FRUIT)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseExpiryDate_validDate_returnsExpiryDate() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ExpiryDate validDate \u003d new ExpiryDate(VALID_EXPIRY_DATE_KIWI);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(validDate, ParserUtil.parseExpiryDate(VALID_EXPIRY_DATE_KIWI));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseExpiryDate_validDateWithWhiteSpace_returnsExpiryDate() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ExpiryDate validDate \u003d new ExpiryDate(VALID_EXPIRY_DATE_KIWI);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(validDate, ParserUtil.parseExpiryDate(WHITESPACE + VALID_EXPIRY_DATE_KIWI + WHITESPACE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //Note: I think need to catch DateTimeParseException somehow? If not here always got warning."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseExpiryDate_emptyDate_throwsParseException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExpiryDate(WHITESPACE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseExpiryDate_invalidDate_throwsParseException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExpiryDate(INVALID_EXPIRY_DATE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseQuantity_validQuantity_returnsQuantity() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Quantity validQuantity \u003d new Quantity(VALID_QUANTITY_JELLY);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(validQuantity, ParserUtil.parseQuantity(VALID_QUANTITY_JELLY));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseQuantity_invalidQuantity_returnsQuantity() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuantity(INVALID_QUANTITY));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseReminderThreshold_validThreshold_returnsReminderThreshold() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        ReminderThreshold validThreshold \u003d new ReminderThreshold(VALID_REMINDER_THRESHOLD_JELLY);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(validThreshold, ParserUtil.parseReminderThreshold(VALID_REMINDER_THRESHOLD_JELLY));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseReminderThreshold_invalidThreshold_throwsParseException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReminderThreshold(INVALID_REMINDER_THRESHOLD));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseTagsFromInput_validTags_returnsSet() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Set\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(VALID_TAG_DRINK));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.add(new Tag(VALID_TAG_FRUIT));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(set, ParserUtil.parseTagsFromInput(\"#\" + VALID_TAG_FRUIT + \"#\" + VALID_TAG_DRINK));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseTagsFromInput_invalidTags_returnsSet() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTagsFromInput(\"#\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseMethodOfSorting_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMethodOfSorting(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseMethodOfSorting_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMethodOfSorting(INVALID_METHOD_OF_SORTING));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseMethodOfSorting_validValueWithoutWhitespace_returnsMethodOfSorting() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "febee99"
        },
        "content": "        MethodOfSorting expectedMethodOfSorting \u003d new MethodOfSorting(VALID_METHOD_OF_SORTING_NAME);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedMethodOfSorting, ParserUtil.parseMethodOfSorting(VALID_METHOD_OF_SORTING_NAME));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseMethodOfSorting_validValueWithWhitespace_returnsTrimmedMethodOfSorting() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String methodOfSortingWithWhitespace \u003d WHITESPACE + VALID_METHOD_OF_SORTING_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "febee99"
        },
        "content": "        MethodOfSorting expectedMethodOfSorting \u003d new MethodOfSorting(VALID_METHOD_OF_SORTING_DATE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedMethodOfSorting, ParserUtil.parseMethodOfSorting(methodOfSortingWithWhitespace));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 93,
      "febee99": 56,
      "JermyTan": 7,
      "-": 87
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/SearchCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertEqualsParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // empty args"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // all empty keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertParseFailure(parser, \" | || |  | ||  \","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void parse_validArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                new SearchCommand(new ContainsKeywordsPredicate(Arrays.asList(\"apple\", \"#Food\", \"#Fruit\", \"orange\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"Apple|#Food|#Fruit|Orange\", expectedSearchCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"  Apple |  #Food |   #Fruit  |   Orange  \", expectedSearchCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // multiple empty keywords"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \" Apple| | #Food | || | #Fruit | ||| Orange \", expectedSearchCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // order insensitive"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"#Fruit|Apple|Orange|#Food\", expectedSearchCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // case insensitive for name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"apple|#Food|#Fruit|oRaNGe\", expectedSearchCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        // case insensitive for tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"Apple|#food|#fruit|Orange\", expectedSearchCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 35,
      "-": 17
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/SetReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_REMINDER_THRESHOLD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertEqualsParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.logic.commands.SetReminderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class SetReminderCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private SetReminderCommandParser parser \u003d new SetReminderCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void parse_validArgs_returnsSetReminderCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEqualsParseSuccess(parser, \" 1|1\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                new SetReminderCommand(INDEX_FIRST_ITEM, new ReminderThreshold(\"1\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEqualsParseSuccess(parser, \" 1 | 1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                new SetReminderCommand(INDEX_FIRST_ITEM, new ReminderThreshold(\"1\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // missing argument"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertParseFailure(parser, \"2\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertParseFailure(parser, \"0|3\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void parse_invalidReminderThreshold_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertParseFailure(parser, \"1|abc\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                String.format(MESSAGE_INVALID_REMINDER_THRESHOLD, SetReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 4,
      "xiaoyu-nus": 39
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/SortCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_SUGGESTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertEqualsParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.model.item.sort.MethodOfSorting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parse_validArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEqualsParseSuccess(parser, \"name\", new SortCommand(new MethodOfSorting(\"name\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEqualsParseSuccess(parser, \"date\", new SortCommand(new MethodOfSorting(\"date\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String suggestName \u003d String.format(MESSAGE_SUGGESTIONS, \"[name]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String suggestDate \u003d String.format(MESSAGE_SUGGESTIONS, \"[date]\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE)); // empty args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE)); // empty args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \"abc\", MethodOfSorting.MESSAGE_CONSTRAINTS); // only name or date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \"-3\", MethodOfSorting.MESSAGE_CONSTRAINTS); // no numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \"1.5\", MethodOfSorting.MESSAGE_CONSTRAINTS); // no numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // only lowercase date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \"Date\", MethodOfSorting.MESSAGE_CONSTRAINTS + suggestDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \"DATE\", MethodOfSorting.MESSAGE_CONSTRAINTS + suggestDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // only lowercase name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \"Name\", MethodOfSorting.MESSAGE_CONSTRAINTS + suggestName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertParseFailure(parser, \"NAME\", MethodOfSorting.MESSAGE_CONSTRAINTS + suggestName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 4,
      "febee99": 40
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/TagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertEqualsParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRIDGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRUIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class TagCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_validSingleTag_returnTagCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"1|#Fruit\", new TagCommand(INDEX_FIRST_ITEM, new String[]{VALID_TAG_FRUIT}));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_validMultipleTags_returnTagCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEqualsParseSuccess(parser, \"1|#Fruit#Fridge\", new TagCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new String[]{VALID_TAG_FRUIT, VALID_TAG_FRIDGE}));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_invalidIndex_throwsParserException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertParseFailure(parser, \"-1\", String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_blankTag_throwsParserException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertParseFailure(parser, \"2|#\", String"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_invalidTag_throwsParserException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertParseFailure(parser, \"2|\" + INVALID_TAG, String"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                .format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_invalidTagWithValidTag_throwsParserException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertParseFailure(parser, \"2|\" + \"#\" + INVALID_TAG + \"#\" + VALID_TAG_FRUIT, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parse_showTags_returnsShowCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEqualsParseSuccess(parser, \"\", new TagCommand());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 55,
      "JermyTan": 3
    }
  },
  {
    "path": "src/test/java/io/xpire/logic/parser/XpireParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.logic.commands.CheckCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.logic.commands.SetReminderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.testutil.TypicalItemsFields;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class XpireParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final XpireParser parser \u003d new XpireParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Item item \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ItemUtil.getAddCommand(item));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(new AddCommand(item), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseCommand_check() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(CheckCommand.COMMAND_WORD) instanceof CheckCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(CheckCommand.COMMAND_WORD + \"|5\") instanceof CheckCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \"|3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \"|\" + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ITEM), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \"|3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \"|3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public void parseCommand_search() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                SearchCommand.COMMAND_WORD + \"|\" + String.join(\"|\", keywords));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(new SearchCommand(new ContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseCommand_setReminder() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(SetReminderCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                + \"|\" + INDEX_FIRST_ITEM.getOneBased()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                + \"|10\") instanceof SetReminderCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                + \"|name\") instanceof SortCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                + \"|date\") instanceof SortCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseCommand_tag() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(TagCommand.COMMAND_WORD) instanceof TagCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(parser.parseCommand(TagCommand.COMMAND_WORD + \"|1|#\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                + TypicalItemsFields.VALID_TAG_DRINK) instanceof TagCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD) instanceof ViewCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(parser.parseCommand(ViewCommand.COMMAND_WORD + \"|3\") instanceof ViewCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 33,
      "liawsy": 3,
      "febee99": 7,
      "JermyTan": 27,
      "-": 52
    }
  },
  {
    "path": "src/test/java/io/xpire/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ExpiryDateTrackerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.TypicalItems;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assertions.assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(new Xpire(), new Xpire(modelManager.getXpire()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        userPrefs.setXpireFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        userPrefs.setXpireFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assertions.assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setExpiryDateTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setXpireFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setExpiryDateTrackerFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        modelManager.setXpireFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(path, modelManager.getXpireFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void hasItem_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.hasItem(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void hasItem_itemNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertFalse(modelManager.hasItem(TypicalItems.KIWI));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void hasItem_itemInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        modelManager.addItem(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(modelManager.hasItem(TypicalItems.KIWI));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void getFilteredItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .getFilteredItemList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire xpire \u003d new ExpiryDateTrackerBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .withItem(TypicalItems.KIWI).withItem(TypicalItems.BANANA).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire differentAddressBook \u003d new Xpire();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        modelManager \u003d new ModelManager(xpire, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(xpire, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        String[] keywords \u003d TypicalItems.KIWI.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        modelManager.updateFilteredItemList(new ContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(xpire, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        modelManager.updateFilteredItemList(Model.PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        differentUserPrefs.setXpireFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(xpire, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 6,
      "JermyTan": 34,
      "-": 93
    }
  },
  {
    "path": "src/test/java/io/xpire/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setXpireFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 5,
      "-": 16
    }
  },
  {
    "path": "src/test/java/io/xpire/model/XpireTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRED_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRUIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class XpireTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private final Xpire xpire \u003d new Xpire();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(Collections.emptyList(), xpire.getItemList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e xpire.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void resetData_withValidReadOnlyExpiryDateTracker_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire newData \u003d getTypicalExpiryDateTracker();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        xpire.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(newData.getItemList(), xpire.getItemList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void resetData_withDuplicateItems_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(EXPIRED_APPLE).withExpiryDate(VALID_EXPIRY_DATE_APPLE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                                                         .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        List\u003cItem\u003e newItems \u003d Arrays.asList(EXPIRED_APPLE, editedApple);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        XpireStub newData \u003d new XpireStub(newItems);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e xpire.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void hasItem_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e xpire.hasItem(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void hasItem_itemNotInExpiryDateTracker_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(xpire.hasItem(EXPIRED_APPLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void hasItem_itemInExpiryDateTracker_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "        xpire.addItem(EXPIRED_APPLE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(xpire.hasItem(EXPIRED_APPLE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void hasItem_itemWithSameIdentityFieldsInExpiryDateTracker_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        xpire.addItem(EXPIRED_APPLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item editedAlice \u003d new ItemBuilder(EXPIRED_APPLE)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_APPLE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "                .withTags(VALID_TAG_FRUIT)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(xpire.hasItem(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void getItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e xpire.getItemList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * A stub ReadOnlyXpire whose items list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static class XpireStub implements ReadOnlyXpire {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "        private final ObservableList\u003cItem\u003e items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        XpireStub(Collection\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "            this.items.setAll(items);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "        public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return items;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 2,
      "liawsy": 1,
      "febee99": 81,
      "JermyTan": 18
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/ContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class ContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate firstPredicate \u003d new ContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate secondPredicate \u003d new ContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate firstPredicateCopy \u003d new ContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Apple\", \"Banana\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Banana\", \"Carrot\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Carrot\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"aPPle\", \"bANana\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Apple\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Carrot\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Apple\").withExpiryDate(\"01/02/2020\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 8,
      "JermyTan": 13,
      "-": 53
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/ExpiringSoonPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class ExpiringSoonPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d/M/yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        int daysToExpiryDate1 \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        int daysToExpiryDate2 \u003d 10;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ExpiringSoonPredicate firstPredicate \u003d new ExpiringSoonPredicate(daysToExpiryDate1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ExpiringSoonPredicate secondPredicate \u003d new ExpiringSoonPredicate(daysToExpiryDate2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ExpiringSoonPredicate firstPredicateCopy \u003d new ExpiringSoonPredicate(daysToExpiryDate1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void test_nameExpiringSoon_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ExpiringSoonPredicate predicate \u003d new ExpiringSoonPredicate(10);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // Within the days"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expiryDate1 \u003d DateUtil.convertDateToString(currentDate.plusDays(5), DATE_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withExpiryDate(expiryDate1).build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // On the day"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expiryDate2 \u003d DateUtil.convertDateToString(currentDate.plusDays(10), DATE_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withExpiryDate(expiryDate2).build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ExpiringSoonPredicate predicate \u003d new ExpiringSoonPredicate(10);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // Not within the days"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expiryDate \u003d DateUtil.convertDateToString(currentDate.plusDays(20), DATE_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withExpiryDate(expiryDate).build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 69
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/ExpiryDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class ExpiryDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpiryDate(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void isValidFormatExpiryDate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        // valid input date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(ExpiryDate.isValidFormatExpiryDate(\"24/06/1999\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        // valid input date with non-padded month"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(ExpiryDate.isValidFormatExpiryDate(\"24/6/1999\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        // valid input date with non-padded date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(ExpiryDate.isValidFormatExpiryDate(\"2/06/1999\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(ExpiryDate.isValidFormatExpiryDate(\"2/06/2\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void isValidRangeExpiryDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        // date after Y2S1 (will fail after 11/2/2020)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(ExpiryDate.isValidRangeExpiryDate(\"11/2/2020\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        // date before current date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(ExpiryDate.isValidRangeExpiryDate(\"24/06/1999\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void getStatus_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        LocalDate dateStub \u003d LocalDate.of(2019, 8, 18);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //item is not expired"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        ExpiryDate validExpiryDate \u003d new ExpiryDate(\"1/2/2020\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(validExpiryDate.getStatus(dateStub), \"167 days left\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //Item has expired"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        ExpiryDate pastDate \u003d new ExpiryDate(\"15/7/2019\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(pastDate.getStatus(dateStub), \"Expired!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 60
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/ItemTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static io.xpire.testutil.TypicalItems.EXPIRED_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.KIWI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_KIWI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_DRINK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item item \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e item.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void isSameItem() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(KIWI.isSameItem(KIWI));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.isSameItem(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different expiry date -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item editedKiwi \u003d new ItemBuilder(KIWI).withExpiryDate(\"02/02/2020\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.isSameItem(editedKiwi));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "        editedKiwi \u003d new ItemBuilder(KIWI).withName(VALID_NAME_APPLE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.isSameItem(editedKiwi));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        // same name, same expiry date , different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "        editedKiwi \u003d new ItemBuilder(KIWI).withExpiryDate(VALID_EXPIRY_DATE_KIWI)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                            .withTags(VALID_TAG_DRINK).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(KIWI.isSameItem(editedKiwi));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item kiwiCopy \u003d new ItemBuilder(KIWI).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(KIWI.equals(kiwiCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(KIWI.equals(KIWI));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.equals(5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.equals(EXPIRED_APPLE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Item editedKiwi \u003d new ItemBuilder(KIWI).withName(VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.equals(editedKiwi));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different expiry date -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "        editedKiwi \u003d new ItemBuilder(KIWI).withExpiryDate(\"01/01/2020\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.equals(editedKiwi));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "        editedKiwi \u003d new ItemBuilder(KIWI).withTags(VALID_TAG_DRINK).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(KIWI.equals(editedKiwi));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 6,
      "febee99": 68,
      "JermyTan": 4
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Name.isValidName(\"carrot*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(Name.isValidName(\"oreo\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(Name.isValidName(\"d24 durian\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(Name.isValidName(\"Har Cheong Gai\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(Name.isValidName(\"Truffle Mentaiko Fries with Himalayan Sea Salt\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 5,
      "JermyTan": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/QuantityTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_EXPIRING_FISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void isSameQuantity() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(VALID_QUANTITY_APPLE.equals(VALID_QUANTITY_APPLE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(VALID_QUANTITY_APPLE.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //different object, same quantity -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(VALID_QUANTITY_APPLE.equals(VALID_QUANTITY_EXPIRING_FISH));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //different object, different quantity -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(VALID_QUANTITY_APPLE.equals(VALID_QUANTITY_BANANA));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void isValidInputQuantity() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is positive integer -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(Quantity.isValidInputQuantity(\"2\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is negative integer -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidInputQuantity(\"-4\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is positive double -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidInputQuantity(\"-3.14159265\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is zero -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidInputQuantity(\"0\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is a character -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidInputQuantity(\"a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is greater than maximum allowed value"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidInputQuantity(\"100001\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is positive integer -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"2\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is negative integer -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"-4\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is positive double -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"-3.14159265\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is zero -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"0\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is a character -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"a\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //input is greater than maximum allowed value"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"100001\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void quantityIsZero() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //quantity is zero -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(Quantity.quantityIsZero(new Quantity(\"0\", true)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //quantity is positive integer -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertFalse(Quantity.quantityIsZero(new Quantity(\"2\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void deductQuantity() throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity testQuantity \u003d new Quantity(\"3\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //quantityToDeduct is greater than item quantity -\u003e throws exception"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e testQuantity.deductQuantity(new Quantity(\"4\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //quantityToDeduct is equal to item quantity -\u003e returns 0 for quantity"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity toDeduct \u003d new Quantity(\"3\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(\"0\", true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(expectedQuantity.equals(testQuantity.deductQuantity(toDeduct)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //quantityToDeduct is less than item quantity -\u003e returns a valid quantity"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        toDeduct \u003d new Quantity(\"1\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        expectedQuantity \u003d new Quantity(\"2\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertTrue(expectedQuantity.equals(testQuantity.deductQuantity(toDeduct)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 3,
      "liawsy": 99,
      "xiaoyu-nus": 2
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/ReminderDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class ReminderDateTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReminderDate(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 15
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/ReminderThresholdExceededPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class ReminderThresholdExceededPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d/M/yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ReminderThresholdExceededPredicate predicate \u003d new ReminderThresholdExceededPredicate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(predicate.equals(predicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(predicate.equals(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(predicate.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void test_nameReminderThresholdExceeded_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ReminderThresholdExceededPredicate predicate \u003d new ReminderThresholdExceededPredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // on the day of reminder"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expiryDate1 \u003d DateUtil.convertDateToString(currentDate.plusDays(1), DATE_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withExpiryDate(expiryDate1).withReminderThreshold(\"1\").build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // after the day of reminder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expiryDate2 \u003d DateUtil.convertDateToString(currentDate.plusDays(1), DATE_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withExpiryDate(expiryDate2).withReminderThreshold(\"2\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // already expired"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expiryDate3 \u003d DateUtil.convertDateToString(currentDate.minusDays(1), DATE_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withExpiryDate(expiryDate3).build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void test_nameReminderThresholdNotExceeded_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ReminderThresholdExceededPredicate predicate \u003d new ReminderThresholdExceededPredicate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String expiryDate \u003d DateUtil.convertDateToString(currentDate.plusDays(2), DATE_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withExpiryDate(expiryDate).withReminderThreshold(\"1\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 3,
      "xiaoyu-nus": 57
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/ReminderThresholdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class ReminderThresholdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReminderThreshold(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void constructor_invalidReminderThreshold_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String invalidReminderThreshold \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ReminderThreshold(invalidReminderThreshold));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void isValidReminderThreshold() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // null reminder threshold"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ReminderThreshold.isValidReminderThreshold(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // invalid reminder threshold"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(ReminderThreshold.isValidReminderThreshold(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(ReminderThreshold.isValidReminderThreshold(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(ReminderThreshold.isValidReminderThreshold(\"i\")); // only non-numeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(ReminderThreshold.isValidReminderThreshold(\"3*\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(ReminderThreshold.isValidReminderThreshold(\"1.5\")); // contains non-integer numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(ReminderThreshold.isValidReminderThreshold(\"-1\")); // contains non-positive numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // exceeding maximum threshold"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertFalse(ReminderThreshold.isValidReminderThreshold(\"\" + (ReminderThreshold.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // valid reminder threshold"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(ReminderThreshold.isValidReminderThreshold(\"0\")); // zero"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertTrue(ReminderThreshold.isValidReminderThreshold(\"12\")); // positive integer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 42
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/SortedUniqueItemListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_KIWI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRUIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.TypicalItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class SortedUniqueItemListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final SortedUniqueItemList uniqueItemList \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void contains_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void contains_itemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertFalse(uniqueItemList.contains(TypicalItems.KIWI));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void contains_itemInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertTrue(uniqueItemList.contains(TypicalItems.KIWI));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void contains_itemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Item editedAlice \u003d new ItemBuilder(TypicalItems.KIWI).withExpiryDate(VALID_EXPIRY_DATE_KIWI)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                                 .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(uniqueItemList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void add_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void add_duplicateItem_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.add(TypicalItems.KIWI));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void addItem_addedItemIsSorted_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.add(TypicalItems.BANANA);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.add(TypicalItems.DUCK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.add(TypicalItems.JELLY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortedUniqueItemList expectedUniqueItemList \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedUniqueItemList.add(TypicalItems.BANANA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedUniqueItemList.add(TypicalItems.DUCK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedUniqueItemList.add(TypicalItems.JELLY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedUniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItem_nullTargetItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(null, TypicalItems.KIWI));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItem_nullEditedItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(TypicalItems.KIWI, null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItem_targetItemNotInList_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.setItem(TypicalItems.KIWI, TypicalItems.KIWI));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItem_editedItemIsSameItem_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.setItem(TypicalItems.KIWI, TypicalItems.KIWI);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortedUniqueItemList expectedUniqueItemList \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        expectedUniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItem_editedItemHasSameIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Item editedAlice \u003d new ItemBuilder(TypicalItems.KIWI)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_KIWI)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .withTags(VALID_TAG_FRUIT)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.setItem(TypicalItems.KIWI, editedAlice);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortedUniqueItemList expectedUniqueItemList \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedUniqueItemList.add(editedAlice);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItem_editedItemHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.setItem(TypicalItems.KIWI, TypicalItems.EXPIRED_APPLE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortedUniqueItemList expectedUniqueItemList \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedUniqueItemList.add(TypicalItems.EXPIRED_APPLE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItem_editedItemHasNonUniqueIdentity_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.add(TypicalItems.EXPIRED_APPLE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItem(TypicalItems.KIWI,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "                TypicalItems.EXPIRED_APPLE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void remove_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.remove(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void remove_itemDoesNotExist_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.remove(TypicalItems.KIWI));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void remove_existingItem_removesItem() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.remove(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortedUniqueItemList expectedUniqueItemList \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItems_nullUniqueItemList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((SortedUniqueItemList) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItems_uniqueItemList_replacesOwnListWithProvidedUniqueItemList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        uniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortedUniqueItemList expectedUniqueItemList \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expectedUniqueItemList.add(TypicalItems.EXPIRED_APPLE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.setItems(expectedUniqueItemList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItems_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((List\u003cItem\u003e) null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItems_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.add(TypicalItems.EXPIRED_APPLE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "febee99"
        },
        "content": "        List\u003cItem\u003e itemList \u003d Collections.singletonList(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "febee99"
        },
        "content": "        uniqueItemList.setItems(itemList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "febee99"
        },
        "content": "        SortedUniqueItemList expectedUniqueItemList \u003d new SortedUniqueItemList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        expectedUniqueItemList.add(TypicalItems.KIWI);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setItems_listWithDuplicateItems_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "febee99"
        },
        "content": "        List\u003cItem\u003e listWithDuplicateItems \u003d Arrays.asList(TypicalItems.EXPIRED_APPLE, TypicalItems.EXPIRED_APPLE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItems(listWithDuplicateItems));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "febee99"
        },
        "content": "            -\u003e uniqueItemList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 2,
      "febee99": 153,
      "JermyTan": 31
    }
  },
  {
    "path": "src/test/java/io/xpire/model/item/sort/MethodOfSortingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package io.xpire.model.item.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class MethodOfSortingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MethodOfSorting(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void constructor_invalidMethodOfSorting_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String invalidMethodOfSorting \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MethodOfSorting(invalidMethodOfSorting));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void isValidMethodOfSorting() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e MethodOfSorting.isValidMethodOfSorting(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // invalid method of sorting"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(MethodOfSorting.isValidMethodOfSorting(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(MethodOfSorting.isValidMethodOfSorting(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(MethodOfSorting.isValidMethodOfSorting(\"^\")); // only name or date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(MethodOfSorting.isValidMethodOfSorting(\"3\")); // only name or date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // valid method of sorting, but wrong case"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(MethodOfSorting.isValidMethodOfSorting(\"Name\")); // should be \"name\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(MethodOfSorting.isValidMethodOfSorting(\"Date\")); // should be \"date\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // valid method of sorting, either name or date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(MethodOfSorting.isValidMethodOfSorting(\"name\")); // name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertTrue(MethodOfSorting.isValidMethodOfSorting(\"date\")); // date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 42
    }
  },
  {
    "path": "src/test/java/io/xpire/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/io/xpire/storage/JsonAdaptedItemTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.storage.JsonAdaptedItem.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItems.JELLY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_EXPIRY_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_REMINDER_THRESHOLD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.INVALID_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_JELLY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_JELLY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_JELLY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_REMINDER_THRESHOLD_JELLY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRIDGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiryDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class JsonAdaptedItemTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d new ArrayList\u003c\u003e() {{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            add(new JsonAdaptedTag(new Tag(VALID_TAG_FRIDGE)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_validItemDetails_returnsItem() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(JELLY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertEquals(JELLY, item.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        JsonAdaptedItem item \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new JsonAdaptedItem(INVALID_NAME, VALID_EXPIRY_DATE_JELLY, VALID_QUANTITY_JELLY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                        VALID_REMINDER_THRESHOLD_JELLY, VALID_TAGS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(null, VALID_EXPIRY_DATE_JELLY, VALID_QUANTITY_JELLY,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                VALID_REMINDER_THRESHOLD_JELLY, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_invalidExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME_JELLY, INVALID_EXPIRY_DATE, VALID_QUANTITY_JELLY,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                        VALID_REMINDER_THRESHOLD_JELLY, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d ExpiryDate.MESSAGE_CONSTRAINTS_FORMAT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_nullExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME_JELLY, null, VALID_QUANTITY_JELLY,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                VALID_REMINDER_THRESHOLD_JELLY, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ExpiryDate.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "        JsonAdaptedItem item \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new JsonAdaptedItem(VALID_NAME_JELLY, VALID_EXPIRY_DATE_JELLY, VALID_QUANTITY_JELLY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                        VALID_REMINDER_THRESHOLD_JELLY, invalidTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(IllegalValueException.class, item::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        JsonAdaptedItem item \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new JsonAdaptedItem(VALID_NAME_JELLY, VALID_EXPIRY_DATE_JELLY, INVALID_QUANTITY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                        VALID_REMINDER_THRESHOLD_JELLY, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public void toModelType_invalidReminderThreshold_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        JsonAdaptedItem item \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                new JsonAdaptedItem(VALID_NAME_JELLY, VALID_EXPIRY_DATE_JELLY, VALID_QUANTITY_JELLY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                        INVALID_REMINDER_THRESHOLD, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        String expectedMessage \u003d ReminderThreshold.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 39,
      "liawsy": 8,
      "febee99": 50,
      "JermyTan": 6
    }
  },
  {
    "path": "src/test/java/io/xpire/storage/JsonSerializableXpireTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.testutil.TypicalItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class JsonSerializableXpireTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableXpireTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final Path TYPICAL_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalItemsXpire.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final Path INVALID_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidItemXpire.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final Path DUPLICATE_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateItemXpire.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_typicalItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonSerializableXpire dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ITEMS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                JsonSerializableXpire.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire xpireFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Xpire typicalItemsXpire \u003d TypicalItems.getSampleTracker();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertEquals(xpireFromFile, typicalItemsXpire);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_invalidItemFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonSerializableXpire dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ITEM_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                JsonSerializableXpire.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toModelType_duplicateItems_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonSerializableXpire dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ITEM_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                JsonSerializableXpire.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableXpire.MESSAGE_DUPLICATE_ITEM,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 8,
      "febee99": 24,
      "JermyTan": 18
    }
  },
  {
    "path": "src/test/java/io/xpire/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        userPrefs.setXpireFilePath(Paths.get(\"xpire.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 10,
      "-": 112
    }
  },
  {
    "path": "src/test/java/io/xpire/storage/JsonXpireStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.KIWI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.TypicalItems.getTypicalExpiryDateTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "public class JsonXpireStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonXpireStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void readExpiryDateTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExpiryDateTracker(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private java.util.Optional\u003cReadOnlyXpire\u003e readExpiryDateTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return new JsonXpireStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                .readXpire(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertFalse(readExpiryDateTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                readExpiryDateTracker(\"notJsonFormatXpire.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void readExpiryDateTracker_invalidItemExpiryDateTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                readExpiryDateTracker(\"invalidItemXpire.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void readExpiryDateTracker_invalidAndValidItemExpiryDateTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                readExpiryDateTracker(\"invalidAndValidItemXpire.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void readAndSaveExpiryDateTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempXpire.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire original \u003d getTypicalExpiryDateTracker();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonXpireStorage jsonExpiryDateTrackerStorage \u003d new JsonXpireStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        jsonExpiryDateTrackerStorage.saveXpire(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ReadOnlyXpire readBack \u003d jsonExpiryDateTrackerStorage.readXpire(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(original.getItemList(), new Xpire(readBack).getItemList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "        original.addItem(KIWI);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        jsonExpiryDateTrackerStorage.saveXpire(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        readBack \u003d jsonExpiryDateTrackerStorage.readXpire(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(original.getItemList(), new Xpire(readBack).getItemList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        jsonExpiryDateTrackerStorage.saveXpire(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        readBack \u003d jsonExpiryDateTrackerStorage.readXpire().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(original.getItemList(), new Xpire(readBack).getItemList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void saveExpiryDateTracker_nullExpiryDateTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpiryDateTracker(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "     * Saves {@code xpire} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private void saveExpiryDateTracker(ReadOnlyXpire addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "            new JsonXpireStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "                    .saveXpire(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void saveExpiryDateTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpiryDateTracker(new Xpire(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 81,
      "JermyTan": 29
    }
  },
  {
    "path": "src/test/java/io/xpire/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.ReadOnlyXpire;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.testutil.TypicalItems;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        JsonXpireStorage addressBookStorage \u003d new JsonXpireStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void expiryDateTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "         * {@link JsonXpireStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonXpireStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire original \u003d TypicalItems.getTypicalExpiryDateTracker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        storageManager.saveXpire(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        ReadOnlyXpire retrieved \u003d storageManager.readXpire().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(original.getItemList(), new Xpire(retrieved).getItemList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void getExpiryDateTrackerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        assertNotNull(storageManager.getXpireFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 2,
      "febee99": 3,
      "JermyTan": 11,
      "-": 52
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/ExpiryDateTrackerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": " * A utility class to help with building ExpiryDateTracker objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": " *     {@code ExpiryDateTracker edt \u003d new ExpiryDateTrackerBuilder().withItem(\"Fruit Jam\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ExpiryDateTrackerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    private Xpire xpire;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ExpiryDateTrackerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        xpire \u003d new Xpire();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Adds a new {@code Item} to the {@code ExpiryDateTracker} that we are building."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ExpiryDateTrackerBuilder withItem(Item item) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        xpire.addItem(item);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public Xpire build() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return xpire;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 22,
      "JermyTan": 8
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/ItemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.ExpiryDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import io.xpire.model.item.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.model.item.ReminderThreshold;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import io.xpire.model.tag.TagComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ItemBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Kiwi\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String DEFAULT_EXPIRY_DATE \u003d \"1/2/2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String DEFAULT_THRESHOLD \u003d \"0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private ReminderThreshold reminderThreshold;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ItemBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expiryDate \u003d new ExpiryDate(DEFAULT_EXPIRY_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        tags \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        reminderThreshold \u003d new ReminderThreshold(DEFAULT_THRESHOLD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Initializes the ItemBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "        name \u003d itemToCopy.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        expiryDate \u003d itemToCopy.getExpiryDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        quantity \u003d itemToCopy.getQuantity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        TreeSet\u003cTag\u003e set \u003d new TreeSet\u003c\u003e(new TagComparator());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        set.addAll(itemToCopy.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        tags \u003d set;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.reminderThreshold \u003d itemToCopy.getReminderThreshold();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Sets the {@code Name} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Item} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ItemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Sets the {@code ExpiryDate} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ItemBuilder withExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.expiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     * Sets the {@code ReminderThreshold} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public ItemBuilder withReminderThreshold(String threshold) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        this.reminderThreshold \u003d new ReminderThreshold(threshold);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public ItemBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a new {@code Item} with the modified fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Item newItem \u003d new Item(name, expiryDate, quantity, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        newItem.setReminderThreshold(reminderThreshold);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 18,
      "liawsy": 15,
      "febee99": 54,
      "JermyTan": 6,
      "xiaoyu-nus": 8
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/ItemUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": " * A utility class for Item."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ItemUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns an add command string for adding the {@code item}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static String getAddCommand(Item item) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        return AddCommand.COMMAND_WORD + \"|\" + getItemDetails(item);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns the part of command string for the given {@code item}\u0027s details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static String getItemDetails(Item item) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        sb.append(item.getName().toString() + \"|\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        sb.append(item.getExpiryDate().toString()).append(\"|\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        sb.append(item.getQuantity().toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (!item.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            sb.append(\"|\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            item.getTags().forEach(s -\u003e sb.append(s.getTagName() + \" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 3,
      "liawsy": 4,
      "febee99": 21,
      "JermyTan": 6
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns the middle index of the item in the {@code model}\u0027s item list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return Index.fromOneBased(model.getFilteredItemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns the last index of the item in the {@code model}\u0027s item list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return Index.fromOneBased(model.getFilteredItemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns the item in the {@code model}\u0027s item list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static Item getItem(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return model.getFilteredItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 4,
      "JermyTan": 4,
      "-": 44,
      "xiaoyu-nus": 3
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Index INDEX_FOURTH_ITEM \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Index INDEX_FIFTH_ITEM \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Index INDEX_SIXTH_ITEM \u003d Index.fromOneBased(6);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Index INDEX_SEVENTH_ITEM \u003d Index.fromOneBased(7);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static final Index INDEX_EIGHTH_ITEM \u003d Index.fromOneBased(8);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 4,
      "liawsy": 1,
      "febee99": 3,
      "JermyTan": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/TypicalItems.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.IN_A_MONTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.IN_A_WEEK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.IN_TWO_WEEKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.PASSED_A_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.PASSED_A_WEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.TODAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_EXPIRY_DATE_CORIANDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_CORIANDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_EXPIRED_MILK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_EXPIRED_ORANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_EXPIRING_FISH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_JELLY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_NAME_KIWI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_CORIANDER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_EXPIRED_MILK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_EXPIRED_ORANGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_EXPIRING_FISH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_JELLY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_QUANTITY_KIWI;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_REMINDER_THRESHOLD_CORIANDER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_REMINDER_THRESHOLD_EXPIRING_FISH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_REMINDER_THRESHOLD_JELLY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_REMINDER_THRESHOLD_KIWI;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_FRIDGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_HERB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "import static io.xpire.testutil.TypicalItemsFields.VALID_TAG_PROTEIN;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.Xpire;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.model.item.Item;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class TypicalItems {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item BANANA \u003d new ItemBuilder().withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                                            .withExpiryDate(IN_TWO_WEEKS)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                            .withQuantity(VALID_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item KIWI \u003d new ItemBuilder().withName(VALID_NAME_KIWI)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                                                      .withExpiryDate(IN_A_MONTH)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                      .withQuantity(VALID_QUANTITY_KIWI)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                      .withReminderThreshold(VALID_REMINDER_THRESHOLD_KIWI).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //with tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item DUCK \u003d new ItemBuilder().withName(VALID_NAME_DUCK)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                                                     .withExpiryDate(IN_A_MONTH)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                     .withTags(VALID_TAG_FRIDGE, VALID_TAG_PROTEIN)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                     .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    //with all fields (tags, reminder threshold, quantity)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item JELLY \u003d new ItemBuilder().withName(VALID_NAME_JELLY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                                                        .withExpiryDate(IN_A_MONTH)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                        .withQuantity(VALID_QUANTITY_JELLY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                        .withTags(VALID_TAG_FRIDGE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                        .withReminderThreshold(VALID_REMINDER_THRESHOLD_JELLY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                        .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    // expiring soon"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item EXPIRING_FISH \u003d new ItemBuilder().withName(VALID_NAME_EXPIRING_FISH)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                                                               .withExpiryDate(IN_A_WEEK)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                               .withQuantity(VALID_QUANTITY_EXPIRING_FISH)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                               .withReminderThreshold("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                                       VALID_REMINDER_THRESHOLD_EXPIRING_FISH)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                               .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    // already expired"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item EXPIRED_APPLE \u003d new ItemBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "                                                              .withExpiryDate(TODAY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                              .withQuantity(VALID_QUANTITY_APPLE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item EXPIRED_ORANGE \u003d new ItemBuilder().withName(VALID_NAME_EXPIRED_ORANGE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                                                             .withExpiryDate(PASSED_A_DAY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                             .withQuantity(VALID_QUANTITY_EXPIRED_ORANGE).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    // expired for a longer time"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item EXPIRED_MILK \u003d new ItemBuilder().withName(VALID_NAME_EXPIRED_MILK)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                                                             .withExpiryDate(PASSED_A_WEEK)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                             .withQuantity(VALID_QUANTITY_EXPIRED_MILK).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    // sample item to test JsonSerializableXpire"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final Item CORIANDER \u003d new ItemBuilder().withName(VALID_NAME_CORIANDER)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                          .withExpiryDate(VALID_EXPIRY_DATE_CORIANDER)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                          .withQuantity(VALID_QUANTITY_CORIANDER)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                          .withTags(VALID_TAG_HERB, VALID_TAG_FRIDGE)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                          .withReminderThreshold(VALID_REMINDER_THRESHOLD_CORIANDER)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "                                                          .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private TypicalItems() {} // prevents instantiation"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns an {@code Xpire} with all the typical items."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "    public static Xpire getTypicalExpiryDateTracker() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "        Xpire edt \u003d new Xpire();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (Item item : getTypicalItems()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            Item copyItem \u003d new Item(item);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "            edt.addItem(copyItem);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return edt;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static Xpire getSampleTracker() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        Xpire edt \u003d new Xpire();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        edt.addItem(new Item(CORIANDER));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "        return edt;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static List\u003cItem\u003e getTypicalItems() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EXPIRED_MILK, BANANA, EXPIRED_APPLE, EXPIRED_ORANGE, EXPIRING_FISH, DUCK,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                JELLY));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 75,
      "liawsy": 3,
      "febee99": 29,
      "JermyTan": 5,
      "xiaoyu-nus": 14
    }
  },
  {
    "path": "src/test/java/io/xpire/testutil/TypicalItemsFields.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "package io.xpire.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static io.xpire.model.item.ExpiryDate.DATE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import io.xpire.commons.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " * Contains all fields of TypicalItems."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "public class TypicalItemsFields {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_NAME_APPLE \u003d \"Apple\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_NAME_BANANA \u003d \"Banana\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_NAME_CORIANDER \u003d \"Coriander\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_NAME_DUCK \u003d \"Duck\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_NAME_JELLY \u003d \"Jelly\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_NAME_KIWI \u003d \"Kiwi\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_NAME_EXPIRING_FISH \u003d \"Fish\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_NAME_EXPIRED_MILK \u003d \"Milk\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_NAME_EXPIRED_ORANGE \u003d \"Orange\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String TODAY \u003d DateUtil.convertDateToString(LocalDate.now(), DATE_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String IN_A_WEEK \u003d DateUtil.convertDateToString(LocalDate.now().plusDays(7), DATE_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String IN_TWO_WEEKS \u003d DateUtil.convertDateToString(LocalDate.now().plusDays(14), DATE_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String IN_A_MONTH \u003d DateUtil.convertDateToString(LocalDate.now().plusDays(30), DATE_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String PASSED_A_DAY \u003d DateUtil.convertDateToString(LocalDate.now().minusDays(1), DATE_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String PASSED_A_WEEK \u003d DateUtil.convertDateToString(LocalDate.now().minusDays(7), DATE_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_APPLE \u003d TODAY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_BANANA \u003d IN_TWO_WEEKS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_CORIANDER \u003d \"31/12/9999\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_DUCK \u003d IN_A_MONTH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_KIWI \u003d IN_A_MONTH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_JELLY \u003d IN_A_MONTH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_EXPIRING_FISH \u003d IN_A_WEEK;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_EXPIRED_MILK \u003d PASSED_A_WEEK;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_EXPIRED_ORANGE \u003d PASSED_A_DAY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_QUANTITY_APPLE \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_QUANTITY_BANANA \u003d \"5\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_QUANTITY_CORIANDER \u003d \"999\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_QUANTITY_DUCK \u003d \"1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_QUANTITY_JELLY \u003d \"4\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_QUANTITY_KIWI \u003d \"2\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_QUANTITY_EXPIRING_FISH \u003d \"1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_QUANTITY_EXPIRED_MILK \u003d \"2\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_QUANTITY_EXPIRED_ORANGE \u003d \"1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_TAG_DRINK \u003d \"Drink\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_TAG_FRIDGE \u003d \"Fridge\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_TAG_FRUIT \u003d \"Fruit\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_TAG_HERB \u003d \"Herb\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_TAG_PROTEIN \u003d \"Protein\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_APPLE \u003d \"0\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_BANANA \u003d \"0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_CORIANDER \u003d \"2\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_DUCK \u003d \"0\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_JELLY \u003d \"3\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_KIWI \u003d \"20\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_EXPIRING_FISH \u003d \"8\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_EXPIRED_MILK \u003d \"0\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String VALID_REMINDER_THRESHOLD_EXPIRED_ORANGE \u003d \"0\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String INVALID_NAME \u003d \"@pple\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String INVALID_EXPIRY_DATE \u003d \"50505000\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String INVALID_EXPIRY_DATE_RANGE \u003d \"50/50/5000\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String INVALID_TAG \u003d \"$cold\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String INVALID_QUANTITY \u003d \"-2\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "    public static final String INVALID_REMINDER_THRESHOLD \u003d \"-5\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kalsyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kalsyc": 52,
      "xiaoyu-nus": 23
    }
  },
  {
    "path": "src/test/java/io/xpire/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/io/xpire/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "package io.xpire.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import static io.xpire.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "import io.xpire.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JermyTan": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003c?import io.xpire.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "JermyTan": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JermyTan"
        },
        "content": "\u003cfx:root type\u003d\"io.xpire.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "JermyTan": 1
    }
  }
]
