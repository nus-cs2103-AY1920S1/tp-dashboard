[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d ORGANice"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": "ORGANice is an organ transplant manager. +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This desktop application aims to facilitate the matching of organ transplants between patients and organ donors in hospitals. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SimNee"
        },
        "content": "It is written in Java language in an Object-oriented fashion."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Motivation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": "It is undeniable that organ transplantation is one of the most life-changing medical breakthroughs in history. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "For a transplant to be successful, we need to have an organ that matches the receiver. +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": "Since time is precious during transplant, we aim to provide an organ matching system to efficiently match organs from donors to the patients who need them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Target Users"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This application is intended for hospital admin staff such as doctors and nurses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Installation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "You can download the https://github.com/AY1920S1-CS2103T-T13-1/main/releases/[jar] file and run it from your desktop."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Usage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "You can refer to the \u003c\u003cUserGuide#, User Guide\u003e\u003e for a more detailed explanation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Technology and Framework Used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    Java SE Development Kit 11.0.4"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    Travis"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    Gradle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Screenshot of User Interface"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Build Status"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T13-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-T13-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Coverage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SimNee"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* Some parts of ORGANice were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* ORGANice is adapted from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "SimNee": 41
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "mainClassName \u003d \u0027organice.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "ORGANice is being developed by team https://github.com/AY1920S1-CS2103T-T13-1[CS2103T-T13-1]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "We are a group of students in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d William Ryan Kusnadi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::williamryank.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[https://github.com/WilliamRyank[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: In charge of overall project coordination."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Chow Jia Ying"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::c-likethis123.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[https://github.com/C-likethis123[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: Deliverables and Deadlines +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: Ensure project deliverables are done in right format and submitted on time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Iskandar Zulkarnaien Bin Suhaini"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::therealravager.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[https://github.com/TheRealRavager[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: Tester +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Chua Sim Nee"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::simnee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[https://github.com/SimNee[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: Ensure proper coding standards are followed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Yip Yen Peng"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::yen-peng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[http://github.com/Yen-Peng[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: UI designer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: In charge of the UI design of the application."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 1,
      "-": 28,
      "Yen-Peng": 27
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "* *Email us* : You can also reach us at `iskandar [at] u.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003d ORGANice - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "By: `CS2103T-T13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Classes used by multiple components are in the `organice.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Matching feature"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section describes how the matching feature is implemented."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Matching is done by accessing `Patient` and `Donor` in `ModelManager`, then creating"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`MatchedPatient` and `MatchedDonor` objects to store the match results. The `MatchedPatient` and `MatchedDonor` objects"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "are stored in a separate `listOfMatches` list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To facilitate the matching, the following methods were added to `ModelManager`:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* `ModelManager#matchDonors(Patient patient)` -- Matches all donors in ORGANice with the specified Patient."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SimNee"
        },
        "content": "For each Donor that matches the patient, a `MatchedDonor` objected is created and stored."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* `ModelManager#matchPatients()` -- Matches all donors with all patients."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After matching the patients and donors, the `MainWindow` decides which list to display via the `CommandResult#isMatch`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "method."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This section will explain the reason for having some aspects."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Bugs introduced"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section explains why the current implementation is chosen."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Previously, the matching feature was implemented by storing match results in the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`Patient` and `Donor` objects."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Each `Patient` and `Donor` has a `isMatch()` method, which checks if the match results should be displayed"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "or if the `Patient` and `Donor` attributes should be displayed. The match results will be displayed when `isMatch()`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "evaluates to `true`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "It was discovered that there were many bugs introduced via this approach. The root cause of the bugs could not be"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "identified."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "// tag::formmode[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003d\u003d\u003d Add person `Form` mode feature"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "The `Form` mode mechanism is facilitated by `FormUiManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "It modifies the `CommandBox` as well as `PersonPanelListPlaceholder` each time a user input a specific attribute."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* `FormUiManager#getPersonField()` -- Modifies `CommandBox` and prompts the user to input a specific attribute."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* `FormUiManager#setPersonDetails()` -- Sets the value for all required attributes of a specific type of person."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* `FormUiManager#addDoctorToList()` -- Adds a doctor to the person list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* `FormUiManager#addPatientToList()` -- Adds a patient to the person list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* `FormUiManager#addDonorToList()` -- Adds a donor to the person list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "These operations are exposed in the `Logic` interface when the specific command is invoked by the user."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Given below is an example usage scenario and how the `Form` mode mechanism behaves at each step:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Step 2. The user executes `add t/doctor` command to add a doctor in a `Form` mode. The `add` command calls `AddressBookParser#parseCommand()` that will return a new `AddCommand` instance."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Step 3. The `LogicManager` executes the command and notice that the `Command` is a `Form` type command and thus will create a new `FormUiManager` instance."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Step 4. The `FormUiManager` changes the display of the application based on the type of the person specified in Step 1 by modifying the content of the `PersonListPanelPlaceholder` as well as the `CommandExecutor` in the `CommandBox` object by calling `FormUiManager#getPersonFields()`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Step 5. The user inputs the attribute that is prompted until all the required attributes are specified."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Step 6. The user confirms the details of the person and `FormUiManager#setPersonDetails()` will be called and depending on the type of the person specified, calling `FormUiManager#addDoctorToList()`, or `FormUiManager#addPatientToList()`, or `FormUiManager#addDonorToList()` respectively."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Step 7. `FormUiManager` calls the `AddressBookParser#parseCommand()` to add the person and save it in the `Storage` interface."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This section will explain the reason for having some aspects."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* **Alternative 1 (current choice):** Use the same `add` command to do the `Form` mode."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "** Cons: May not be the best approach since one command will have two different modes."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* **Alternative 2:** Use a new command for the `Form` mode."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "** Pros: Will be less confusing for the user since there is a separate command for `Form` mode"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "** Cons: We must creates a new parser and command classes just to deal with another `add` functionality."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "// end::formmode[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This section describes how the sort feature is implemented."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SimNee"
        },
        "content": "Sorting is done by using `Comparators` in the `Logic` component."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SimNee"
        },
        "content": "To facilitate the sorting, the following methods were added:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SimNee"
        },
        "content": "{More to be added}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SimNee"
        },
        "content": "Given below is the Sequence Diagram for the interactions with the `Logic` component for the `execute(sort/rate)`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SimNee"
        },
        "content": ".Structure of the Logic Component when executing `sort` command"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SimNee"
        },
        "content": "image::SortSequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This section will explain the reason for having some aspects."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d\u003d Processing feature"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This section describes how the processing feature is implemented."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SimNee"
        },
        "content": "Processing is done by accessing `Patient` and `Donor` in `ModelManager`, then creating an ArrayList named, `ProcessingList` to store the tasks needed to do."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SimNee"
        },
        "content": "If the donor and patient pair had never been processed before, a default `ProcessingList` will be generated and it will belong to the patient and donor pair uniquely."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SimNee"
        },
        "content": "If the user made any changes to the `ProcessingList`, the list will be saved to the donor as one of its attribute which takes in a parameter of the patient\u0027s NRIC."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SimNee"
        },
        "content": "//Todo: additional feature such as add tasks, delete tasks etc"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This section will explain the reason for having some aspects."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Method of storing the `ProcessingList`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* **Alternative 1 (current choice):** Use ArrayList to store the tasks."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SimNee"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SimNee"
        },
        "content": "** Cons: It is not the most efficient algorithm and the huge number of `ProcessingList` may take up a huge datafile at the end of the day."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* **Alternative 2:** Use a new class that works like ArrayList."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SimNee"
        },
        "content": "** Pros: Able to implement more specific methods for the ProcessingList."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SimNee"
        },
        "content": "** Cons: More methods and test cases needed and it is harder to implement."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* hospital administrative staff who need to find matches between patients and organ donors"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "*Value proposition*: find matches between a patient and potential organ donors faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |add a new patient/donor/doctor |"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |delete a patient/donor/doctor |remove entries that I no longer need"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |find a patient/donor/doctor using certain keywords |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |find potential donors for a patient |help the patient find a donor as fast as possible"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |process a patient and a donor |prepare them for the surgery process"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |see list of a particular patient\u0027s potential donors|know list of potential donors for a particular patient"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |see list of all patients/donors/doctors|"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |careless user |edit a patient/donor/doctor|"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |mark a match as done|know that a particular match has undergone a surgery"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |sort the potential donors by success rate/priority|match a patient with the best possible donor"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * ` |user |add multiple data using external file|reduce the time to add in a data into the system"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * ` |user |find a patient/donor/doctor with incomplete keywords|reduce the time to type in the whole keyword"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "(For all use cases below, the *System* is the `ORGANice` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003d\u003d\u003d Use case: Add patient/donor/doctor in a form mode"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "1.  User requests to add a patient/doctor/donor in a form mode."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "2.  ORGANice shows a form depending on the type of person specified by the User."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "3.  OGRANice prompts the User to type in the required attributes one at a time."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "4.  User inputs in the attribute of the person prompted by ORGANice."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "[none]Steps 3-4 are repeated until the user has inputted all the required attributes for a specific type of person."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "5.  ORGANice prompts the User to confirm the attributes of the person."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "6.  User confirms the attributes specified."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "7.  ORGANice adds the person to the list."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "4a. The attribute that the User tries to input is not valid."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* 4a1. ORGANice shows a warning to the User and specifies the pattern of a valid input."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* 4a2. User inputs a new value for the attribute."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* Steps 4a1-4a2 are repeated until the input data is valid for the current attribute prompted by ORGANice."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* Use case resumes from step 3 if there are more attributes to fill in, if not it will resumes from step 5."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "*a. At any time, User chooses to abort the form."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* *a1. ORGANice nullifies the form."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* Use case ends."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003d\u003d\u003d Use case: Match a patient and a donor"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "1.  User requests to list potential donors for a particular patient"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "2.  ORGANice shows a list of potential donors for the patient"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "3.  User requests to process the patient with a specified donor"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "4.  ORGANice matches the patient and the specified donor"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Use case: List all patients/donors/doctors"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "1.  User requests to list patients/donors/doctors."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "2.  ORGANice shows the list of patients/donors/doctors."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "* 1a. ORGANice detects an invalid parameter."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "+"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "** 1a1. ORGANice requests for correct parameter."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "** 1a2. User enters correct parameter."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "+"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Use case: Sort"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "1.  User requests to sort the list of donors of a particular patient."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "2.  ORGANice sorts the list of donors according to the parameters."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "+"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "* 1a. ORGANice detects invalid parameter(s)."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "+"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "** 1a1. ORGANice prompts for valid parameter(s)."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "+"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "** 1a2. User enters correct parameter(s)."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "+"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "+"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SimNee"
        },
        "content": "+"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ".  The system should be usable by a novice."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ".  The source code should be \u003c\u003copen-source,open source\u003e\u003e."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ".  The user interface should be intuitive enough for users who are not IT-savvy."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "[[open-source]] Open Source::"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Software for which the original source code is made freely available and may be redistributed and modified."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 77,
      "C-likethis123": 24,
      "TheRealRavager": 1,
      "-": 356,
      "Yen-Peng": 40,
      "SimNee": 34
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ". Run the `organice.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "e.g. `organice.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "e.g. `organice.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "e.g. `organice.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d ORGANice - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ":javaURL: https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "By: `CS2103T-T13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This user guide explains how to use ORGANice to manage organ transplants."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "ORGANice is a desktop application for hospital administration staff who prefer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "to use Command Line Interface applications to manage organ transplants."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "With ORGANice, you can easily do the following:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* organise information about patients, doctors, and donors"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* find matches between organ donors and patients"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "If you are a hospital administrator and would like to use ORGANice, check out \u003c\u003cQuick Start\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "to get started."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Below is a list of things to do to use the application:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "1.  Ensure you have Java `11` or above installed in your computer. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "If not, install it link:{javaURL}[here]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "2.  Download the latest `organice.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "3.  Copy the JAR file to the folder you want to use as the home folder for your application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "4.  Double-click the JAR file to start the application. The application should appear in a few seconds."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Figure 1 shows how the application looks like after starting it."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ".**How ORGANice looks upon starting up**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "If what you are seeing on your screen looks like what is shown in Figure 1, congratulations! You have successfully started the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Now that you have have succeeded, it is time to learn about the various components in this application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d Components of ORGANice"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section aims to introduce you to the various components of ORGANice."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "We will be using Figure 2, which has all the components of ORGANice labelled."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ".**Components of ORGANice**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "image::ORGANiceComponents.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The following list explains each component and the function of that component:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Component: Command Box"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Function of component: the Command Box is a text box for you to type in commands. Commands are instructions to ORGANice to perform a feature."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Component: Message Display Box"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Function of component: the Message Display Box displays messages after executing commands. These messages aim to let you know if"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "you have succeeded or failed in executing a command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Component: Person List"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Function of component: the Person List is a display of people\u0027s information stored in ORGANice. You can scroll down this list to see"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "more people in this application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Now that you know the components of ORGANice, let\u0027s move on to \u003c\u003cFeatures\u003e\u003e to learn how to use the features in ORGANice."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section will introduce you to the list of features and commands in this application."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Each feature is triggered by a command with a specific format. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The list below explains how the format of the commands should be interpreted:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* The first word in a command is the command word. The rest of the words are parameters, which"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "are either compulsory or optional. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "e.g. in a command `add n/**NAME** p/**PHONE**`, `add` is the command word while `n/**NAME** p/**PHONE**`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "are parameters."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Words in bold are the parameters to be supplied by the user +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "e.g. in `add **n/NAME**`, `**NAME**` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Parameters can be in any order +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "e.g. if the command specifies `n/**NAME** p/**PHONE**`, `p/**PHONE** n/**NAME**`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "is also acceptable."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "In ORGANice, a person\u0027s data is represented by attributes. Attributes"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "refer to personal particulars such as name, type of person and blood type. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The following list shows the list of attributes that can be specified for"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "a person and the criteria for valid inputs:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*List of Attributes*:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* n/**NAME**: the name of the person"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, doctors, donors"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: alphabets"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* t/**TYPE**: the type of person"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, doctors, donors"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: patient/donor/doctor"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* o/**ORGAN**: the type of organs"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, donors"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: kidney"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* b/**BLOODTYPE** - the blood type of the person"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients and donors"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: A/B/AB/O"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* p/**PHONE** - contact number of a person"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, doctors, donors"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: 8 digit number sequence, starting with 6, 8 or 9"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* ic/**NRIC** - NRIC number of a person"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, doctors and donors"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: any sequence of alphabets and numbers that fulfill these criteria:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*** starts with a capital S, F, T, or G"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*** followed by a 7 digit number sequence"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*** ends with a capital letter"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* pr/**PRIORITY** - priority of the patient, the value of which is determined by a doctor"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: high/medium/low"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* a/**AGE** - age of a person"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients and donors"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: a number"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* d/**DOCTOR** - doctor in charge of a patient"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: NRIC of the doctor"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* tt/**TISSUE TYPE** - the type of tissues"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients and donors"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: a string of 6 numbers (from 1 - 12), separated by commas"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* exp/**EXPIRY** - expiry date of a donor\u0027s organ"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: donors"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: a valid date in DD-MMM-YYYY format"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "There may be times where you do not understand how ORGANice works, or you need a simple reminder on how to use"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "ORGANice. This command allows you to access the user guide to ORGANice."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". Type `help` in the Command Box and press kbd:[Enter]."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". A new window is launched, as shown in Figure 3. Open the link in a browser to read this document."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". Click the x button to close the window and return to the default display."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ".**Help Window**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "image::HelpWindow.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This command allows you to add a patient, doctor, or donor to ORGANice with the attributes given,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "depending on what is specified."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "There are two methods to add a person:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Method 1: Normal Add"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Method 2: Add with system prompting"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To understand how to add a person via the \u0027Normal Add\u0027 method, go to \u003c\u003cNormal Add\u003e\u003e."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To understand how to add a person via the \u0027Add with system prompting\u0027 method, go to \u003c\u003cAdd with system prompting\u003e\u003e."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Normal Add"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Normal add refers to specifying all the attributes in the command. To add, type in the following"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "commands to add a person:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format for adding patients: `add t/patient n/**NAME** o/**ORGAN** b/**BLOOD TYPE** tt/**TISSUE TYPE**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "p/**PHONE** pr/**PRIORITY** ic/**NRIC** d/**DOCTOR** a/**AGE**` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format for adding donors: `add t/donor n/**NAME** o/**ORGAN** b/**BLOOD TYPE** tt/**TISSUE TYPE**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "p/**PHONE** ic/**NRIC** exp/**EXPIRY** a/**AGE**` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format for adding doctors: `add t/doctor n/**NAME** ic/**NRIC** p/**PHONE**`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After adding a person, ORGANice will display a form which contains the attributes of the person. Press"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "kbd:[Enter] to confirm the details."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "View the List of Attributes in the beginning of \u003c\u003cFeatures\u003e\u003e to find out what each attribute mean."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `add t/patient n/John Doe o/kidney b/A tt/1,2,3,4,5,6 p/98765432 pr/high ic/S9988330G"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "d/S2235456D a/29`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `add t/donor n/Betsy Kim o/kidney b/AB tt/2,5,7,8,9,10 p/99998888 ic/S2345678H"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "exp/23-Nov-2020 a/21`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `add t/doctor n/Lim Chu Kang p/91054444 ic/S5678908D`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Add with system prompting"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "In this mode, the user can add the person\u0027s attributes one by one."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After entering an attribute, the system will prompt the user input for another attribute."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `add t/**TYPE**`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "When the user type in the command above, a form will be displayed. For example, if a user wants to add a patient,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "type `add t/patient` to the command box. The form will be as below:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "image::form.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "ORGANice will prompt the user to type in each attribute, one by one until all the fields are filled."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "For example, when a user wants to add a patient, the display box will prompt the user to enter the patient\u0027s name."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "For the user to add a patient that is named \"John Doe\", type `John Doe` and then press enter."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "After entering the name, the patient\u0027s name will be displayed in the form, as shown below."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "image::nameField.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Inputs for each attribute will be checked, if it is a valid input then the user input will automatically reflected"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "on the form, if it is not valid, ORGANice will show a warning to the user."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "The following screenshot shows the warning that ORGANice will give to the user if the input is not valid:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "image::wrongInput.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "After all of the attributes have been specified, the user can type `/done` to add the person to the ORGANice list of persons"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "or `/abort` if the user decided not to add the person into the list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "image::allField.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "When the user typed `/done` the UI will changed back to it\u0027s original state and shows a success message suggesting that"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "the user has successfully added a new person into the list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "image::addSuccess.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Listing persons : `list`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Shows a list of all doctors, donors, or patients in ORGANice, depending on the type of person specified. Shows all"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "persons in ORGANice if no type is specified."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Optional parameters: Type parameter - `t/TYPE`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Lists all patients, doctors and donors in the records."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "* `list t/patient` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Lists all patients only."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Edits the information of the person with the specified NRIC to the attributes specified."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "It is up to the user to specify which attributes should be updated. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `edit ic/**NRIC**`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Optional parameters: any parameter from the \u003c\u003cList of Attributes\u003e\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After editing, ORGANice will display a form to show what information will be stored about"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "the person after confirming the changes. The user is free to edit the fields before"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "changes are confirmed."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `edit ic/S8732457G p/91234567` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Edits the phone number of the specified patient to be `91234567`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `edit ic/S8732457G n/Betsy Crower b/A` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Edits the name and blood type of the specified donor to be `Betsy Crower` and `A` respectively."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Finds persons whose attributes contain any of the given keywords."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "A list of patient/donor/doctor\u0027s information whose attributes partially match the keywords"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "will be displayed. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `find`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Optional parameters: any parameter from \u003c\u003cList of Attributes\u003e\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Persons matching at least one attribute will be returned. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "e.g. `a/28 n/Hans Bo` will return people whose attributes are `n/Hans Gruber`, `n/Bo Yang`,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`a/28 n/Jane`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `find t/patient n/Lim` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Returns any patient whose name contains \u0027Lim\u0027"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Deletes the specified person from ORGANice."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Match history of a deleted patient or donor with other patients/donors will be removed. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `delete ic/**NRIC**`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`delete ic/S98654322D` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Deletes a person with the NRIC S98654322D in ORGANice."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Detecting matches: `match`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This command runs a kidney matching test on patients and donors in ORGANice and displays the match results."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Refer to \u003c\u003cFAQ\u003e\u003e for a better understanding of the procedure for kidney matching."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "You can either run a kidney matching test on all patients and donors or find matching donors for a specific patient."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To learn how to run kidney matching tests on all patients, refer to \u003c\u003cMatching all patients\u003e\u003e. To learn how to run"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "kidney matching tests on a specific patient, refer to \u003c\u003cMatching a specific patient\u003e\u003e."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Matching a specific patient"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section will explain how to run kidney matching tests on a specific patient and run you through an example."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To run a match of a specific patient, type in a command of the format `match ic/**NRIC**`."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Here is an example. Suppose you want to match a specific patient called \"John Doe\" and his NRIC is \"S1234568R\". This is"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "what you can do:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". Type `match ic/S1234568R` in the Command Box and press kbd:[Enter]."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". The list of donors and their success rate are displayed as shown in the screenshot below. The success rate is a number"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "which indicates the degree of compatibility between the patient and donor. +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "image::MatchingDonorsDisplayed.png[width\u003d790]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "+"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Matching all patients"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section will explain how to run kidney matching tests on all patients stored in ORGANice and run you"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "through an example."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To match all the patients in ORGANice, do the following:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". Type `match ic/all` in the command box and press kbd:[Enter]."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". The list of patients and the number of matching donors each patient have are displayed in the screenshot below."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "+"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "image::Patient Matches Displayed.png[width\u003d790]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "+"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Sorting matches: `sort`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Users can specify how they want the patient-donor pairs to be sorted. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Sorting is done by passing in optional parameters to the `match` command. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Matches can be sorted according to three categories:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "1. Success rate of match"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "2. Priority of patient"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "3. Date of expiry of donors\u0027 organs"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To return a sorted list of patient-donor pairs, include the `sort/` flag in the command. +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`match ic/**NRIC** sort/[rate/priority/expiry]`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Typing this command causes the application to display a list of matches sorted"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "according to the specified criteria. More than one sorting criteria can be included."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `match ic/S7778983D sort/rate`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `match ic/S7778983D sort/rate, priority, expiry`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Processing potential matches: `processing`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "//TODO: change to shorter term that captures the meaning"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After finding a list of matches, the hospital is free to schedule a cross-matching test between"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "a specific donor and patient. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After typing this command, the following changes occur:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* A list will be generated to show the necessary tasks the hospital need to do for the respective donor and patient."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* The list will be unique to the specific donor and patient pair"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* The list can be updated using `done** TASK NUMBER**` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SimNee"
        },
        "content": "The list will be saved after the command `exit` is executed. The page will then stop displaying the list."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SimNee"
        },
        "content": "Format: `processing ic/**PATIENT NRIC** ic/**DONOR NRIC**` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SimNee"
        },
        "content": "The order of the NRICs does not matter."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SimNee"
        },
        "content": "`processing ic/S6764235G ic/S1234567D`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Mark as done : `done`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After the hospital has the results of the cross matching test, they can"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "update the results in ORGANice. Cross matching tests have two possible results: pass or fail."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `done icP/**NRIC OF PATIENT** icD/**NRIC OF DONOR** res/[pass/fail]`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`icP/**NRIC OF PATIENT**` refers to the NRIC of the patient, while `icD/**NRIC OF DONOR**`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "refers to the NRIC of the donor."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The following section outlines what happens based on the two results: +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "If the result of the cross matching is a \u0027pass\u0027:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". It is up to the hospital staff to schedule an organ transplant surgery"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "between the patient and donor."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". Mark the patient and donor as \u0027done\u0027, based on the command format."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". After running the command, the system removes the patient and donor from the matching pool."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The patient and donor statuses will be marked to \u0027done\u0027."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "If the result of the cross matching is a \u0027fail\u0027: +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". Run the command based on the given format"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". The patient and donor will be added back to the matching pool for"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "match detection with other patients and donors."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". The patient-donor pair will not be considered a potential match in future match detection."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `done icP/S7896432A icD/S4578902G res/pass`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `done icP/S7896432A icD/S4578902G res/fail`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Detecting duplicates"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "When adding a person, ORGANice will detect if the input is a duplicate of another person in the list."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "A duplicate is defined as: Two persons of the same type who have the same NRIC."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "When a duplicate is detected, ORGANice will indicate that there is such a person in ORGANice so the inputs"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "should be changed."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d Future improvements"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section describes features that can be added or improved in version 2.0."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "It is further divided into two sub-sections: **Proposed New Features** and **Proposed Extensions**."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Proposed New Features"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section describes features that can be added to ORGANice in version 2.0."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering persons: `filter`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Filters a patient/doctor/donor by specific attributes."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `filter [patient/donor/doctor] [options]`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Returns a list of patients/doctors/doctors that has the specified attributes."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `filter t/patient g/M`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `filter t/donor g/M n/Chua`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Proposed Extensions"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section describes features that can be improved on and its proposed improvements."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Mass addition of data"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Add more than one patient/doctor/donor from data in a specified text file."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "A duplicate is defined as: two persons of the same type having the same ID."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "When a duplicate is detected, it prompts the user to change the data in the text file."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Supporting more types of transplants"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Currently ORGANice has patient-donor matching for kidneys only. Future versions can include matching for +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "more types of organs."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Processing a match: `process`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Emails the doctor in charge of a patient when an organ match for the patient is found."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `process **NRIC**`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Advanced find"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Finding in v2.0 is more advanced with the implementation of fuzzy search and partial matching of keywords."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "that contains the data of your previous ORGANice folder."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*Q*: What are the steps to find a patient-donor kidney match? +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*A*: There are three steps to finding a patient-donor match:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "1. Do a blood test to determine donor and patient blood type."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "2. Do a tissue typing test to determine the HLA antigens of the patient and the donor."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "3. Do a cross match, which is a trial transfusion."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section summarises the commands to use this application. The following list"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "contains the summary of the commands."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Add (Normal Mode):*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Add patient: `add t/patient n/NAME o/ORGAN b/BLOOD TYPE tt/TISSUE TYPE p/PHONE pr/PRIORITY ic/NRIC d/DOCTOR a/AGE`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Add donor: `add t/donor n/**NAME** o/**ORGAN** b/**BLOOD TYPE** tt/**TISSUE TYPE**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "p/**PHONE** ic/**NRIC** exp/**EXPIRY** a/**AGE**`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Add doctor: `add t/doctor n/**NAME** ic/**NRIC** p/**PHONE*`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Add (System Prompt Mode)*: `add t/**TYPE**`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Delete* : `delete ic/**NRIC**` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Edit* : `edit ic/**NRIC**`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Optional parameters: any parameter from \u003c\u003cList of Attributes\u003e\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Find* : `find`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Optional parameters: any parameter from \u003c\u003cList of Attributes\u003e\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Match* : `match [all/ic]`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Optional parameters: `sort/[rate/expiry/priority]` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Processing*: `processing icP/**NRIC of Patient** icD/**NRIC OF DONOR**`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *List* : `list t/**TYPE**`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Done* : `done icP/**NRIC of Patient** icD/**NRIC OF DONOR** `"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section contains a list of words used in this user guide and its intended meaning."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "It is meant to clarify the meaning and context of the words used in this user guide."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* user: refers to hospital administration staff who are using this desktop application"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* person: refers to doctors, patients or donors"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* blood type match: refers to a donor and patient whose blood types are compatible."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* tissue match: refers to a donor and patient whose tissues match"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* cross match: a trial blood transfusion, where donor and patient\u0027s blood are mixed in a test tube to check +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "for harmful interactions between patient and donor\u0027s blood"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* potential match: refers to a donor-patient pair whose organs pass the blood test and tissue typing test."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* match: refers to a donor-patient pair whose organs pass all three matching tests"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* duplicate: refers to two persons of the same type which have the same NRIC"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 27,
      "C-likethis123": 431,
      "-": 94,
      "Yen-Peng": 6,
      "SimNee": 8
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Nric"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Package Doctor {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Doctor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Package Patient {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Patient"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Priority"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class DoctorInCharge"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Age"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class BloodType"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class TissueType"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Organ"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Package Donor{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Donor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Age"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class BloodType"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class TissueType"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class Organ"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Class OrganExpiryDate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Doctor .up.|\u003e Person"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Patient .up.|\u003e Person"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Donor .up.|\u003e Person"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Person *--\u003e Type"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Person *--\u003e Nric"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Patient *--\u003e Priority"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Patient *--\u003e DoctorInCharge"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Patient *--\u003e Age"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Patient *--\u003e BloodType"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Patient *--\u003e TissueType"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Patient *--\u003e Organ"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Donor *--\u003e OrganExpiryDate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Donor *--\u003e Age"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Donor *--\u003e BloodType"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Donor *--\u003e TissueType"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Donor *--\u003e Organ"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Type -[hidden]down-\u003e Nric"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Nric -[hidden]down-\u003e Name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Name -[hidden]down-\u003e Phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Age -[hidden]down-\u003e BloodType"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "BloodType -[hidden]down-\u003e TissueType"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "TissueType -[hidden]down-\u003e Organ"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "rgan -[hidden]right-\u003e Priority"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "Yen-Peng": 46
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "participant \":MatchCommandParser\" as MatchCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "participant \"s:MatchCommand\" as MatchCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "[-\u003e LogicManager : execute(\"sort/rate\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"sort/rate\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "create MatchCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "AddressBookParser -\u003e MatchCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "activate MatchCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "MatchCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "deactivate MatchCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "AddressBookParser -\u003e MatchCommandParser : parse(\"rate\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "activate MatchCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "create MatchCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "MatchCommandParser -\u003e MatchCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "activate MatchCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "MatchCommand --\u003e MatchCommandParser : s"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "deactivate MatchCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "MatchCommandParser --\u003e AddressBookParser : s"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "deactivate MatchCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "MatchCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "destroy MatchCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "AddressBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "LogicManager -\u003e MatchCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "activate MatchCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "MatchCommand -\u003e ModelManager : sortBySuccessRate()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "ModelManager --\u003e MatchCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "MatchCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "CommandResult --\u003e MatchCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "MatchCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "deactivate MatchCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Yen-Peng": 69
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Create a `RemarkCommandParser` class in the `organice.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Create a new `Remark` in `organice.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`organice.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 6,
      "-": 419
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "The `address` field in `Person` is actually an instance of the `organice.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "`organice.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/organice/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/organice/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * The main entry point to the application..."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it cannot"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 22,
      "SimNee": 2
    }
  },
  {
    "path": "src/main/java/organice/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 24,
      "-": 159
    }
  },
  {
    "path": "src/main/java/organice/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/organice/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/organice/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/organice/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/organice/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/organice/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/organice/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/organice/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/organice/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/organice/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/organice/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/organice/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/organice/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/organice/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/organice/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @see organice.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns a list of MatchedDonors"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    ObservableList\u003cPerson\u003e getMatchList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 5,
      "TheRealRavager": 8,
      "-": 42
    }
  },
  {
    "path": "src/main/java/organice/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public ObservableList\u003cPerson\u003e getMatchList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return model.getMatchList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 5,
      "TheRealRavager": 12,
      "-": 66
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_DOCTOR_IN_CHARGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_ORGAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TISSUE_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to ORGANice. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_TYPE + \"PERSON TYPE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + PREFIX_AGE + \"AGE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_BLOOD_TYPE + \"BLOOD TYPE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_TISSUE_TYPE + \"TISSUE TYPE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_ORGAN + \"ORGAN \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_DOCTOR_IN_CHARGE + \"DOCTOR IN CHARGE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_TYPE + \"patient \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_NRIC + \"S1234568R \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + PREFIX_AGE + \"21 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_PRIORITY + \"high \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_BLOOD_TYPE + \"A+ \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_TISSUE_TYPE + \"1,2,3,4,5,6 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_ORGAN + \"kidney \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_DOCTOR_IN_CHARGE + \"S1111111A \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in ORGANice\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_DOCTOR_NOT_FOUND \u003d \"The doctor in charge specified is not found in ORGANice\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Creates an AddCommand to add the specified {@code person}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (toAdd.getType().toString().equals(\"patient\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Nric doctorInCharge \u003d new Nric(((Patient) toAdd).getDoctorInCharge().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!model.hasDoctor(doctorInCharge)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new CommandException(MESSAGE_DOCTOR_NOT_FOUND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 28,
      "C-likethis123": 7,
      "TheRealRavager": 9,
      "-": 47
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /** This Command Result is marked as a Match Command */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private boolean isMatch;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.isMatch \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void setMatch(boolean isMatch) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.isMatch \u003d isMatch;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isMatch() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return isMatch;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 12,
      "TheRealRavager": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 1,
      "TheRealRavager": 6,
      "-": 46
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \"PERSON TYPE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type updatedType \u003d editPersonDescriptor.getType().orElse(personToEdit.getType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Person(updatedType, updatedNric, updatedName, updatedPhone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return CollectionUtil.isAnyNonNull(type, nric, name, phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return getType().equals(e.getType())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 23,
      "TheRealRavager": 16,
      "-": 159
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static organice.model.Model.PREDICATE_SHOW_ALL_DOCTORS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static organice.model.Model.PREDICATE_SHOW_ALL_DONORS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static organice.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Lists all persons of the same type in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns a list of persons of the stated type.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            + \"Parameter:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            + PREFIX_TYPE + \"PERSON TYPE \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String LIST_OF_DOCTORS \u003d \"Listed all doctors\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String LIST_OF_DONORS \u003d \"Listed all donors\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String LIST_OF_PATIENTS \u003d \"Listed all patients\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String LIST_OF_PERSONS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static Type type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public ListCommand(Type type) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        String resultMessage \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            if (type.isPatient()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                resultMessage \u003d LIST_OF_PATIENTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            } else if (type.isDonor()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                model.updateFilteredPersonList(PREDICATE_SHOW_ALL_DONORS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                resultMessage \u003d LIST_OF_DONORS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            } else if (type.isDoctor()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                model.updateFilteredPersonList(PREDICATE_SHOW_ALL_DOCTORS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                resultMessage \u003d LIST_OF_DOCTORS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        } catch (NullPointerException e) { // if no type specified return list of all persons"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            resultMessage \u003d LIST_OF_PERSONS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            return new CommandResult(resultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                || type \u003d\u003d null \u0026\u0026 (((ListCommand) other).type) \u003d\u003d null // no arguments given should be same objects"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                \u0026\u0026 type !\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                \u0026\u0026 type.equals(((ListCommand) other).type)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 16,
      "Yen-Peng": 45
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/MatchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.parser.MatchCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.BloodType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.TissueType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"match\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Matches patients and donors who passes matching tests\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + \"Parameters: ic/all (to match all patients and donors) \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + \"Parameters: ic/(NRIC) (to match a patient of specified NRIC)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Matched all patients and donors\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"The patient with Nric %1$s cannot be found in ORGANice!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Double SUCCESSFUL_PERCENTAGE \u003d 60.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public MatchCommand(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if the donor and patient is a match."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * A match happens when the donor and patient\u0027s blood type and tissue types are compatible."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @param donor {@code Donor} who will tested for suitability of donation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @param patient {@code Patient} in need of organ"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static boolean match(Person donor, Patient patient) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!(donor instanceof Donor)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        BloodType donorBloodType \u003d ((Donor) donor).getBloodType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        BloodType patientBloodType \u003d patient.getBloodType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        TissueType donorTissueType \u003d ((Donor) donor).getTissueType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        TissueType patientTissueType \u003d patient.getTissueType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Double successRate \u003d donorTissueType.getPercentageMatch(patientTissueType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (patientBloodType.isBloodTypeMatch(donorBloodType) \u0026\u0026 successRate \u003e\u003d SUCCESSFUL_PERCENTAGE) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Donor donorToSet \u003d (Donor) donor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            donorToSet.addMatchResult(patient.getNric(), successRate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            donorToSet.setSuccessRate(patient.getNric());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Matches all {@code Patient} to all {@code Donor} in ORGANice."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private CommandResult executeMatchAll(Model model) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.removeMatches();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.matchAllPatients();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        commandResult.setMatch(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Matches all {@code Donor} to a {@code Patient} with the specified {@code Nric}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private CommandResult executeMatchNric(Nric patientNric, Model model) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (model.hasPatient(patientNric)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                model.removeMatches();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                patient \u003d model.getPatient(patientNric);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                model.matchDonors(patient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                CommandResult commandResult \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                commandResult.setMatch(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_PERSON_NOT_FOUND, patientNric));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } catch (PersonNotFoundException pne) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PERSON_NOT_FOUND, patientNric));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (input.equals(MatchCommandParser.ALL)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return executeMatchAll(model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Nric patientNric \u003d new Nric(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return executeMatchNric(patientNric, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                || (other instanceof MatchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 input.equals(((MatchCommand) other).input)); // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 120
    }
  },
  {
    "path": "src/main/java/organice/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_DOCTOR_IN_CHARGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_ORGAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_ORGAN_EXPIRY_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TISSUE_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Age;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.BloodType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.DoctorInCharge;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Organ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.OrganExpiryDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Priority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import organice.model.person.Status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.TissueType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns the {@code Type} of person in the given {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @throws ParseException if the type is not specified correctly in the input arguments"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static Type parseType(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return ParserUtil.parseType(argumentMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } catch (NoSuchElementException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //put all the prefixes in the multimap to tokenize."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NRIC, PREFIX_NAME,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                PREFIX_AGE, PREFIX_PHONE, PREFIX_PRIORITY, PREFIX_BLOOD_TYPE, PREFIX_DOCTOR_IN_CHARGE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        PREFIX_ORGAN_EXPIRY_DATE, PREFIX_ORGAN, PREFIX_TISSUE_TYPE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Type type \u003d parseType(argMultimap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (type.isDoctor()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            arePrefixesPresentDoctor(argMultimap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Doctor doctor \u003d new Doctor(type, nric, name, phone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return new AddCommand(doctor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else if (type.isDonor()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            arePrefixesPresentDonor(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            BloodType bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOOD_TYPE).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            TissueType tissueType \u003d ParserUtil.parseTissueType(argMultimap.getValue(PREFIX_TISSUE_TYPE).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Organ organ \u003d ParserUtil.parseOrgan(argMultimap.getValue(PREFIX_ORGAN).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            OrganExpiryDate organExpiryDate \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    ParserUtil.parseOrganExpiryDate(argMultimap.getValue(PREFIX_ORGAN_EXPIRY_DATE).get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            Status status \u003d new Status(Status.STATUS_NOT_PROCESSING);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            Donor donor \u003d new Donor(type, nric, name, phone, age, bloodType, tissueType, organ, organExpiryDate,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                    status);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return new AddCommand(donor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } else if (type.isPatient()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            arePrefixesPresentPatient(argMultimap);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            BloodType bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOOD_TYPE).get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            TissueType tissueType \u003d ParserUtil.parseTissueType(argMultimap.getValue(PREFIX_TISSUE_TYPE).get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Organ organ \u003d ParserUtil.parseOrgan(argMultimap.getValue(PREFIX_ORGAN).get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            DoctorInCharge doctorInCharge \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    ParserUtil.parseDoctorInCharge(argMultimap.getValue(PREFIX_DOCTOR_IN_CHARGE).get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            Status status \u003d new Status(Status.STATUS_NOT_PROCESSING);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Patient patient \u003d new Patient(type, nric, name, phone, age, priority,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                    bloodType, tissueType, organ, doctorInCharge, status);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return new AddCommand(patient);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            //TODO: refine error message later"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Throws ParseException when one of the required prefixes for {@code Patient} are absent."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static void arePrefixesPresentPatient(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_AGE, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                PREFIX_PRIORITY, PREFIX_BLOOD_TYPE, PREFIX_TISSUE_TYPE, PREFIX_ORGAN, PREFIX_DOCTOR_IN_CHARGE)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Throws ParseException when one of the required prefixes for Donor are absent."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static void arePrefixesPresentDonor(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_AGE, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                PREFIX_BLOOD_TYPE, PREFIX_TISSUE_TYPE, PREFIX_ORGAN, PREFIX_ORGAN_EXPIRY_DATE)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Throws ParseException when one of the required prefixes for Doctor are absent."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static void arePrefixesPresentDoctor(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 30,
      "C-likethis123": 60,
      "TheRealRavager": 28,
      "-": 31,
      "SimNee": 6
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        case MatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return new MatchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 3,
      "TheRealRavager": 13,
      "-": 63,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_BLOOD_TYPE \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_DOCTOR_IN_CHARGE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_TISSUE_TYPE \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_ORGAN_EXPIRY_DATE \u003d new Prefix(\"exp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_ORGAN \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 7,
      "C-likethis123": 2,
      "TheRealRavager": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NRIC, PREFIX_NAME, PREFIX_PHONE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            editPersonDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 10,
      "TheRealRavager": 10,
      "-": 42
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import organice.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * Returns the {@code Type} of person in the given {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * @throws ParseException if the type is not specified correctly in the input arguments"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static Type parseType(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return ParserUtil.parseType(argumentMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        Type type \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        if (isTypePresent(argMultimap)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            type \u003d parseType(argMultimap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            return new ListCommand(type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return new ListCommand(type); // if no type specified return list of all persons"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static boolean isTypePresent(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return argumentMultimap.getValue(PREFIX_TYPE).isPresent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yen-Peng": 45
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/MatchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Parses input arguments and creates a new MatchCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchCommandParser implements Parser\u003cMatchCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String ALL \u003d \"all\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_INVALID_INPUTS \u003d \"The input should be \u0027all\u0027 or a valid NRIC.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public MatchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NRIC);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String inputValue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            inputValue \u003d argMultimap.getValue(PREFIX_NRIC).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            checkInputArgument(inputValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return new MatchCommand(inputValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the input value is \"all\" or a valid {@code Nric} value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private boolean checkInputArgument(String inputValue) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (inputValue.equals(ALL) || Nric.isValidNric(inputValue)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INPUTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 49
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.BloodType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.DoctorInCharge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Organ;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.OrganExpiryDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.TissueType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String nric} into a {@code Nric}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String type} into a {@code Type}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static Age parseAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String bloodType} into a {@code BloodType}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code bloodType} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static BloodType parseBloodType(String bloodType) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(bloodType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedBloodType \u003d bloodType.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!BloodType.isValidBloodType(trimmedBloodType)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new BloodType(trimmedBloodType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String tissueType} into a {@code TissueType}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code tissueType} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static TissueType parseTissueType(String tissueType) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(tissueType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedTissueType \u003d tissueType.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!TissueType.isValidTissueType(trimmedTissueType)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(TissueType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new TissueType(trimmedTissueType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String organ} into a {@code Organ}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code organ} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static Organ parseOrgan(String organ) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(organ);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedOrgan \u003d organ.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Organ.isValidOrgan(trimmedOrgan)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(Organ.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Organ(trimmedOrgan);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String doctorInCharge} into a {@code DoctorInCharge}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code doctorInCharge} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static DoctorInCharge parseDoctorInCharge(String doctorInCharge) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(doctorInCharge);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedDoctorInCharge \u003d doctorInCharge.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!DoctorInCharge.isValidDoctorInCharge(trimmedDoctorInCharge)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(DoctorInCharge.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new DoctorInCharge(trimmedDoctorInCharge);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String organExpiryDate} into a {@code OrganExpiryDate}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code organExpiryDate} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static OrganExpiryDate parseOrganExpiryDate(String organExpiryDate) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(organExpiryDate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedOrganExpiryDate \u003d organExpiryDate.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!OrganExpiryDate.isValidExpiryDate(trimmedOrganExpiryDate)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(OrganExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new OrganExpiryDate(trimmedOrganExpiryDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 97,
      "C-likethis123": 32,
      "TheRealRavager": 9,
      "-": 68
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/organice/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/organice/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a doctor with the same nric as {@code doctorInCharge} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean hasDoctor(Nric doctor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(doctor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return persons.containsDoctor(doctor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if a patient with the specified Nric exists in ORGANice."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean hasPatient(Nric patient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return persons.containsPatient(patient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * The identity of {@code editedPerson} must not be the same as another existing {@code person}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * in the ORGANice Transplant Manager."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Retrieves the {@code Patient} with the specified {@code Nric}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * {@code Nric} must exist in ORGANice."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Patient getPatient(Nric patientNric) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return persons.getPatient(patientNric);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 10,
      "C-likethis123": 18,
      "TheRealRavager": 4,
      "-": 116
    }
  },
  {
    "path": "src/main/java/organice/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /** {@code Predicate} that always evaluate to true if person is a doctor */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_DOCTORS \u003d person -\u003e person.getType().isDoctor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /** {@code Predicate} that always evaluate to true  if person is a donor */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_DONORS \u003d person -\u003e person.getType().isDonor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /** {@code Predicate} that always evaluate to true if person is a patient */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d person -\u003e person.getType().isPatient();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a doctor in charge with the same nric as {@code doctorInCharge} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    boolean hasDoctor(Nric doctor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if a patient with the specified Nric exists in ORGANice."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    boolean hasPatient(Nric patient);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * {@code target} must exist in ORGANice."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Retrieves the {@code Patient} with the specified {@code Nric}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @throws PersonNotFoundException if the {@code Patient} with the {@code Nric} cannot be found."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    Patient getPatient(Nric patientNric) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Matches all Patients to all Donors in ORGANice."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    void matchAllPatients();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Removes all MatchedDonor instances from ORGANice."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    void removeMatches();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Match Donors to a specified Patient."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    void matchDonors(Patient patient);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Retrieves the match list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    ObservableList\u003cPerson\u003e getMatchList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 9,
      "C-likethis123": 33,
      "TheRealRavager": 3,
      "-": 82,
      "Yen-Peng": 9
    }
  },
  {
    "path": "src/main/java/organice/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedDonor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedPatient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private ObservableList\u003cPerson\u003e listOfMatches \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean hasDoctor(Nric doctor) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(doctor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return addressBook.hasDoctor(doctor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean hasPatient(Nric patient) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return addressBook.hasPatient(patient);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Patient getPatient(Nric patientNric) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(patientNric);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return addressBook.getPatient(patientNric);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Match List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns a list of {@code Patient} in ORGANice."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private ArrayList\u003cPatient\u003e getListOfPatients() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ArrayList\u003cPatient\u003e listOfPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        for (Person person : filteredPersons) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (!(person instanceof Patient)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            listOfPatients.add(((Patient) person));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return listOfPatients;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns a list of {@code Donor} in ORGANice."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private ArrayList\u003cDonor\u003e getListOfDonors() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ArrayList\u003cDonor\u003e listOfDonors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        for (Person person : filteredPersons) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (!(person instanceof Donor)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            listOfDonors.add((Donor) person);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return listOfDonors;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Add a MatchedDonor to the list to be displayed."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @param matchedDonorToAdd {@code MatchedDonor} to add to the list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void addMatchedDonor(MatchedDonor matchedDonorToAdd) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(matchedDonorToAdd);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        listOfMatches.add(matchedDonorToAdd);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Adds a MatchedPatient to the list displayed."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @param matchedPatientToAdd {@code MatchedPatient} to add to the list"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void addMatchedPatient(MatchedPatient matchedPatientToAdd) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(matchedPatientToAdd);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        listOfMatches.add(matchedPatientToAdd);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Remove all MatchedDonors instances. Meant to be called before adding new MatchedDonor instances."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * The purpose of calling this method before is to ensure that each MatchedDonor is a unique item in the list."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void removeMatches() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        listOfMatches \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Matches all Patients in ORGANice with all existing donors."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void matchAllPatients() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        List\u003cPatient\u003e listOfPatients \u003d getListOfPatients();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        List\u003cDonor\u003e listOfDonors \u003d getListOfDonors();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //display matches"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        for (Patient patient : listOfPatients) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Integer numberOfMatches \u003d 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            for (Donor donor : listOfDonors) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                boolean isMatch \u003d MatchCommand.match(donor, patient);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                if (isMatch) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    numberOfMatches +\u003d 1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            MatchedPatient matchedPatient \u003d new MatchedPatient(patient);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            matchedPatient.setNumberOfMatches(numberOfMatches);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            addMatchedPatient(matchedPatient);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Match Donors to the specified {@code Patient}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void matchDonors(Patient patient) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //filter out donors."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        List\u003cDonor\u003e listOfDonors \u003d getListOfDonors();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //if match, create a MatchedDonor and add to the list."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        for (Donor donor : listOfDonors) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            boolean isMatch \u003d MatchCommand.match(donor, patient);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (isMatch) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                MatchedDonor matchedDonor \u003d new MatchedDonor(donor);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                addMatchedDonor(matchedDonor);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Retrieves the Match List"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public ObservableList\u003cPerson\u003e getMatchList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return listOfMatches;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 7,
      "C-likethis123": 135,
      "TheRealRavager": 5,
      "-": 145
    }
  },
  {
    "path": "src/main/java/organice/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/organice/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/organice/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/organice/model/person/Age.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Represents a Person\u0027s age in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \"Age should only be an integer more than 0 and less than 150.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Integer AGE_MAX \u003d 150;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Integer AGE_MIN \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        value \u003d age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Integer age \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (age \u003e AGE_MIN \u0026\u0026 age \u003c AGE_MAX) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 value.equals(((Age) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 61,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/main/java/organice/model/person/BloodType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * Represents a Person\u0027s blood type in ORGANice."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBloodType(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": "public class BloodType {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final HashSet\u003cString\u003e BLOOD_TYPES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(\"A\", \"B\", \"AB\", \"O\", \"A+\", \"AB+\", \"B+\", \"O+\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final BloodType BLOODTYPE_A \u003d new BloodType(\"A\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final BloodType BLOODTYPE_B \u003d new BloodType(\"B\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final BloodType BLOODTYPE_AB \u003d new BloodType(\"AB\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final BloodType BLOODTYPE_O \u003d new BloodType(\"O\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final HashMap\u003cBloodType, HashSet\u003cBloodType\u003e\u003e BLOOD_TYPES_MATCHES \u003d BloodType.getBloodTypeMatches();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            \"Blood type should only have A, B, O or AB.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                    + \"Positive blood types will have a \u0027+\u0027 behind, it should not be blank\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Constructs a {@code BloodType}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @param bloodType A valid blood type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public BloodType(String bloodType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        requireNonNull(bloodType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        checkArgument(isValidBloodType(bloodType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        value \u003d bloodType.toUpperCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static HashMap\u003cBloodType, HashSet\u003cBloodType\u003e\u003e getBloodTypeMatches() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        HashMap hashMap \u003d new HashMap\u003cBloodType, HashSet\u003cBloodType\u003e\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        hashMap.put(BLOODTYPE_A, new HashSet\u003cBloodType\u003e(Arrays.asList(BLOODTYPE_O, BLOODTYPE_A)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        hashMap.put(BLOODTYPE_B, new HashSet\u003cBloodType\u003e(Arrays.asList(BLOODTYPE_O, BLOODTYPE_B)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        hashMap.put(BLOODTYPE_AB, new HashSet\u003cBloodType\u003e(Arrays.asList(BLOODTYPE_B, BLOODTYPE_A, BLOODTYPE_O,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                BLOODTYPE_AB)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        hashMap.put(BLOODTYPE_O, new HashSet\u003cBloodType\u003e(Arrays.asList(BLOODTYPE_O)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return hashMap;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Returns true if a given string is a valid blood type."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static boolean isValidBloodType(String test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return BLOOD_TYPES.contains(test.toUpperCase());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if a {@code BloodType} matches this blood type."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isBloodTypeMatch(BloodType match) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        HashSet\u003cBloodType\u003e matchingBloodTypes \u003d BLOOD_TYPES_MATCHES.get(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (matchingBloodTypes.contains(match)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                || (other instanceof BloodType // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 value.equals(((BloodType) other).value)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SimNee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 6,
      "C-likethis123": 38,
      "TheRealRavager": 2,
      "SimNee": 49
    }
  },
  {
    "path": "src/main/java/organice/model/person/Doctor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Represents a Doctor in ORGANice."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Doctor extends Person {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Doctor(Type type, Nric nric, Name name, Phone phone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(type, nric, name, phone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (!(other instanceof Doctor)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Doctor otherDoctor \u003d (Doctor) other;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return otherDoctor.getNric().equals(getNric())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u0026\u0026 otherDoctor.getName().equals(getName())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u0026\u0026 otherDoctor.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u0026\u0026 otherDoctor.getType().equals(getType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Below methods intentionally created so developers will not forget to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // edit these two methods if Doctor class changes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return super.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 50
    }
  },
  {
    "path": "src/main/java/organice/model/person/DoctorInCharge.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Patient\u0027s doctor in charge in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDoctorInCharge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DoctorInCharge {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \"Doctor in charge\u0027s NRIC must start with a letter \u0027S/T/F/G\u0027, 7 numbers afterward \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    + \"and its must end with a letter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_DOCTOR_NOT_FOUND \u003d \"We could not identify the doctor that you have specified.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \" Please check and try again!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Constructs a {@code DoctorInCharge}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param doctorInCharge A valid DoctorInCharge."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DoctorInCharge(String doctorInCharge) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(doctorInCharge);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        checkArgument(isValidDoctorInCharge(doctorInCharge), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        value \u003d doctorInCharge.toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a given string is a valid doctor in charge."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static boolean isValidDoctorInCharge(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return test.toUpperCase().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            || (other instanceof DoctorInCharge // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 value.equals(((DoctorInCharge) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 54,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/main/java/organice/model/person/Donor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Donor in ORGANice."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Donor extends Person {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final BloodType bloodType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final TissueType tissueType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final Organ organ;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final OrganExpiryDate organExpiryDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private HashMap\u003cNric, Double\u003e successRateMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private String successRate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Donor(Type type, Nric nric, Name name, Phone phone, Age age,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                 BloodType bloodType, TissueType tissueType, Organ organ, OrganExpiryDate organExpiryDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                 Status status) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(type, nric, name, phone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        requireAllNonNull(age, bloodType, tissueType, organ, organExpiryDate, status);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.tissueType \u003d tissueType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.organ \u003d organ;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.organExpiryDate \u003d organExpiryDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        successRateMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public BloodType getBloodType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return bloodType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public TissueType getTissueType() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return tissueType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Organ getOrgan() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return organ;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public OrganExpiryDate getOrganExpiryDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return organExpiryDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns a {@code String} detailing the success rate to be displayed in the {@code DonorCard}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String getSuccessRate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return successRate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the success rate of a match with the specified {@code Patient}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void setSuccessRate(Nric patientMatched) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Double successRate \u003d successRateMap.get(patientMatched);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (successRate \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            this.successRate \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            this.successRate \u003d successRate.toString() + \"%\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void addMatchResult(Nric patientMatched, Double successRate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        successRateMap.put(patientMatched, successRate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Set the status of the donor."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @param newStatus"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void setStatus(String newStatus) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        Status updatedStatus \u003d new Status(newStatus);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        this.status \u003d updatedStatus;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if both donors have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * This defines a stronger notion of equality between two donors."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!(other instanceof Donor)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor otherPerson \u003d (Donor) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getType().equals(getType())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getAge().equals(getAge())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getBloodType().equals(getBloodType())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getTissueType().equals(getTissueType())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getOrgan().equals(getOrgan())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            \u0026\u0026 otherPerson.getOrganExpiryDate().equals(getOrganExpiryDate())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            \u0026\u0026 otherPerson.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return Objects.hash(type, nric, name, phone, age, bloodType, tissueType, organ, organExpiryDate, status);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        builder.append(super.toString())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(\" Age: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(getAge())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(\" Blood Type: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(getBloodType())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(\" Tissue Type: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(getTissueType())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(\" Organ: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(getOrgan())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(\" Organ Expiry Date: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .append(getOrganExpiryDate())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .append(\" Status: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .append(getStatus());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 96,
      "C-likethis123": 28,
      "TheRealRavager": 2,
      "SimNee": 24
    }
  },
  {
    "path": "src/main/java/organice/model/person/MatchedDonor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Represents a {@code Donor} that is a match with a specified {@code Patient}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * It is a temporary instance and will be removed once a {@code MatchCommand} is executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchedDonor extends Donor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private String successRate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public MatchedDonor(Type type, Nric nric, Name name, Phone phone, Age age,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            BloodType bloodType, TissueType tissueType, Organ organ, OrganExpiryDate organExpiryDate, Status status) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        super(type, nric, name, phone, age, bloodType, tissueType, organ, organExpiryDate, status);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        successRate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Alternative constructor which takes in a {@code Donor} and constructs a {@code MatchedDonor}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public MatchedDonor(Donor toAdd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this(toAdd.getType(), toAdd.getNric(), toAdd.getName(), toAdd.getPhone(), toAdd.getAge(), toAdd.getBloodType(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                toAdd.getTissueType(), toAdd.getOrgan(), toAdd.getOrganExpiryDate(), toAdd.getStatus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        successRate \u003d toAdd.getSuccessRate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns a {@code String} detailing the success rate to be displayed in the {@code DonorCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String getSuccessRate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return successRate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!(other instanceof MatchedDonor)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor otherPerson \u003d (MatchedDonor) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getType().equals(getType())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getAge().equals(getAge())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getBloodType().equals(getBloodType())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getTissueType().equals(getTissueType())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getOrgan().equals(getOrgan())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 otherPerson.getOrganExpiryDate().equals(getOrganExpiryDate())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 otherPerson.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return Objects.hash(type, nric, name, phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 71,
      "SimNee": 5
    }
  },
  {
    "path": "src/main/java/organice/model/person/MatchedPatient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Represents a Person in ORGANice."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchedPatient extends Patient {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private int numberOfMatches \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public MatchedPatient(Type type, Nric nric, Name name, Phone phone, Age age, Priority priority,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            BloodType bloodType, TissueType tissueType, Organ organ, DoctorInCharge doctorInCharge, Status status) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        super(type, nric, name, phone, age, priority, bloodType, tissueType, organ, doctorInCharge, status);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Alternative constructor which takes in a {@code Patient} and constructs a {@code MatchedPatient}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public MatchedPatient(Patient toAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this(toAdd.getType(), toAdd.getNric(), toAdd.getName(), toAdd.getPhone(), toAdd.getAge(), toAdd.getPriority(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                toAdd.getBloodType(), toAdd.getTissueType(), toAdd.getOrgan(), toAdd.getDoctorInCharge(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                toAdd.getStatus());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the number of matches the represented {@code Patient} has with all {@code Donors}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void setNumberOfMatches(int numberOfMatches) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.numberOfMatches \u003d numberOfMatches;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Retrieves the number of matches the represented {@code Patient} has with all {@code Donors}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public int getNumberOfMatches() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return numberOfMatches;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!(other instanceof MatchedPatient)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient otherPerson \u003d (MatchedPatient) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return otherPerson.getType().equals(getType())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getAge().equals(getAge())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getBloodType().equals(getBloodType())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getTissueType().equals(getTissueType())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getOrgan().equals(getOrgan())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 otherPerson.getDoctorInCharge().equals(getDoctorInCharge())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 otherPerson.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return Objects.hash(type, nric, name, phone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 75,
      "SimNee": 7
    }
  },
  {
    "path": "src/main/java/organice/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Represents a Person\u0027s name in the ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 56,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/main/java/organice/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/organice/model/person/Nric.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Person\u0027s NRIC in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Nric must start with a letter \u0027S/T/F/G\u0027, 7 numbers afterward \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \"and its must end with a letter\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param nric A valid nric."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        value \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a given string is a valid nric."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return test.toUpperCase().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 value.equals(((Nric) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 56,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/main/java/organice/model/person/Organ.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Represents a Person\u0027s organ in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOrgan(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "public class Organ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            \"Please key in a valid organ. Valid organ(s): kidney.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String KIDNEY \u003d \"kidney\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * Constructs an {@code Organ}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * @param organ A valid organ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public Organ(String organ) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        requireNonNull(organ);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        checkArgument(isValidOrgan(organ), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        value \u003d organ.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * Returns true if a given string is a valid organ."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static boolean isValidOrgan(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return test.toLowerCase().equals(KIDNEY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                || (other instanceof Organ // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                \u0026\u0026 value.equals(((Organ) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "Yen-Peng": 52
    }
  },
  {
    "path": "src/main/java/organice/model/person/OrganExpiryDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Donor organ\u0027s expiry date in ORGANice."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExpiryDate(String)} (String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class OrganExpiryDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final DateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd-MMM-yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Organ\u0027s expiry date must be in the format DD-MMM-YYYY\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \" An example will be 27-Jan-2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Constructs an {@code OrganExpiryDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param expiryDate A valid organ\u0027s expiry date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public OrganExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            checkArgument(isValidExpiryDate(expiryDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            value \u003d dateFormat.format(DATE_FORMAT.parse(expiryDate)).replace(\" \", \"-\"); //make the data value uniform"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a given string is a valid organ\u0027s expiry date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static boolean isValidExpiryDate(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            DATE_FORMAT.setLenient(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            DATE_FORMAT.parse(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            || (other instanceof OrganExpiryDate // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 value.equals(((OrganExpiryDate) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 67,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/main/java/organice/model/person/Patient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Represents a Patient in ORGANice."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class Patient extends Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final BloodType bloodType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final TissueType tissueType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final Organ organ;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final DoctorInCharge doctorInCharge;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Patient(Type type, Nric nric, Name name, Phone phone, Age age, Priority priority,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                   BloodType bloodType, TissueType tissueType, Organ organ, DoctorInCharge doctorInCharge,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                   Status status) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super(type, nric, name, phone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        requireAllNonNull(age, priority, bloodType, tissueType, organ, doctorInCharge, status);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.tissueType \u003d tissueType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.organ \u003d organ;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.doctorInCharge \u003d doctorInCharge;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public BloodType getBloodType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return bloodType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public TissueType getTissueType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return tissueType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Organ getOrgan() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return organ;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DoctorInCharge getDoctorInCharge() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return doctorInCharge;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Set the status of the patient."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @param newStatus"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void setStatus(String newStatus) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        Status updatedStatus \u003d new Status(newStatus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        this.status \u003d updatedStatus;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        builder.append(super.toString())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                .append(getAge())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(\" Blood Type: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getBloodType())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(\" Tissue Type: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getTissueType())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(\" Organ: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getOrgan())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(\" Doctor In Charge: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                .append(getDoctorInCharge())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                .append(getStatus());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient otherPerson \u003d (Patient) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return otherPerson.getType().equals(getType())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 otherPerson.getAge().equals(getAge())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getBloodType().equals(getBloodType())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getTissueType().equals(getTissueType())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getOrgan().equals(getOrgan())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 otherPerson.getDoctorInCharge().equals(getDoctorInCharge())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 otherPerson.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return Objects.hash(type, nric, name, phone, age, bloodType, tissueType, organ, doctorInCharge, status);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 44,
      "C-likethis123": 60,
      "TheRealRavager": 2,
      "SimNee": 24
    }
  },
  {
    "path": "src/main/java/organice/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Represents a Person in ORGANice."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final Type type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final Nric nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Person(Type type, Nric nric, Name name, Phone phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireAllNonNull(type, nric, name, phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if both persons of the same nric."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getType().equals(getType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return Objects.hash(type, nric, name, phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(\" Person Type: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(\" Nric: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getPhone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 27,
      "TheRealRavager": 2,
      "-": 69,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/main/java/organice/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Represents a Person\u0027s phone number in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 50,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/main/java/organice/model/person/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Represents a Patient\u0027s priority for treatment in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * The higher the priority, the more likely they will be matched with donor\u0027s organs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority can only be high, medium or low\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * The first character of the priority must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String PRIORITY_HIGH \u003d \"high\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String PRIORITY_MEDIUM \u003d \"medium\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String PRIORITY_LOW \u003d \"low\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @param priority A valid priority."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        value \u003d priority.toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 (test.toLowerCase().equals(PRIORITY_HIGH) || test.toLowerCase().equals(PRIORITY_MEDIUM)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        || test.toLowerCase().equals(PRIORITY_LOW));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Priority} is high."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Priority value is \u0027high\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isHighPriority() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.toLowerCase().equals(PRIORITY_HIGH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Priority} is medium."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Priority value is \u0027medium\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isMediumPriority() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.toLowerCase().equals(PRIORITY_MEDIUM);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Priority} is low."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Priority value is \u0027low\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isLowPriority() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.toLowerCase().equals(PRIORITY_LOW);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 90
    }
  },
  {
    "path": "src/main/java/organice/model/person/Status.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * Represents the status of donor and patient in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * When a donor and patient is matched, they will be processed and their status will be processing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * When they are done with cross-matching, their status will change to either done or not processing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * depending on the result of the cross-matching."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStatus(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Status can only be processing, not processing or done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * The first character of the status must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String STATUS_PROCESSING \u003d \"processing\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String STATUS_NOT_PROCESSING \u003d \"not processing\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String STATUS_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Constructs a {@code Status}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @param status A valid status."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public Status(String status) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        checkArgument(isValidStatus(status), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        value \u003d status.toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Returns true if a given string is a valid status."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 (test.toLowerCase().equals(STATUS_PROCESSING) || test.toLowerCase().equals(STATUS_NOT_PROCESSING)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                || test.toLowerCase().equals(STATUS_DONE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Checks if the {@code Status} is processing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @return boolean if this Status value is \u0027processing\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public boolean isProcessing() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value.toLowerCase().equals(STATUS_PROCESSING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Checks if the {@code Status} is not processing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @return boolean if this Status value is \u0027not processing\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public boolean isNotProcessing() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value.toLowerCase().equals(STATUS_NOT_PROCESSING);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Checks if the {@code Status} is done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @return boolean if this Status value is \u0027done\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value.toLowerCase().equals(STATUS_DONE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                || (other instanceof Status // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 value.equals(((Status) other).value)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SimNee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SimNee": 91
    }
  },
  {
    "path": "src/main/java/organice/model/person/TissueType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * Represents a Person\u0027s tissue type in ORGANice."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTissueType(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "public class TissueType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            \"Tissue types are 6 integers from 1 to 12 separated by commas\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                + \" An example will be tt/1,2,3,4,5,6\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Constructs a {@code TissueType}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @param tissueType A valid tissue type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public TissueType(String tissueType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        requireNonNull(tissueType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        checkArgument(isValidTissueType(tissueType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        value \u003d tissueType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Returns true if a given string is a valid tissue type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static boolean isValidTissueType(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        String[] tissueTypeValue \u003d test.split(\",\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        if (tissueTypeValue.length !\u003d 6 || hasDuplicates(tissueTypeValue)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        for (int i \u003d 0; i \u003c tissueTypeValue.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                Integer tt \u003d Integer.parseInt(tissueTypeValue[i]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                if (tt \u003c 1 || tt \u003e 12) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            } catch (NumberFormatException | NullPointerException nfe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns percentage of tissue type match (0 - 100)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Double getPercentageMatch(TissueType match) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String[] tissueTypeThis \u003d this.value.split(\",\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String[] tissueTypeMatch \u003d match.value.split(\",\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        HashSet\u003cString\u003e commonTypes \u003d new HashSet\u003c\u003e(Arrays.asList(tissueTypeThis));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        int numberOfCommonTypes \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (commonTypes.contains(tissueTypeMatch[i])) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                numberOfCommonTypes++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Double percentage \u003d (double) numberOfCommonTypes * 100 / 6;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return percentage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Returns true if a given string array contains duplicate."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static boolean hasDuplicates(String[] test) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        for (int i \u003d 0; i \u003c test.length; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c test.length; j++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                if (test[i].equals(test[j])) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                || (other instanceof TissueType // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 value.equals(((TissueType) other).value)); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SimNee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 22,
      "SimNee": 80
    }
  },
  {
    "path": "src/main/java/organice/model/person/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Person\u0027s type in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Types can only take \u0027patient\u0027, \u0027donor\u0027, or \u0027doctor\u0027 as values \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String PATIENT \u003d \"patient\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String DOCTOR \u003d \"doctor\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String DONOR \u003d \"donor\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Constructs an {@code Type}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param type A valid type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        value \u003d type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a given string is a valid type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 (test.toLowerCase().equals(PATIENT) || test.toLowerCase().equals(DONOR)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        || test.toLowerCase().equals(DOCTOR));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Type} is a patient."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Type is a patient"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isPatient() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.equals(PATIENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Type} is a donor."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Type is a donor"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isDonor() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.equals(DONOR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Type} is a doctor."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Type is a doctor"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isDoctor() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.equals(DOCTOR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 value.equals(((Type) other).value)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 55,
      "C-likethis123": 30,
      "TheRealRavager": 3
    }
  },
  {
    "path": "src/main/java/organice/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if the list contains an equivalent doctor in charge as the given argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean containsDoctor(Nric doctor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(doctor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return internalList.stream().anyMatch(n -\u003e n.getType().isDoctor() \u0026\u0026 n.getNric().equals(doctor));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if the list contains a patient with the specified {@code Nric}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean containsPatient(Nric patient) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getType().isPatient()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 person.getNric().equals(patient));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns the {@code Patient} with the specified {@code Nric}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Patient getPatient(Nric patientNric) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(patientNric);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Person currentPerson \u003d internalList.get(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (currentPerson instanceof Patient \u0026\u0026 currentPerson.getNric().equals(patientNric)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                return (Patient) currentPerson;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 8,
      "C-likethis123": 25,
      "TheRealRavager": 4,
      "-": 133
    }
  },
  {
    "path": "src/main/java/organice/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/organice/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/organice/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"S1111111A\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\")),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"T1333333P\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"G1234213L\"), new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    new Phone(\"93210283\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"F5734625D\"), new Name(\"David Li\"), new Phone(\"91031282\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"S6243536R\"), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"T6746356G\"), new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 7,
      "TheRealRavager": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/organice/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Represents a storage for {@link organice.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 4,
      "-": 41
    }
  },
  {
    "path": "src/main/java/organice/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Age;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.BloodType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Doctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.DoctorInCharge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Organ;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.OrganExpiryDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import organice.model.person.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.TissueType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String age;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final String bloodType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final String tissueType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final String organ;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final String doctorInCharge;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final String organExpiryDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    protected final String status;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"type\") String type, @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            @JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            @JsonProperty(\"age\") String age, @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            @JsonProperty(\"bloodType\") String bloodType, @JsonProperty(\"tissueType\") String tissueType,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            @JsonProperty(\"organ\") String organ, @JsonProperty(\"doctorInCharge\") String doctorInCharge,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            @JsonProperty(\"organExpiryDate\") String organExpiryDate, @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.tissueType \u003d tissueType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.organ \u003d organ;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.doctorInCharge \u003d doctorInCharge;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.organExpiryDate \u003d organExpiryDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type \u003d source.getType().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric \u003d source.getNric().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (source instanceof Patient) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            age \u003d ((Patient) source).getAge().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            priority \u003d ((Patient) source).getPriority().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            bloodType \u003d ((Patient) source).getBloodType().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            tissueType \u003d ((Patient) source).getTissueType().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            organ \u003d ((Patient) source).getOrgan().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            doctorInCharge \u003d ((Patient) source).getDoctorInCharge().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            organExpiryDate \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            status \u003d \"not processing\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } else if (source instanceof Donor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            age \u003d ((Donor) source).getAge().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            priority \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            bloodType \u003d ((Donor) source).getBloodType().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            tissueType \u003d ((Donor) source).getTissueType().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            organ \u003d ((Donor) source).getOrgan().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            doctorInCharge \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            organExpiryDate \u003d ((Donor) source).getOrganExpiryDate().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            status \u003d \"not processing\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else if (source instanceof Doctor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            age \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            priority \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            bloodType \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            tissueType \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            organ \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            doctorInCharge \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            organExpiryDate \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            status \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            age \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            priority \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            bloodType \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            tissueType \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            organ \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            doctorInCharge \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            organExpiryDate \u003d \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            status \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (modelType.isDoctor()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return new Doctor(modelType, modelNric, modelName, modelPhone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } else if (modelType.isDonor()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (bloodType \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        BloodType.class.getSimpleName()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!BloodType.isValidBloodType(bloodType)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final BloodType modelBloodType \u003d new BloodType(bloodType);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (tissueType \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        TissueType.class.getSimpleName()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!TissueType.isValidTissueType(tissueType)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(TissueType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final TissueType modelTissueType \u003d new TissueType(tissueType);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (organ \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Organ.class.getSimpleName()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!Organ.isValidOrgan(organ)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(Organ.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final Organ modelOrgan \u003d new Organ(organ);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (organExpiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        OrganExpiryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!OrganExpiryDate.isValidExpiryDate(organExpiryDate)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(OrganExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final OrganExpiryDate modelOrganExpiryDate \u003d new OrganExpiryDate(organExpiryDate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            final Status modelStatus \u003d new Status(status);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return new Donor(modelType, modelNric, modelName, modelPhone, modelAge, modelBloodType, modelTissueType,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                    modelOrgan, modelOrganExpiryDate, modelStatus);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } else if (modelType.isPatient()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (bloodType \u003d\u003d null) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        BloodType.class.getSimpleName()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!BloodType.isValidBloodType(bloodType)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final BloodType modelBloodType \u003d new BloodType(bloodType);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (tissueType \u003d\u003d null) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        TissueType.class.getSimpleName()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!TissueType.isValidTissueType(tissueType)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(TissueType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final TissueType modelTissueType \u003d new TissueType(tissueType);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (organ \u003d\u003d null) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Organ.class.getSimpleName()));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!Organ.isValidOrgan(organ)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(Organ.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final Organ modelOrgan \u003d new Organ(organ);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (doctorInCharge \u003d\u003d null) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        DoctorInCharge.class.getSimpleName()));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!DoctorInCharge.isValidDoctorInCharge(doctorInCharge)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(DoctorInCharge.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final DoctorInCharge modelDoctorInCharge \u003d new DoctorInCharge(doctorInCharge);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            final Status modelStatus \u003d new Status(status);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return new Patient(modelType, modelNric, modelName, modelPhone, modelAge, modelPriority,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                    modelBloodType, modelTissueType, modelOrgan, modelDoctorInCharge, modelStatus);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return new Person(modelType, modelNric, modelName, modelPhone);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 152,
      "C-likethis123": 45,
      "TheRealRavager": 16,
      "-": 56,
      "SimNee": 31
    }
  },
  {
    "path": "src/main/java/organice/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 7,
      "-": 73
    }
  },
  {
    "path": "src/main/java/organice/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/organice/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/organice/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/organice/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 6,
      "-": 71
    }
  },
  {
    "path": "src/main/java/organice/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Represents a storage for {@link organice.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Saves the given {@link organice.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/organice/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "         * @see organice.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/organice/ui/DoctorCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Doctor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * An UI component that displays information of a {@code Doctor}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class DoctorCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static final String FXML \u003d \"DoctorListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public final Doctor doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DoctorCard(Doctor doctor, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        name.setText(doctor.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        phone.setText(\"Phone Number: \" + doctor.getPhone().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        nric.setText(doctor.getNric().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        type.setText(doctor.getType().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (!(other instanceof DoctorCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        DoctorCard card \u003d (DoctorCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u0026\u0026 doctor.equals(card.doctor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 66
    }
  },
  {
    "path": "src/main/java/organice/ui/DonorCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * An UI component that displays information of a {@code Donor}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DonorCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String FXML \u003d \"DonorListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final Donor donor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label bloodType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label tissueType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label organ;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label organExpiryDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorCard(Donor donor, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.donor \u003d donor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        name.setText(donor.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        phone.setText(\"Phone Number: \" + donor.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric.setText(donor.getNric().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type.setText(donor.getType().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        age.setText(\"Age: \" + donor.getAge().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        bloodType.setText(\"Blood type: \" + donor.getBloodType().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        tissueType.setText(\"Tissue type: \" + donor.getTissueType().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organ.setText(\"Organ: \" + donor.getOrgan().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organExpiryDate.setText(\"Organ Expiry Date: \" + donor.getOrganExpiryDate().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!(other instanceof DonorCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DonorCard card \u003d (DonorCard) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 donor.equals(card.donor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 79,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/main/java/organice/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/organice/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Swaps the PersonListPanel if a match command is executed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void handleMatch() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getMatchList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Changes PersonListPanel to display normal persons."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void handleNonMatches() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @see organice.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (commandResult.isMatch()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                handleMatch();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                handleNonMatches();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 23,
      "TheRealRavager": 8,
      "-": 185
    }
  },
  {
    "path": "src/main/java/organice/ui/MatchCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * An UI component that displays information of a {@code Donor}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String FXML \u003d \"MatchCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public final Donor donor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label bloodType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label tissueType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label organ;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label organExpiryDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label success;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public MatchCard(Donor donor, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.donor \u003d donor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        name.setText(donor.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        phone.setText(\"Phone Number: \" + donor.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        nric.setText(donor.getNric().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        age.setText(\"Age: \" + donor.getAge().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        bloodType.setText(\"Blood type: \" + donor.getBloodType().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        tissueType.setText(\"Tissue type: \" + donor.getTissueType().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        organ.setText(\"Organ: \" + donor.getOrgan().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        organExpiryDate.setText(\"Organ Expiry Date: \" + donor.getOrganExpiryDate().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        success.setText(\"Success Rate: \" + donor.getSuccessRate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!(other instanceof MatchCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchCard card \u003d (MatchCard) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u0026\u0026 donor.equals(card.donor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 81
    }
  },
  {
    "path": "src/main/java/organice/ui/NumberOfMatches.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedPatient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class NumberOfMatches extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String FXML \u003d \"NumberOfMatches.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public final MatchedPatient patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label bloodType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label tissueType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label organ;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label doctorInCharge;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label match;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public NumberOfMatches(MatchedPatient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        phone.setText(\"Phone Number: \" + patient.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        nric.setText(\"Nric: \" + patient.getNric().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        age.setText(\"Age: \" + patient.getAge().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        priority.setText(\"Priority: \" + patient.getPriority().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        bloodType.setText(\"Blood type: \" + patient.getBloodType().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        tissueType.setText(\"Tissue type: \" + patient.getTissueType().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        organ.setText(\"Organ: \" + patient.getOrgan().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        doctorInCharge.setText(\"Doctor in Charge: \" + patient.getDoctorInCharge().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        match.setText(\"Matches: \" + patient.getNumberOfMatches());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!(other instanceof NumberOfMatches)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        NumberOfMatches card \u003d (NumberOfMatches) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 84
    }
  },
  {
    "path": "src/main/java/organice/ui/PatientCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label bloodType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label tissueType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label organ;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label doctorInCharge;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        phone.setText(\"Phone Number: \" + patient.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        nric.setText(patient.getNric().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        type.setText(patient.getType().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        age.setText(\"Age: \" + patient.getAge().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        priority.setText(\"Priority: \" + patient.getPriority().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        bloodType.setText(\"Blood type: \" + patient.getBloodType().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        tissueType.setText(\"Tissue type: \" + patient.getTissueType().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organ.setText(\"Organ: \" + patient.getOrgan().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        doctorInCharge.setText(\"Doctor in Charge: \" + patient.getDoctorInCharge().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 12,
      "C-likethis123": 70,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/main/java/organice/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        phone.setText(\"Phone Number: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric.setText(person.getNric().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type.setText(person.getType().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 4,
      "C-likethis123": 1,
      "TheRealRavager": 2,
      "-": 59
    }
  },
  {
    "path": "src/main/java/organice/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Doctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedDonor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedPatient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    setGraphic(new DoctorCard((Doctor) person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                } else if (person instanceof MatchedDonor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    setGraphic(new MatchCard((Donor) person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                } else if (person instanceof Donor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    setGraphic(new DonorCard((Donor) person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                } else if (person instanceof MatchedPatient) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    setGraphic(new NumberOfMatches((MatchedPatient) person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (person instanceof Patient) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    setGraphic(new PatientCard((Patient) person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 2,
      "C-likethis123": 6,
      "TheRealRavager": 11,
      "-": 44
    }
  },
  {
    "path": "src/main/java/organice/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/organice/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/organice/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/organice/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/organice.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 80,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/main/java/organice/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/DoctorListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003cLabel fx:id\u003d\"type\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #ebb789;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003cLabel fx:id\u003d\"nric\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #77B5FE;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 46
    }
  },
  {
    "path": "src/main/resources/view/DonorListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cLabel fx:id\u003d\"type\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #ebb789;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cLabel fx:id\u003d\"nric\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #77B5FE;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodType\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cLabel fx:id\u003d\"tissueType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tissueType\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cLabel fx:id\u003d\"organ\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$organ\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cLabel fx:id\u003d\"organExpiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$organExpiryDate\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 51
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "         title\u003d\"ORGANice\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    \u003cImage url\u003d\"@/images/organice.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "Yen-Peng": 2
    }
  },
  {
    "path": "src/main/resources/view/MatchCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"success\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$success\" textFill\u003d\"RED\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                  \u003cFont name\u003d\"Arial\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodType\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"tissueType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tissueType\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"organ\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$organ\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"organExpiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$organExpiryDate\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 51
    }
  },
  {
    "path": "src/main/resources/view/NumberOfMatches.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cLabel fx:id\u003d\"match\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$match\" textFill\u003d\"RED\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodType\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"tissueType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tissueType\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"organ\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$organ\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"doctorInCharge\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$doctorInCharge\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 44
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"type\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #ebb789;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"nric\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #77B5FE;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodType\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003cLabel fx:id\u003d\"tissueType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tissueType\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003cLabel fx:id\u003d\"organ\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$organ\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003cLabel fx:id\u003d\"doctorInCharge\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$doctorInCharge\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 4,
      "C-likethis123": 48
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cLabel fx:id\u003d\"type\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #ebb789;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cLabel fx:id\u003d\"nric\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #77B5FE;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 18,
      "-": 28
    }
  },
  {
    "path": "src/test/java/organice/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/organice/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/organice/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/organice/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/organice/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/organice.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 33,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/test/java/organice/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/organice/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/organice/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/organice/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/organice/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/organice/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NAME_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PHONE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TYPE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_ELLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_FIONA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_IRENE_DONOR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_CARL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedDonor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedPatient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.storage.StorageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.LIST_OF_PERSONS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY + NAME_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                + PHONE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(DOCTOR_AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void getMatchList_matchDonors_allContentsAreMatches() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(PATIENT_IRENE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(DONOR_ELLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(DONOR_FIONA);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.matchDonors(PATIENT_IRENE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ObservableList\u003cPerson\u003e listOfMatches \u003d model.getMatchList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        boolean isAllMatchedDonor \u003d listOfMatches.stream().allMatch(match -\u003e match instanceof MatchedDonor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(isAllMatchedDonor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void getMatchList_matchAllPatients_allContentsAreMatches() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(PATIENT_IRENE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(PATIENT_CARL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(DONOR_ELLE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(DONOR_FIONA);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.matchAllPatients();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ObservableList\u003cPerson\u003e listOfMatches \u003d model.getMatchList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        boolean isAllMatchedPatient \u003d listOfMatches.stream().allMatch(match -\u003e match instanceof MatchedPatient);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(isAllMatchedPatient);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 38,
      "TheRealRavager": 26,
      "-": 135,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 9,
      "-": 36
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Doctor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.DonorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void execute_doctorAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Doctor validDoctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validDoctor).execute(modelStub);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validDoctor), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(Arrays.asList(validDoctor), modelStub.personsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void execute_donorAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor validDonor \u003d new DonorBuilder().withAge(\"23\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        CommandResult commandResultDonor \u003d new AddCommand(validDonor).execute(modelStub);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validDonor), commandResultDonor.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(Arrays.asList(validDonor), modelStub.personsAdded);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        CommandResult commandResultPatient \u003d new AddCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResultPatient.getFeedbackToUser());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.personsAdded);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void execute_duplicateDoctor_throwsCommandException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Doctor validDoctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validDoctor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validDoctor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void execute_duplicateDonor_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor validDonor \u003d new DonorBuilder().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validDonor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validDonor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPatient);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPatient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Patient alicePatient \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        AddCommand addAlicePatientCommand \u003d new AddCommand(alicePatient);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different person type -\u003e return false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(addAliceCommand.equals(addAlicePatientCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public boolean hasDoctor(Nric doctor) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public boolean hasPatient(Nric patientNric) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public Patient getPatient(Nric patientNric) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ObservableList\u003cPerson\u003e getMatchList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void matchDonors(Patient patient) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void matchAllPatients() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void removeMatches() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 31,
      "C-likethis123": 41,
      "TheRealRavager": 45,
      "-": 184
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/CommandResultIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_IRENE_DONOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.parser.MatchCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class CommandResultIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(PATIENT_IRENE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isMatch_matchNricCommandResult_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult matchCommandResult \u003d (new MatchCommand(VALID_NRIC_PATIENT_IRENE)).execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(matchCommandResult.isMatch());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isMatch_matchAllCommandResult_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult matchCommandResult \u003d (new MatchCommand(MatchCommandParser.ALL)).execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(matchCommandResult.isMatch());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 39
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_DOCTOR_IN_CHARGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_ORGAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_ORGAN_EXPIRY_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TISSUE_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.parser.MatchCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import organice.model.person.Status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_NAME_DOCTOR_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_NAME_DONOR_JOHN \u003d \"John\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_NAME_PATIENT_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_NAME_PATIENT_IRENE \u003d \"Irene\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_PHONE_DOCTOR_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_PHONE_DONOR_JOHN \u003d \"81230942\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_PHONE_PATIENT_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_PHONE_PATIENT_IRENE \u003d \"85355255\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_NRIC_DOCTOR_AMY \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_NRIC_DONOR_JOHN \u003d \"T1312123P\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_NRIC_PATIENT_BOB \u003d \"G2222222B\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_NRIC_PATIENT_IRENE \u003d \"S1111112A\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_NRIC_DONOR_IRENE_DONOR \u003d \"S9876543G\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_TYPE_DOCTOR_AMY \u003d \"doctor\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_TYPE_DONOR_JOHN \u003d \"donor\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_TYPE_PATIENT_BOB \u003d \"patient\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_TYPE_PATIENT_IRENE \u003d \"patient\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_AGE_DONOR_JOHN \u003d \"60\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_AGE_PATIENT_BOB \u003d \"20\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String VALID_AGE_PATIENT_IRENE \u003d \"21\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_PRIORITY_PATIENT_IRENE \u003d \"high\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_PRIORITY_PATIENT_BOB \u003d \"medium\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_BLOOD_TYPE_DONOR_JOHN \u003d \"A\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_BLOOD_TYPE_PATIENT_BOB \u003d \"B\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_BLOOD_TYPE_PATIENT_IRENE \u003d \"O\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_TISSUE_TYPE_DONOR_JOHN \u003d \"1,2,3,4,5,6\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_TISSUE_TYPE_PATIENT_BOB \u003d \"7,8,9,10,11,12\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_TISSUE_TYPE_PATIENT_IRENE \u003d \"1,4,7,10,11,12\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String COMPATIBLE_TISSUE_TYPE_IRENE \u003d \"1,4,5,6,10,11\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String INCOMPATIBLE_TISSUE_TYPE_IRENE \u003d \"9,1,2,3,5,6\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_ORGAN_DONOR_JOHN \u003d \"kidney\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_ORGAN_PATIENT_BOB \u003d \"kidney\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_ORGAN_PATIENT_IRENE \u003d \"kidney\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_ORGAN_EXPIRY_DATE_DONOR_JOHN \u003d \"20-Jan-2020\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_ORGAN_EXPIRY_DATE_DONOR_JOHNY \u003d \"21-Jan-2020\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_DOCTOR_IN_CHARGE_PATIENT_BOB \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE \u003d \"S1231231B\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String VALID_STATUS_DONOR_JOHN \u003d Status.STATUS_NOT_PROCESSING;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String VALID_STATUS_PATIENT_IRENE \u003d Status.STATUS_NOT_PROCESSING;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String NAME_DESC_DOCTOR_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_DOCTOR_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String NAME_DESC_DONOR_JOHN \u003d \" \" + PREFIX_NAME + VALID_NAME_DONOR_JOHN;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String NAME_DESC_PATIENT_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String NAME_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_NAME + VALID_NAME_PATIENT_IRENE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String PHONE_DESC_DOCTOR_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_DOCTOR_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String PHONE_DESC_DONOR_JOHN \u003d \" \" + PREFIX_PHONE + VALID_PHONE_DONOR_JOHN;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String PHONE_DESC_PATIENT_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String PHONE_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String NRIC_DESC_DOCTOR_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String NRIC_DESC_DONOR_JOHN \u003d \" \" + PREFIX_NRIC + VALID_NRIC_DONOR_JOHN;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String NRIC_DESC_PATIENT_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String NRIC_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_NRIC + VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String TYPE_DESC_DOCTOR_AMY \u003d \" \" + PREFIX_TYPE + VALID_TYPE_DOCTOR_AMY;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String TYPE_DESC_DONOR_JOHN \u003d \" \" + PREFIX_TYPE + VALID_TYPE_DONOR_JOHN;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String TYPE_DESC_PATIENT_BOB \u003d \" \" + PREFIX_TYPE + VALID_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String TYPE_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_TYPE + VALID_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String AGE_DESC_DONOR_JOHN \u003d \" \" + PREFIX_AGE + VALID_AGE_DONOR_JOHN;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String AGE_DESC_PATIENT_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final String AGE_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_AGE + VALID_AGE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String PRIORITY_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PATIENT_IRENE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String PRIORITY_DESC_PATIENT_BOB \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PATIENT_BOB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String BLOOD_TYPE_DESC_DONOR_JOHN \u003d \" \" + PREFIX_BLOOD_TYPE + VALID_BLOOD_TYPE_DONOR_JOHN;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String BLOOD_TYPE_DESC_PATIENT_BOB \u003d \" \" + PREFIX_BLOOD_TYPE + VALID_BLOOD_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String BLOOD_TYPE_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_BLOOD_TYPE + VALID_BLOOD_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String TISSUE_TYPE_DESC_DONOR_JOHN \u003d \" \" + PREFIX_TISSUE_TYPE + VALID_TISSUE_TYPE_DONOR_JOHN;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String TISSUE_TYPE_DESC_PATIENT_BOB \u003d \" \" + PREFIX_TISSUE_TYPE"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_TISSUE_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String TISSUE_TYPE_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_TISSUE_TYPE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_TISSUE_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String ORGAN_DESC_DONOR_JOHN \u003d \" \" + PREFIX_ORGAN + VALID_ORGAN_DONOR_JOHN;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String ORGAN_DESC_PATIENT_BOB \u003d \" \" + PREFIX_ORGAN + VALID_ORGAN_PATIENT_BOB;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String ORGAN_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_ORGAN + VALID_ORGAN_PATIENT_IRENE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN \u003d \" \" + PREFIX_ORGAN_EXPIRY_DATE"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_ORGAN_EXPIRY_DATE_DONOR_JOHN;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String ORGAN_EXPIRY_DATE_DESC_DONOR_JOHNY \u003d \" \" + PREFIX_ORGAN_EXPIRY_DATE"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_ORGAN_EXPIRY_DATE_DONOR_JOHNY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DOCTOR_IN_CHARGE_DESC_PATIENT_BOB \u003d \" \" + PREFIX_DOCTOR_IN_CHARGE"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_DOCTOR_IN_CHARGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE \u003d \" \" + PREFIX_DOCTOR_IN_CHARGE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String STATUS_DESC_DONOR_JOHN \u003d VALID_STATUS_DONOR_JOHN;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String STATUS_DESC_PATIENT_IRENE \u003d VALID_STATUS_PATIENT_IRENE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"G123A\"; // need exactly 7 numbers in nrics"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE + \"student\"; // only allow \u0027patient\u0027,\u0027donor\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    // \u0027doctor\u0027"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"-9\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"med\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_BLOOD_TYPE_DESC \u003d \" \" + PREFIX_BLOOD_TYPE + \"ABC\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_TISSUE_TYPE_DESC \u003d \" \" + PREFIX_TISSUE_TYPE + \"1,2,12,13,14,4\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_ORGAN_DESC \u003d \" \" + PREFIX_ORGAN + \"heart\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_DOCTOR_IN_CHARGE_DESC \u003d \" \" + PREFIX_DOCTOR_IN_CHARGE + \"S123B\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_ORGAN_EXPIRY_DATE_DESC \u003d \" \" + PREFIX_ORGAN_EXPIRY_DATE + \"20.01.2020\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String INVALID_STATUS_DESC \u003d \"procesin\"; //typo spelling mistake"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_MATCHCOMMAND_ALL \u003d \" \" + PREFIX_NRIC + MatchCommandParser.ALL;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String INVALID_MATCHCOMMAND_ALL \u003d \" \" + PREFIX_NRIC + \"al\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        DESC_DOCTOR_AMY \u003d new EditPersonDescriptorBuilder().withType(\"doctor\").withNric(VALID_NRIC_DOCTOR_AMY)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withName(VALID_NAME_DOCTOR_AMY).withPhone(VALID_PHONE_DOCTOR_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        DESC_PATIENT_BOB \u003d new EditPersonDescriptorBuilder().withType(\"patient\").withNric(VALID_NRIC_PATIENT_BOB)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withName(VALID_NAME_PATIENT_BOB).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            assertEquals(actualModel, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 56,
      "C-likethis123": 18,
      "TheRealRavager": 67,
      "-": 81,
      "SimNee": 8
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 13,
      "-": 96
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_PATIENT_BOB).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_PATIENT_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_PATIENT_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_PATIENT_BOB).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_DOCTOR_AMY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_DOCTOR_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_DOCTOR_AMY)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_PATIENT_BOB)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 32,
      "-": 139
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_DOCTOR_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DESC_DOCTOR_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DESC_DOCTOR_AMY.equals(DESC_DOCTOR_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DESC_DOCTOR_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DESC_DOCTOR_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DESC_DOCTOR_AMY.equals(DESC_PATIENT_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_DOCTOR_AMY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withName(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DESC_DOCTOR_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_DOCTOR_AMY).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DESC_DOCTOR_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_DOCTOR_AMY).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DESC_DOCTOR_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 2,
      "TheRealRavager": 21,
      "-": 27
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(Arrays.asList(PATIENT_CARL, DONOR_ELLE, DONOR_FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 12,
      "-": 71
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static final Type TYPE_PATIENT \u003d new Type(\"patient\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static final Type TYPE_DONOR \u003d new Type(\"donor\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static final Type TYPE_DOCTOR \u003d new Type(\"doctor\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertCommandSuccess(new ListCommand(null), model, ListCommand.LIST_OF_PERSONS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertCommandSuccess(new ListCommand(null), model, ListCommand.LIST_OF_PERSONS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void execute_listIsFiltered_showsPatients() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertCommandSuccess(new ListCommand(TYPE_PATIENT), model, ListCommand.LIST_OF_PATIENTS, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void execute_listIsFiltered_showsDonors() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_DONORS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertCommandSuccess(new ListCommand(TYPE_DONOR), model, ListCommand.LIST_OF_DONORS, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void execute_listIsFiltered_showsDoctors() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_DOCTORS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertCommandSuccess(new ListCommand(TYPE_DOCTOR), model, ListCommand.LIST_OF_DOCTORS, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(TYPE_PATIENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(listCommand.equals(new ListCommand(TYPE_PATIENT)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(listCommand.equals(listCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(listCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(listCommand.equals(5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // different type values -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(listCommand.equals(TYPE_DONOR));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(listCommand.equals(TYPE_DOCTOR));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 8,
      "-": 29,
      "Yen-Peng": 48
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/MatchCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_IRENE_DONOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.parser.MatchCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code MatchCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(PATIENT_IRENE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        model.addPerson(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void execute_matchNric_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MatchCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        expectedCommandResult.setMatch(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertCommandSuccess(new MatchCommand(VALID_NRIC_PATIENT_IRENE), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void execute_matchAll_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MatchCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        expectedCommandResult.setMatch(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertCommandSuccess(new MatchCommand(MatchCommandParser.ALL), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 50
    }
  },
  {
    "path": "src/test/java/organice/logic/commands/MatchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static javafx.collections.FXCollections.observableArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.COMPATIBLE_TISSUE_TYPE_IRENE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.model.person.BloodType.BLOODTYPE_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.model.person.BloodType.BLOODTYPE_AB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.model.person.BloodType.BLOODTYPE_B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.model.person.BloodType.BLOODTYPE_O;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_IRENE_DONOR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedDonor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.testutil.DonorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //Donors of all types"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Donor DONOR_A \u003d new DonorBuilder(DONOR_IRENE_DONOR).withBloodType(BLOODTYPE_A.toString()).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Donor DONOR_B \u003d new DonorBuilder(DONOR_IRENE_DONOR).withBloodType(BLOODTYPE_B.toString()).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Donor DONOR_AB \u003d new DonorBuilder(DONOR_IRENE_DONOR).withBloodType(BLOODTYPE_AB.toString()).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Donor DONOR_O \u003d new DonorBuilder(DONOR_IRENE_DONOR).withBloodType(BLOODTYPE_O.toString()).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Donor DONOR_SIMILAR_TISSUE \u003d new DonorBuilder(DONOR_IRENE_DONOR)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            .withTissueType(COMPATIBLE_TISSUE_TYPE_IRENE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //Patient of all types"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Patient PATIENT_A \u003d new PatientBuilder(PATIENT_IRENE).withBloodType(BLOODTYPE_A.toString()).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Patient PATIENT_B \u003d new PatientBuilder(PATIENT_IRENE).withBloodType(BLOODTYPE_B.toString()).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Patient PATIENT_AB \u003d new PatientBuilder(PATIENT_IRENE).withBloodType(BLOODTYPE_AB.toString()).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Patient PATIENT_O \u003d new PatientBuilder(PATIENT_IRENE).withBloodType(BLOODTYPE_O.toString()).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MatchCommand(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void execute_patientExists_haveMatch() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ModelStubWithDonor modelStub \u003d new ModelStubWithDonor(PATIENT_IRENE, DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String validNric \u003d VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult commandResult \u003d new MatchCommand(validNric).execute(modelStub);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ObservableList\u003cPerson\u003e listOfDonors \u003d modelStub.getMatchList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(String.format(MatchCommand.MESSAGE_SUCCESS, validNric), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(Arrays.asList(DONOR_IRENE_DONOR), listOfDonors);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void execute_patientExists_noMatch() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ModelStubWithoutDonor modelStub \u003d new ModelStubWithoutDonor(PATIENT_IRENE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String validNric \u003d VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult commandResult \u003d new MatchCommand(validNric).execute(modelStub);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ObservableList\u003cPerson\u003e listOfDonors \u003d modelStub.getMatchList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(String.format(MatchCommand.MESSAGE_SUCCESS, validNric), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(listOfDonors.size(), 0); //assert that there is no donor"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void execute_patientDoesNotExist_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ModelStubWithoutDonor modelStub \u003d new ModelStubWithoutDonor(PATIENT_BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String validNric \u003d VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult commandResult \u003d new MatchCommand(validNric).execute(modelStub);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(String.format(MatchCommand.MESSAGE_PERSON_NOT_FOUND, validNric),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void match_isSuccessfulMatch() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchCommand matchCommand \u003d new MatchCommand(VALID_NRIC_PATIENT_IRENE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        boolean matchResult \u003d matchCommand.match(DONOR_IRENE_DONOR, PATIENT_IRENE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(matchResult); //100% match and same blood type"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with 4/6 matching tissues and same blood type."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        matchResult \u003d matchCommand.match(DONOR_SIMILAR_TISSUE, PATIENT_IRENE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(matchResult);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with blood type A matches patient with blood type A and AB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_A, PATIENT_A), true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_A, PATIENT_AB), true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with blood type B matches patient with blood type B and AB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_B, PATIENT_B), true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_B, PATIENT_AB), true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with blood type AB matches patient with blood type AB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_AB, PATIENT_AB), true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with blood type O matches patient with blood type A, B, AB and O"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_O, PATIENT_A), true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_O, PATIENT_B), true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_O, PATIENT_AB), true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_O, PATIENT_O), true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void match_isNotSuccessfulMatch() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchCommand matchCommand \u003d new MatchCommand(VALID_NRIC_PATIENT_IRENE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Donor differentBloodType \u003d new DonorBuilder(DONOR_IRENE_DONOR).withBloodType(\"B\").build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        boolean matchResult \u003d matchCommand.match(differentBloodType, PATIENT_IRENE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(matchResult); //100% tissue match and different blood type"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with 4/6 matching tissues and different blood type."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //Hardcoded because there is no way to change tissue types in a more elegant manner"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Donor someMatchingTissues \u003d new DonorBuilder(DONOR_IRENE_DONOR).withTissueType(COMPATIBLE_TISSUE_TYPE_IRENE)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                .withBloodType(\"B\").build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        matchResult \u003d matchCommand.match(someMatchingTissues, PATIENT_IRENE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(matchResult);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with blood type A do not match patients with blood type B and O"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_A, PATIENT_B), false);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_A, PATIENT_O), false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with blood type B do not match patients with blood type A and P"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_B, PATIENT_A), false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_B, PATIENT_O), false);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //donor with blood type AB do not match patients with blood type A, B and O"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_AB, PATIENT_A), false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_AB, PATIENT_B), false);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchCommand.match(DONOR_AB, PATIENT_O), false);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchCommand matchIreneCommand \u003d new MatchCommand(VALID_NRIC_PATIENT_IRENE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchCommand matchBobCommand \u003d new MatchCommand(VALID_NRIC_PATIENT_BOB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        AddCommand addIreneCommand \u003d new AddCommand(PATIENT_IRENE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(matchIreneCommand.equals(matchIreneCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchCommand matchIreneCommandCopy \u003d new MatchCommand(VALID_NRIC_PATIENT_IRENE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(matchIreneCommand.equals(matchIreneCommandCopy));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(matchIreneCommand.equals(1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(matchIreneCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(matchIreneCommand.equals(matchBobCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //different command type -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(matchIreneCommand.equals(addIreneCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public boolean hasDoctor(Nric doctor) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public boolean hasPatient(Nric patientNric) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public Patient getPatient(Nric patientNric) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ObservableList\u003cPerson\u003e getMatchList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void matchDonors(Patient patient) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void matchAllPatients() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void removeMatches() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * A Model stub that contains a matching donor."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private class ModelStubWithDonor extends ModelStub {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        private FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        private ObservableList\u003cPerson\u003e listOfMatches;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ModelStubWithDonor(Patient patient, Donor donor) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            AddressBook addressBook \u003d new AddressBookBuilder().withPerson(patient).withPerson(donor).build();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            filteredPersons \u003d new FilteredList\u003c\u003e(addressBook.getPersonList());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public boolean hasPatient(Nric patientNric) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            requireNonNull(patientNric);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return filteredPersons.stream().anyMatch(patient -\u003e patient.getNric().equals(patientNric));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public Patient getPatient(Nric patientNric) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            requireNonNull(patientNric);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            for (Person person : filteredPersons) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                if (person instanceof Patient \u0026\u0026 person.getNric().equals(patientNric)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    return (Patient) person;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return filteredPersons;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        private void addMatchedDonor(MatchedDonor matchedDonor) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            listOfMatches.add(matchedDonor);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void matchDonors(Patient patient) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            //filter out donors."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            updateFilteredPersonList(PREDICATE_SHOW_ALL_DONORS);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            //if match, create a MatchedDonor and add to the list."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            for (Person person: filteredPersons) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                if (person instanceof MatchedDonor) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                boolean isMatch \u003d MatchCommand.match(person, patient);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                if (isMatch) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    MatchedDonor matchedDonor \u003d new MatchedDonor((Donor) person);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    addMatchedDonor(matchedDonor);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ObservableList\u003cPerson\u003e getMatchList() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return listOfMatches;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void removeMatches() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            listOfMatches \u003d observableArrayList();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private class ModelStubWithoutDonor extends ModelStub {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        private FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        private ObservableList\u003cPerson\u003e listOfMatches;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ModelStubWithoutDonor(Patient patient) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            AddressBook addressBook \u003d new AddressBookBuilder().withPerson(patient).build();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            filteredPersons \u003d new FilteredList\u003c\u003e(addressBook.getPersonList());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public boolean hasPatient(Nric patientNric) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            requireNonNull(patientNric);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return filteredPersons.stream().anyMatch(patient -\u003e patient.getNric().equals(patientNric));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public Patient getPatient(Nric patientNric) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            requireNonNull(patientNric);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            for (Person person : filteredPersons) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                if (person instanceof Patient \u0026\u0026 person.getNric().equals(patientNric)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    return (Patient) person;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return filteredPersons;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        private void addMatchedDonor(MatchedDonor matchedDonor) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            listOfMatches.add(matchedDonor);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void matchDonors(Patient patient) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            //filter out donors."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            updateFilteredPersonList(PREDICATE_SHOW_ALL_DONORS);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            //if match, create a MatchedDonor and add to the list."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            for (Person person: filteredPersons) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                if (person instanceof MatchedDonor) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                boolean isMatch \u003d MatchCommand.match(person, patient);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                if (isMatch) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    MatchedDonor matchedDonor \u003d new MatchedDonor((Donor) person);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    addMatchedDonor(matchedDonor);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public ObservableList\u003cPerson\u003e getMatchList() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return listOfMatches;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        public void removeMatches() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            listOfMatches \u003d observableArrayList();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 443
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.AGE_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.AGE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.AGE_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.DOCTOR_IN_CHARGE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_BLOOD_TYPE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_DOCTOR_IN_CHARGE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_ORGAN_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_ORGAN_EXPIRY_DATE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_TISSUE_TYPE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NAME_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NAME_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NAME_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NAME_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.ORGAN_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.ORGAN_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.ORGAN_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.ORGAN_EXPIRY_DATE_DESC_DONOR_JOHNY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PHONE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PHONE_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PHONE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PHONE_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PRIORITY_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PRIORITY_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TISSUE_TYPE_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TISSUE_TYPE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TISSUE_TYPE_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TYPE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TYPE_DESC_DONOR_JOHN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TYPE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TYPE_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_DONOR_JOHN;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_DONOR_JOHN;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_DOCTOR_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_DONOR_JOHN;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_IRENE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_DONOR_JOHN;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_DONOR_JOHN;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_EXPIRY_DATE_DONOR_JOHN;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_PATIENT_IRENE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_DOCTOR_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_DONOR_JOHN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PRIORITY_PATIENT_IRENE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_DONOR_JOHN;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TYPE_DONOR_JOHN;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_JOHN;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Age;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.BloodType;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Doctor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.DoctorInCharge;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Organ;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.OrganExpiryDate;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Priority;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.TissueType;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.testutil.DonorBuilder;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void parse_allFieldsPresentPatient_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE + NAME_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + PHONE_DESC_DOCTOR_AMY + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_DOCTOR_AMY + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_BOB + TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //multiple priority - last priority accepted"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE + PRIORITY_DESC_PATIENT_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple ages - last age accepted"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_BOB + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple blood type - last blood type accepted"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE + PRIORITY_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_PATIENT_BOB + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple tissue type - last tissue type accepted"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE + PRIORITY_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_BOB + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple organ - last organ accepted"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE + PRIORITY_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_BOB + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple doctor in charge - last doctor in charge accepted"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE + PRIORITY_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_BOB + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void parse_allFieldsPresentDonor_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor expectedDonor \u003d new DonorBuilder(DONOR_JOHN).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DONOR_JOHN + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DONOR_JOHN + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DOCTOR_AMY + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DOCTOR_AMY + NRIC_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DONOR_JOHN + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_BOB + TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DONOR_JOHN + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple ages - last age accepted"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_PATIENT_BOB + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple blood type - last blood type accepted"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_PATIENT_BOB + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple tissue type - last tissue type accepted"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_PATIENT_BOB + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple organ - last organ accepted"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_BOB + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple organ expiry date - last organ expiry date accepted"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHNY + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void parse_allFieldsPresentDoctor_success() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        //Testing all fields present for a Doctor"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Doctor expectedDonor \u003d DOCTOR_AMY;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DOCTOR_AMY + PHONE_DESC_DOCTOR_AMY, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY + NAME_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DOCTOR_AMY + PHONE_DESC_DOCTOR_AMY, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY + NAME_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DOCTOR_AMY + PHONE_DESC_DOCTOR_AMY, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DOCTOR_AMY + PHONE_DESC_DOCTOR_AMY, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_PATIENT_BOB + TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DOCTOR_AMY + PHONE_DESC_DOCTOR_AMY, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing type prefix"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_PATIENT_BOB + NRIC_DESC_PATIENT_BOB + NAME_DESC_PATIENT_BOB"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                + PHONE_DESC_PATIENT_BOB, expectedMessage);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing nric prefix -- donor"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN + VALID_NRIC_DONOR_JOHN"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        //missing nric prefix -- patient"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_NRIC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing nric prefix -- doctor"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DOCTOR_AMY + NAME_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_NRIC_DOCTOR_AMY + PHONE_DESC_DOCTOR_AMY, expectedMessage);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing name prefix -- donor"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + VALID_NAME_DONOR_JOHN"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing name prefix -- patient"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_NAME_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing name prefix -- doctor"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_NAME_DOCTOR_AMY + PHONE_DESC_DOCTOR_AMY, expectedMessage);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing phone prefix -- donor"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_PHONE_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing phone prefix -- patient"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + VALID_PHONE_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing phone prefix -- doctor"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_DOCTOR_AMY + VALID_PHONE_DOCTOR_AMY, expectedMessage);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing age prefix -- donor"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + VALID_AGE_DONOR_JOHN"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing age prefix -- patient"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + VALID_AGE_PATIENT_IRENE"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // missing priority prefix -- patient"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_PRIORITY_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing blood type prefix -- donor"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_BLOOD_TYPE_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing blood type prefix -- patient"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + VALID_BLOOD_TYPE_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing tissue type prefix -- donor"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + VALID_TISSUE_TYPE_DONOR_JOHN"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing tissue type prefix -- patient"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + VALID_TISSUE_TYPE_PATIENT_IRENE"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing organ prefix -- donor"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_ORGAN_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing organ prefix -- patient"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_ORGAN_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing organ expiry date prefix -- donor"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + VALID_ORGAN_EXPIRY_DATE_DONOR_JOHN,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing doctor in charge prefix -- patient"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // all prefixes missing -- donor"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_DONOR_JOHN + VALID_NRIC_DONOR_JOHN + VALID_NAME_DONOR_JOHN"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_PHONE_DONOR_JOHN + VALID_AGE_DONOR_JOHN"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_BLOOD_TYPE_DONOR_JOHN + VALID_TISSUE_TYPE_DONOR_JOHN"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_ORGAN_DONOR_JOHN + VALID_ORGAN_EXPIRY_DATE_DONOR_JOHN,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // all prefixes missing -- patient"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_PATIENT_IRENE + VALID_NRIC_PATIENT_IRENE + VALID_NAME_PATIENT_IRENE"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_PHONE_PATIENT_IRENE + VALID_AGE_PATIENT_IRENE"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_BLOOD_TYPE_PATIENT_IRENE + VALID_TISSUE_TYPE_PATIENT_IRENE"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + VALID_ORGAN_PATIENT_IRENE + VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE,"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        expectedMessage);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_DESC + NRIC_DESC_PATIENT_BOB + NAME_DESC_PATIENT_BOB"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            + PHONE_DESC_PATIENT_BOB, Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid nric -- donor"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN + INVALID_NRIC_DESC"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        //invalid nric -- patient"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NAME_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_NRIC_DESC + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid nric -- doctor"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DOCTOR_AMY + NAME_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + INVALID_NRIC_DESC + PHONE_DESC_DOCTOR_AMY, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid name -- donor"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid name -- patient"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_NAME_DESC + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid name -- doctor"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + INVALID_NAME_DESC + PHONE_DESC_DOCTOR_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid phone -- donor"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_PHONE_DESC + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid phone -- patient"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + INVALID_PHONE_DESC + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid phone -- doctor"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DOCTOR_AMY + NRIC_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + NAME_DESC_DOCTOR_AMY + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid age -- donor"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + INVALID_AGE_DESC"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid age -- patient"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + INVALID_AGE_DESC"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // invalid priority -- patient"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_PRIORITY_DESC + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid blood type -- donor"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_BLOOD_TYPE_DESC + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid blood type -- patient"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + INVALID_BLOOD_TYPE_DESC + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid tissue type -- donor"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + INVALID_TISSUE_TYPE_DESC"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        TissueType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid tissue type -- patient"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + INVALID_TISSUE_TYPE_DESC"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        TissueType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid organ -- donor"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_ORGAN_DESC + ORGAN_EXPIRY_DATE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Organ.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid organ -- patient"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_ORGAN_DESC + DOCTOR_IN_CHARGE_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Organ.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid organ expiry date -- donor"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_DONOR_JOHN + INVALID_ORGAN_EXPIRY_DATE_DESC,"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        OrganExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid doctor in charge -- patient"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PRIORITY_DESC_PATIENT_IRENE + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + INVALID_DOCTOR_IN_CHARGE_DESC,"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        DoctorInCharge.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // two invalid values, only first invalid value reported -- donor"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN + NAME_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + BLOOD_TYPE_DESC_DONOR_JOHN + TISSUE_TYPE_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_ORGAN_DESC + INVALID_ORGAN_EXPIRY_DATE_DESC,"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Organ.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // two invalid values, only first invalid value reported -- patient"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_PATIENT_IRENE + NRIC_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + NAME_DESC_PATIENT_IRENE + PHONE_DESC_PATIENT_IRENE + AGE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_PRIORITY_DESC + BLOOD_TYPE_DESC_PATIENT_IRENE + TISSUE_TYPE_DESC_PATIENT_IRENE"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + ORGAN_DESC_PATIENT_IRENE + INVALID_DOCTOR_IN_CHARGE_DESC,"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // two invalid values, only first invalid value reported -- doctor"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_DOCTOR_AMY + NAME_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + INVALID_NRIC_DESC + INVALID_PHONE_DESC, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // non-empty preamble -- donor"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_DONOR_JOHN + NRIC_DESC_DONOR_JOHN"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                + NAME_DESC_DONOR_JOHN + PHONE_DESC_DONOR_JOHN + AGE_DESC_DONOR_JOHN,"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // non-empty preamble -- patient"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_PATIENT_BOB + NRIC_DESC_PATIENT_BOB"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_PATIENT_BOB + PHONE_DESC_PATIENT_BOB + AGE_DESC_PATIENT_BOB + PRIORITY_DESC_PATIENT_BOB,"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // non-empty preamble -- doctor"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_DOCTOR_AMY + PHONE_DESC_DOCTOR_AMY"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + NRIC_DESC_DOCTOR_AMY + NAME_DESC_DOCTOR_AMY,"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 432,
      "C-likethis123": 76,
      "TheRealRavager": 64,
      "-": 38
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 20,
      "-": 81
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NAME_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PHONE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PHONE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TYPE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.TYPE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_DOCTOR_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TYPE_DOCTOR_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_DOCTOR_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_DOCTOR_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_DOCTOR_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS); // invalid nric"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TYPE_DESC, Type.MESSAGE_CONSTRAINTS); // invalid type"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, \"1\" + TYPE_DESC_PATIENT_BOB + NRIC_DESC_PATIENT_BOB + PHONE_DESC_PATIENT_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertParseFailure(parser, \"1\" + TYPE_DESC_PATIENT_BOB + INVALID_NRIC_DESC + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_PHONE_DESC, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TYPE_DESC_PATIENT_BOB + NRIC_DESC_PATIENT_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                + PHONE_DESC_PATIENT_BOB + NAME_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withType(VALID_TYPE_PATIENT_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withNric(VALID_NRIC_PATIENT_BOB).withPhone(VALID_PHONE_PATIENT_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withName(VALID_NAME_DOCTOR_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TYPE_DESC_PATIENT_BOB + NRIC_DESC_PATIENT_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                + PHONE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withType(VALID_TYPE_PATIENT_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withNric(VALID_NRIC_PATIENT_BOB).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_DOCTOR_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_DOCTOR_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // nric"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_DOCTOR_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // type"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TYPE_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withType(VALID_TYPE_DOCTOR_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TYPE_DESC_DOCTOR_AMY + TYPE_DESC_PATIENT_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                + PHONE_DESC_DOCTOR_AMY + PHONE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withType(VALID_TYPE_PATIENT_BOB)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_PATIENT_BOB + NRIC_DESC_PATIENT_BOB;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_PATIENT_BOB)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 5,
      "TheRealRavager": 65,
      "-": 104
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import organice.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static final Type TYPE_PATIENT \u003d new Type(\"patient\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static final Type TYPE_DONOR \u003d new Type(\"donor\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private static final Type TYPE_DOCTOR \u003d new Type(\"doctor\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void parse_validArgs_returnsListCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // no leading and trailing whitespaces -- no argument given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseSuccess(parser, \"list\", expectedListCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // no leading and trailing whitespaces -- patient"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedListCommand \u003d new ListCommand(TYPE_PATIENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseSuccess(parser, \"list t/patient\", expectedListCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // no leading and trailing whitespaces -- donor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedListCommand \u003d new ListCommand(TYPE_DONOR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseSuccess(parser, \"list t/donor\", expectedListCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // no leading and trailing whitespaces -- doctor"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedListCommand \u003d new ListCommand(TYPE_DOCTOR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseSuccess(parser, \"list t/doctor\", expectedListCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // leading and trailing whitespaces -- no argument given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedListCommand \u003d new ListCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseSuccess(parser, \"list   \", expectedListCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // leading and trailing whitespaces -- patient"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedListCommand \u003d new ListCommand(TYPE_PATIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseSuccess(parser, \"list    t/patient\", expectedListCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // leading and trailing whitespaces -- donor"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedListCommand \u003d new ListCommand(TYPE_DONOR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseSuccess(parser, \"list    t/donor\", expectedListCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // leading and trailing whitespaces -- doctor"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        expectedListCommand \u003d new ListCommand(TYPE_DOCTOR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseSuccess(parser, \"list      t/doctor\", expectedListCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // wrong type specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertParseFailure(parser, \"list t/student\", Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yen-Peng": 58
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/MatchCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_MATCHCOMMAND_ALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.NRIC_DESC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_MATCHCOMMAND_ALL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private MatchCommandParser parser \u003d new MatchCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // whitespace only preamble -- nric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NRIC_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        new MatchCommand(VALID_NRIC_PATIENT_IRENE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple nrics -- last one accepted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_DOCTOR_AMY + NRIC_DESC_PATIENT_IRENE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        new MatchCommand(VALID_NRIC_PATIENT_IRENE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // white space only preamble -- all"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_MATCHCOMMAND_ALL,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                new MatchCommand(MatchCommandParser.ALL));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple all inputs -- last one accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, VALID_MATCHCOMMAND_ALL + VALID_MATCHCOMMAND_ALL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                new MatchCommand(MatchCommandParser.ALL));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void parse_nricFieldMissing_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // missing nric prefix -- nric input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseFailure(parser, VALID_NRIC_PATIENT_IRENE, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // missing nric prefix -- all input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseFailure(parser, MatchCommandParser.ALL, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // wrongly typed nric"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseFailure(parser, INVALID_NRIC_DESC, MatchCommandParser.MESSAGE_INVALID_INPUTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // wrongly typed all"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseFailure(parser, INVALID_MATCHCOMMAND_ALL, MatchCommandParser.MESSAGE_INVALID_INPUTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 61
    }
  },
  {
    "path": "src/test/java/organice/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"G123A\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"student\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_TYPE \u003d \"doctor\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseNric_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseNric_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseType((String) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseType(INVALID_TYPE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseType_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(VALID_TYPE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseType_validValueWithWhitespace_returnsTrimmedType() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String typeWithWhitespace \u003d WHITESPACE + VALID_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(typeWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 26,
      "TheRealRavager": 9,
      "-": 106
    }
  },
  {
    "path": "src/test/java/organice/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_IRENE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_GEORGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_CARL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.testutil.DonorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withNric(\"S1532142A\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(DOCTOR_ALICE, editedAlice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(addressBook.hasPerson(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        addressBook.addPerson(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(addressBook.hasPerson(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        addressBook.addPerson(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withNric(\"S1532142A\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void hasPatient_patientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        addressBook.addPerson(PATIENT_BOB);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(addressBook.hasPatient(PATIENT_BOB.getNric()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        addressBook.addPerson(PATIENT_CARL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient editedCarl \u003d new PatientBuilder(PATIENT_CARL).withName(VALID_NAME_PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(addressBook.hasPatient(editedCarl.getNric()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void hasPatient_patientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        addressBook.addPerson(PATIENT_BOB);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(addressBook.hasPatient(PATIENT_CARL.getNric()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void hasPatient_personWithSameNricButNotPatient_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Donor editedElle \u003d new DonorBuilder(DONOR_ELLE).withNric(VALID_NRIC_PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        addressBook.addPerson(editedElle);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Nric ireneNric \u003d new Nric(VALID_NRIC_PATIENT_IRENE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(addressBook.hasPatient(ireneNric));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void getPatient_patientInAddressBook_returnsPatient() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        addressBook.addPerson(PATIENT_BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        addressBook.addPerson(DONOR_GEORGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PATIENT_BOB, addressBook.getPatient(PATIENT_BOB.getNric()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void getPatient_patientNotInAddressBook_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        addressBook.addPerson(PATIENT_BOB);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        addressBook.addPerson(DONOR_GEORGE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e addressBook.getPatient(PATIENT_IRENE.getNric()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hasDoctor_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasDoctor(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hasDoctor_doctorNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(addressBook.hasDoctor(DOCTOR_ALICE.getNric()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hasDoctor_doctorInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        addressBook.addPerson(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(addressBook.hasDoctor(DOCTOR_ALICE.getNric()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hasDoctor_doctorWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        addressBook.addPerson(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withNric(DOCTOR_ALICE.getNric().toString()).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(addressBook.hasDoctor(editedAlice.getNric()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 24,
      "C-likethis123": 56,
      "TheRealRavager": 14,
      "-": 84
    }
  },
  {
    "path": "src/test/java/organice/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_IRENE_DONOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedDonor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.MatchedPatient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(modelManager.hasPerson(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        modelManager.addPerson(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(modelManager.hasPerson(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hasDoctor_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasDoctor(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hasDoctor_doctorNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(modelManager.hasDoctor(DOCTOR_ALICE.getNric()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hasDoctor_doctorInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        modelManager.addPerson(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(modelManager.hasDoctor(DOCTOR_ALICE.getNric()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void addMatchedDonor_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor matchedDonor \u003d new MatchedDonor(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.addMatchedDonor(matchedDonor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        List\u003cPerson\u003e listOfMatches \u003d modelManager.getMatchList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(1, listOfMatches.size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void addMatchedPatient_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient matchedPatient \u003d new MatchedPatient(PATIENT_IRENE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.addMatchedPatient(matchedPatient);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        List\u003cPerson\u003e listOfMatches \u003d modelManager.getMatchList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(1, listOfMatches.size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void matchDonors() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.addPerson(PATIENT_IRENE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.addPerson(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor matchedDonor \u003d new MatchedDonor(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.matchDonors(PATIENT_IRENE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        List\u003cPerson\u003e listOfMatches \u003d modelManager.getMatchList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor matchedDonorAfterMatching \u003d (MatchedDonor) listOfMatches.get(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchedDonor, matchedDonorAfterMatching);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void matchAllPatients() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.addPerson(PATIENT_IRENE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.addPerson(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient matchedPatient \u003d new MatchedPatient(PATIENT_IRENE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.matchAllPatients();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        List\u003cPerson\u003e listOfMatches \u003d modelManager.getMatchList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient matchedPatientAfterMatching \u003d (MatchedPatient) listOfMatches.get(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(matchedPatient, matchedPatientAfterMatching);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void removeMatches() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor matchedDonor \u003d new MatchedDonor(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.addMatchedDonor(matchedDonor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        modelManager.removeMatches();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        List\u003cPerson\u003e listOfMatches \u003d modelManager.getMatchList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(0, listOfMatches.size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(DOCTOR_ALICE).withPerson(DOCTOR_BENSON).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] keywords \u003d DOCTOR_ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 14,
      "C-likethis123": 63,
      "TheRealRavager": 13,
      "-": 121
    }
  },
  {
    "path": "src/test/java/organice/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/organice/model/person/AgeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.model.person.Age.AGE_MAX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.model.person.Age.AGE_MIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Integer AGE_MAX_ONE_MORE \u003d AGE_MAX + 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    static final Integer AGE_MAX_ONE_LESS \u003d AGE_MAX - 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Integer AGE_MAX_TEN_MORE \u003d AGE_MAX + 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Integer AGE_MIN_ONE_LESS \u003d AGE_MIN - 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    static final Integer AGE_MIN_ONE_MORE \u003d AGE_MIN + 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String invalidAge \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // invalid age"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"Peter\")); //alphabets"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"-74\")); //negative numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"-150\")); //negative 3 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(null)); //null age"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"0.8\")); //decimals"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"1.9\")); //decimals"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"-82.9\")); //negative decimals"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MIN.toString())); //min valid age"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MAX.toString())); //max valid age"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MAX_ONE_MORE.toString())); //max age + 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MAX_TEN_MORE.toString())); //max age + 10"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MIN_ONE_LESS.toString())); //min age - 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // valid age"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        for (int age \u003d AGE_MIN + 1; age \u003c AGE_MAX; age++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Integer currentAge \u003d age;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            assertTrue(Age.isValidAge(currentAge.toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Age(AGE_MAX_ONE_LESS.toString()).toString(), AGE_MAX_ONE_LESS.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Age(AGE_MIN_ONE_MORE.toString()).toString(), AGE_MIN_ONE_MORE.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Age maxValidAge \u003d new Age((AGE_MAX_ONE_LESS.toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(maxValidAge.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(maxValidAge.equals(new Age(AGE_MIN_ONE_MORE.toString())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(maxValidAge.equals(maxValidAge));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(maxValidAge.equals(new Age(AGE_MAX_ONE_LESS.toString())));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Age maxValidAge \u003d new Age((AGE_MAX_ONE_LESS.toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(maxValidAge.hashCode(), new Age((AGE_MAX_ONE_LESS.toString())).hashCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(maxValidAge.hashCode(), new Age((AGE_MIN_ONE_MORE.toString())).hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 28,
      "C-likethis123": 49,
      "TheRealRavager": 4
    }
  },
  {
    "path": "src/test/java/organice/model/person/BloodTypeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": "public class BloodTypeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BloodType(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void constructor_invalidBloodType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        String invalidBloodType \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BloodType(invalidBloodType));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void isValidBloodType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // null blood type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BloodType.isValidBloodType(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // invalid blood type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"C\")); // wrong bloodtype"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"1\")); // numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"C+C\")); // + within alphabets"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A B\")); // spaces within alphabets"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // valid blood type"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"B\")); // exactly 1 alphabet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"AB\")); //2 alphabets"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"Ab\")); //case insensitive"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"aB+\")); // with positive and case insensitive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"O+\")); // with positive and capital"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"o+\")); // with positive and non capital"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(new BloodType(\"Ab+\").toString(), \"AB+\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(new BloodType(\"ab+\").toString(), \"AB+\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        BloodType bloodType \u003d new BloodType(\"AB+\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(bloodType.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(bloodType.equals(new BloodType(\"A+\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(bloodType.equals(bloodType));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(bloodType.equals(new BloodType(\"AB+\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        BloodType bloodType \u003d new BloodType(\"AB+\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(bloodType.hashCode(), new BloodType(\"Ab+\").hashCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertNotEquals(bloodType.hashCode(), new BloodType(\"A+\").hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SimNee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SimNee": 69
    }
  },
  {
    "path": "src/test/java/organice/model/person/DoctorInChargeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DoctorInChargeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DoctorInCharge(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_invalidDoctorInCharge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String invalidDoctorInCharge \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DoctorInCharge(invalidDoctorInCharge));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void isValidDoctorInCharge() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null doctor in charge"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DoctorInCharge.isValidDoctorInCharge(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid doctor in charge"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"1234567\")); // contains only number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"9312930R\")); // begins with a number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"S123456A\")); // contains less than 7 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"S1234567\")); // ends with a number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"AAAAAAAAA\")); // contains only letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"N1234567A\")); // starts with letter other than S/T/F/G"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // valid doctor in charge"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"s1234512b\")); // should be case insensitive"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"s1234512R\")); // should be case insensitive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"T1234512a\")); // should be case insensitive"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"S1234567B\")); // starts with \u0027S\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"T2222222A\")); // starts with \u0027T\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"F3333333A\")); // starts with \u0027F\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"G4444444A\")); // starts with \u0027G\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new DoctorInCharge(\"S1111111A\").toString(), \"S1111111A\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DoctorInCharge doctorInCharge \u003d new DoctorInCharge(\"S1111111A\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(doctorInCharge.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(doctorInCharge.equals(new DoctorInCharge(\"S1111111B\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(doctorInCharge.equals(doctorInCharge));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(doctorInCharge.equals(new DoctorInCharge(\"S1111111A\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DoctorInCharge doctorInCharge \u003d new DoctorInCharge(\"S1111111A\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(doctorInCharge.hashCode(), new DoctorInCharge(\"S1111111A\").hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(doctorInCharge.hashCode(), new DoctorInCharge(\"S1111111B\").hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 69,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/test/java/organice/model/person/DoctorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class DoctorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Doctor editedAlice;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different nric, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // same nric, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withName(VALID_NAME_PATIENT_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Doctor aliceCopy \u003d new DoctorBuilder(DOCTOR_ALICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.equals(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different doctor -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(PATIENT_BOB));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Doctor editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // different person type -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d (Doctor) new DoctorBuilder(DOCTOR_ALICE).withType(VALID_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Doctor alice \u003d new DoctorBuilder(DOCTOR_ALICE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(alice.toString().trim() , \"Alice Pauline Person Type: doctor\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                + \" Nric: S1532142A Phone: 94351253\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Doctor alice \u003d new DoctorBuilder(DOCTOR_ALICE).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(alice.hashCode(), new DoctorBuilder(DOCTOR_ALICE).build().hashCode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertNotEquals(alice.hashCode(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                new DoctorBuilder(DOCTOR_ALICE).withPhone(VALID_PHONE_PATIENT_BOB).build().hashCode());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 102
    }
  },
  {
    "path": "src/test/java/organice/model/person/DonorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_EXPIRY_DATE_DONOR_JOHNY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_PATIENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_JOHN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.DonorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DonorTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(DONOR_JOHN));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Donor editedJohn \u003d new DonorBuilder(DONOR_JOHN).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different age -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withAge(VALID_AGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different blood type -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withBloodType(VALID_BLOOD_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different tissue type -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withTissueType(VALID_TISSUE_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different organ -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withOrgan(VALID_ORGAN_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different organ expiry date-\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withOrganExpiryDate(VALID_ORGAN_EXPIRY_DATE_DONOR_JOHNY).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric, different other attributes -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withNric(VALID_NRIC_PATIENT_BOB).withName(VALID_NAME_PATIENT_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same nric, different other attributes -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withName(VALID_NAME_PATIENT_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DONOR_JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Donor johnCopy \u003d new DonorBuilder(DONOR_JOHN).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DONOR_JOHN.equals(johnCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DONOR_JOHN.equals(DONOR_JOHN));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(5));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(PATIENT_BOB));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Donor editedJohn \u003d new DonorBuilder(DONOR_JOHN).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different person type -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withType(\"doctor\").build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(editedAlice.equals(editedJohn));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different age -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withAge(VALID_AGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different blood type -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withBloodType(VALID_BLOOD_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different tissue type -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withTissueType(VALID_TISSUE_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different organ expiry date -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(DONOR_JOHN).withOrganExpiryDate(VALID_ORGAN_EXPIRY_DATE_DONOR_JOHNY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DONOR_JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Donor john \u003d new DonorBuilder(DONOR_JOHN).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(john.toString().trim(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \"John Person Type: donor Nric: T1312123P Phone: 81230942 Age: 60 \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        + \"Blood Type: A Tissue Type: 1,2,3,4,5,6 Organ: kidney Organ \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                + \"Expiry Date: 20-Jan-2020 Status: not processing\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Donor john \u003d new DonorBuilder(DONOR_JOHN).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(john.hashCode(), new DonorBuilder(DONOR_JOHN).build().hashCode());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(john.hashCode(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                new DonorBuilder(DONOR_JOHN).withPhone(VALID_PHONE_PATIENT_BOB).build().hashCode());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 105,
      "TheRealRavager": 41,
      "SimNee": 1
    }
  },
  {
    "path": "src/test/java/organice/model/person/MatchedDonorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_EXPIRY_DATE_DONOR_JOHNY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_IRENE_DONOR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.testutil.DonorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchedDonorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static MatchedDonor MATCHED_DONOR_IRENE_DONOR \u003d new MatchedDonor(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void alternativeConstructor_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //MatchedPatient should accurately represent the Patient. All attributes should be the same."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String ireneDonorNric \u003d DONOR_IRENE_DONOR.getNric().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonorNric, MATCHED_DONOR_IRENE_DONOR.getNric().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String ireneDonorAge \u003d DONOR_IRENE_DONOR.getAge().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonorAge, MATCHED_DONOR_IRENE_DONOR.getAge().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String ireneDonorBloodType \u003d DONOR_IRENE_DONOR.getBloodType().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonorBloodType, MATCHED_DONOR_IRENE_DONOR.getBloodType().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String ireneDonorPhone \u003d DONOR_IRENE_DONOR.getPhone().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonorPhone, MATCHED_DONOR_IRENE_DONOR.getPhone().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String ireneDonorTissueType \u003d DONOR_IRENE_DONOR.getTissueType().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonorTissueType, MATCHED_DONOR_IRENE_DONOR.getTissueType().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String ireneDonorOrgan \u003d DONOR_IRENE_DONOR.getOrgan().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonorOrgan, MATCHED_DONOR_IRENE_DONOR.getOrgan().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String ireneDonorName \u003d DONOR_IRENE_DONOR.getName().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonorName, MATCHED_DONOR_IRENE_DONOR.getName().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String ireneDonorOrganExpiryDate \u003d DONOR_IRENE_DONOR.getOrganExpiryDate().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonorOrganExpiryDate, MATCHED_DONOR_IRENE_DONOR.getOrganExpiryDate().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor editedMatchedDonor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor ireneCopy \u003d new MatchedDonor(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneCopy, MATCHED_DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(MATCHED_DONOR_IRENE_DONOR, MATCHED_DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(null, MATCHED_DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different object class -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(5, MATCHED_DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(MATCHED_DONOR_IRENE_DONOR, PATIENT_BOB);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Donor editedIrene \u003d new DonorBuilder(DONOR_IRENE_DONOR).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedDonor \u003d new MatchedDonor(editedIrene);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(MATCHED_DONOR_IRENE_DONOR, editedIrene);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new DonorBuilder(DONOR_IRENE_DONOR).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedDonor \u003d new MatchedDonor(editedIrene);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(MATCHED_DONOR_IRENE_DONOR, editedMatchedDonor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new DonorBuilder(DONOR_IRENE_DONOR).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedDonor \u003d new MatchedDonor(editedIrene);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(MATCHED_DONOR_IRENE_DONOR, editedMatchedDonor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different age -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new DonorBuilder(DONOR_IRENE_DONOR).withAge(VALID_AGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedDonor \u003d new MatchedDonor(editedIrene);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(MATCHED_DONOR_IRENE_DONOR, editedMatchedDonor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different blood type -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new DonorBuilder(DONOR_IRENE_DONOR).withBloodType(VALID_BLOOD_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedDonor \u003d new MatchedDonor(editedIrene);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(MATCHED_DONOR_IRENE_DONOR, editedMatchedDonor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different tissue type -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new DonorBuilder(DONOR_IRENE_DONOR).withTissueType(VALID_TISSUE_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedDonor \u003d new MatchedDonor(editedIrene);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(MATCHED_DONOR_IRENE_DONOR, editedMatchedDonor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //different organ expiry date -\u003e return false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new DonorBuilder(DONOR_IRENE_DONOR).withOrganExpiryDate(VALID_ORGAN_EXPIRY_DATE_DONOR_JOHNY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedDonor \u003d new MatchedDonor(editedIrene);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(MATCHED_DONOR_IRENE_DONOR, editedMatchedDonor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(\"Irene Donor Person Type: donor Nric: S9876543G Phone: 85355255 \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + \"Age: 21 Blood Type: O Tissue Type: 1,4,7,10,11,12 \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                + \"Organ: kidney Organ Expiry Date: 20-Jan-2020 \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                + \"Status: not processing\", MATCHED_DONOR_IRENE_DONOR.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor ireneDonor \u003d new MatchedDonor(DONOR_IRENE_DONOR);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Donor differentDonor \u003d new DonorBuilder(DONOR_IRENE_DONOR).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedDonor differentMatchedDonor \u003d new MatchedDonor(differentDonor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(ireneDonor.hashCode(), new MatchedDonor(DONOR_IRENE_DONOR).hashCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(ireneDonor.hashCode(), differentMatchedDonor.hashCode());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 122,
      "SimNee": 2
    }
  },
  {
    "path": "src/test/java/organice/model/person/MatchedPatientTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_DOCTOR_IN_CHARGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_IRENE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_PATIENT_IRENE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PRIORITY_PATIENT_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PRIORITY_PATIENT_IRENE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class MatchedPatientTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static MatchedPatient MATCHED_PATIENT_IRENE \u003d new MatchedPatient(PATIENT_IRENE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void alternativeConstructor_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //MatchedPatient should accurately represent the Patient. All attributes should be the same."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_NRIC_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getNric().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_AGE_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getAge().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_BLOOD_TYPE_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getBloodType().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_PHONE_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getPhone().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_PRIORITY_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getPriority().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getDoctorInCharge().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_TISSUE_TYPE_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getTissueType().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_ORGAN_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getOrgan().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(VALID_NAME_PATIENT_IRENE, MATCHED_PATIENT_IRENE.getName().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient editedMatchedPatient;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient ireneCopy \u003d new MatchedPatient(PATIENT_IRENE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(ireneCopy.equals(ireneCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(MATCHED_PATIENT_IRENE.equals(MATCHED_PATIENT_IRENE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(PATIENT_BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedPatient \u003d new MatchedPatient(editedIrene);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedPatient \u003d new MatchedPatient(editedIrene);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedPatient \u003d new MatchedPatient(editedIrene);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different age -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withAge(VALID_AGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedPatient \u003d new MatchedPatient(editedIrene);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(editedMatchedPatient));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withPriority(VALID_PRIORITY_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedPatient \u003d new MatchedPatient(editedIrene);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(editedMatchedPatient));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different blood type -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withBloodType(VALID_BLOOD_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedPatient \u003d new MatchedPatient(editedIrene);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(editedMatchedPatient));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different tissue type -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withTissueType(VALID_TISSUE_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedPatient \u003d new MatchedPatient(editedIrene);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(editedMatchedPatient));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different doctor in charge -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withDoctorInCharge(VALID_DOCTOR_IN_CHARGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedMatchedPatient \u003d new MatchedPatient(editedIrene);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(MATCHED_PATIENT_IRENE.equals(editedMatchedPatient));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient irene \u003d new MatchedPatient(PATIENT_IRENE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(\"Irene Person Type: patient Nric: S1111112A Phone: 85355255 \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + \"Age: 21 Priority: high Blood Type: O Tissue Type: 1,4,7,10,11,12 \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                + \"Organ: kidney Doctor In Charge: S1231231B \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                + \"Status: not processing\", irene.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient irene \u003d new MatchedPatient(PATIENT_IRENE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient differentPatient \u003d new PatientBuilder(PATIENT_IRENE).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        MatchedPatient differentMatchedPatient \u003d new MatchedPatient(differentPatient);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(irene.hashCode(), new MatchedPatient(PATIENT_IRENE).hashCode());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(irene.hashCode(), differentMatchedPatient.hashCode());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 133,
      "SimNee": 2
    }
  },
  {
    "path": "src/test/java/organice/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // Keywords match type, phone, nric and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"doctor\", \"S1111111A\", \"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withType(\"doctor\").withNric(\"S1111111A\").withName(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 5,
      "TheRealRavager": 2,
      "-": 69
    }
  },
  {
    "path": "src/test/java/organice/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_DOCTOR_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(new Name(VALID_NAME_PATIENT_BOB).toString(), VALID_NAME_PATIENT_BOB);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_PATIENT_BOB);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(name.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(name.equals(new Name(VALID_NAME_DOCTOR_AMY)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(name.equals(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(name.equals(new Name(VALID_NAME_PATIENT_BOB)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_PATIENT_BOB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(name.hashCode(), new Name(VALID_NAME_PATIENT_BOB).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertNotEquals(name.hashCode(), new Name(VALID_NAME_DOCTOR_AMY).hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 18,
      "TheRealRavager": 11,
      "-": 38
    }
  },
  {
    "path": "src/test/java/organice/model/person/NricTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null nric"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"1234567\")); // contains only number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"9312930R\")); // begins with a number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S123456A\")); // contains less than 7 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S1234567\")); // ends with a number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"AAAAAAAAA\")); // contains only letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"N1234567A\")); // starts with letter other than S/T/F/G"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // valid nric"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s1234512b\")); // should be case insensitive"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s1234512R\")); // should be case insensitive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T1234512a\")); // should be case insensitive"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S1234567B\")); // starts with \u0027S\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T2222222A\")); // starts with \u0027T\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"F3333333A\")); // starts with \u0027F\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"G4444444A\")); // starts with \u0027G\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Nric(\"S1111111A\").toString(), \"S1111111A\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric nric \u003d new Nric(\"S1111111A\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(nric.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(nric.equals(new Nric(\"S1111111B\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(nric.equals(nric));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(nric.equals(new Nric(\"S1111111A\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric nric \u003d new Nric(\"S1111111A\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(nric.hashCode(), new Nric(\"S1111111A\").hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(nric.hashCode(), new Nric(\"S1111111B\").hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 69,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/test/java/organice/model/person/OrganExpiryDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class OrganExpiryDateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new OrganExpiryDate(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_invalidOrganExpiryDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String invalidOrganExpiryDate \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new OrganExpiryDate(invalidOrganExpiryDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void isValidExpiryDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null organ\u0027s expiry date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e OrganExpiryDate.isValidExpiryDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid organ\u0027s expiry date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"23,Jan 2019\")); // wrong data format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"22/Jan/2019\")); // wrong data format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"22.01.2019\")); // wrong data format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"22/01/2019\")); // wrong data format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"22-01-2019\")); // wrong data format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"22-Mai-2019\")); // wrong spelling"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"30-Feb-2019\")); // day is more than number of days"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"00-Jan-2019\")); // there is no day 00"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"29-Feb-2019\")); // not leap year"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"23-Janu-2020\")); // month not in format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(OrganExpiryDate.isValidExpiryDate(\"23-Augus-2020\")); // month not in format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // valid organ\u0027s expiry date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(OrganExpiryDate.isValidExpiryDate(\"23-Jan-2020\")); // valid date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(OrganExpiryDate.isValidExpiryDate(\"23-January-2019\")); // full month name accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(OrganExpiryDate.isValidExpiryDate(\"23-JaNuArY-2019\")); // full month name accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(OrganExpiryDate.isValidExpiryDate(\"29-Feb-2020\")); // leap year"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(OrganExpiryDate.isValidExpiryDate(\"29-jan-2020\")); // case insensitive"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(OrganExpiryDate.isValidExpiryDate(\"29-JAN-2020\")); // case insensitive"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new OrganExpiryDate(\"23-Jan-2020\").toString(), \"23-Jan-2020\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new OrganExpiryDate(\"29-JAN-2020\").toString(), \"29-Jan-2020\"); //full month name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new OrganExpiryDate(\"29-JANuArY-2020\").toString(), \"29-Jan-2020\"); //case insensitive"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        OrganExpiryDate expiryDate \u003d new OrganExpiryDate(\"23-Jan-2020\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(expiryDate.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different organ\u0027s expiry date -\u003e return false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(expiryDate.equals(new OrganExpiryDate(\"24-january-2020\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(expiryDate.equals(new OrganExpiryDate(\"23-may-2020\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(expiryDate.equals(new OrganExpiryDate(\"23-may-2021\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(expiryDate.equals(expiryDate));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same organ\u0027s expiry date -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(expiryDate.equals(new OrganExpiryDate(\"23-Jan-2020\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(expiryDate.equals(new OrganExpiryDate(\"23-JAN-2020\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(expiryDate.equals(new OrganExpiryDate(\"23-JANuary-2020\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(expiryDate.equals(new OrganExpiryDate(\"23-january-2020\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        OrganExpiryDate expiryDate \u003d new OrganExpiryDate(\"23-Jan-2020\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expiryDate.hashCode(), new OrganExpiryDate(\"23-Jan-2020\").hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expiryDate.hashCode(), new OrganExpiryDate(\"23-JAN-2020\").hashCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expiryDate.hashCode(), new OrganExpiryDate(\"23-JANuaRy-2020\").hashCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(expiryDate.hashCode(), new OrganExpiryDate(\"23-May-2020\").hashCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(expiryDate.hashCode(), new OrganExpiryDate(\"24-Jan-2022\").hashCode());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 91,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/test/java/organice/model/person/OrganTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "public class OrganTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Organ(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void constructor_invalidOrgan_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        String invalidOrgan \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Organ(invalidOrgan));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void isValidOrgan() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // null organ"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Organ.isValidOrgan(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // invalid organ"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"kidney*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"12345\")); // only numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"kidney1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // valid organ"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(Organ.isValidOrgan(\"kidney\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(Organ.isValidOrgan(\"Kidney\")); // case insensitive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertEquals(new Organ(\"kidney\").toString(), \"kidney\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertEquals(new Organ(\"KIDNEY\").toString(), \"kidney\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        Organ organ \u003d new Organ(\"kidney\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(organ.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(organ.equals(organ));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // same organ name -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(organ.equals(new Organ(\"kidney\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        Organ organ \u003d new Organ(\"kidney\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertEquals(organ.hashCode(), new Organ(\"KIDNEY\").hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "Yen-Peng": 65
    }
  },
  {
    "path": "src/test/java/organice/model/person/PatientTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_DOCTOR_IN_CHARGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_PATIENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PRIORITY_PATIENT_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(PATIENT_IRENE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PATIENT_IRENE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Patient editedIrene \u003d new PatientBuilder(PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different age -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withAge(VALID_AGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different priority -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withPriority(VALID_PRIORITY_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different blood type -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withBloodType(VALID_BLOOD_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different tissue type -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withTissueType(VALID_TISSUE_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different organ -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withOrgan(VALID_ORGAN_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different doctor in charge -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withDoctorInCharge(VALID_DOCTOR_IN_CHARGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different nric, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same nric, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withName(VALID_NAME_PATIENT_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(PATIENT_IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Patient ireneCopy \u003d new PatientBuilder(PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(PATIENT_IRENE.equals(ireneCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(PATIENT_IRENE.equals(PATIENT_IRENE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(5));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(PATIENT_BOB));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Patient editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different person type -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withType(\"doctor\").build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(editedAlice.equals(editedIrene));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different age -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withAge(VALID_AGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withPriority(VALID_PRIORITY_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different blood type -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withBloodType(VALID_BLOOD_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different tissue type -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withTissueType(VALID_TISSUE_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different doctor in charge -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedIrene \u003d new PatientBuilder(PATIENT_IRENE).withDoctorInCharge(VALID_DOCTOR_IN_CHARGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(PATIENT_IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Patient irene \u003d new PatientBuilder(PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(\"Irene Person Type: patient Nric: S1111112A Phone: 85355255 \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + \"Age: 21 Priority: high Blood Type: O Tissue Type: 1,4,7,10,11,12 \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                + \"Organ: kidney Doctor In Charge: S1231231B \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                + \"Status: not processing\", irene.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Patient irene \u003d new PatientBuilder(PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(irene.hashCode(), new PatientBuilder(PATIENT_IRENE).build().hashCode());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(irene.hashCode(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                new PatientBuilder(PATIENT_IRENE).withPhone(VALID_PHONE_PATIENT_BOB).build().hashCode());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 63,
      "C-likethis123": 56,
      "TheRealRavager": 38,
      "SimNee": 2
    }
  },
  {
    "path": "src/test/java/organice/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PERSON_HOON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different type -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withType(VALID_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same nric, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).withName(VALID_NAME_PATIENT_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(DOCTOR_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person hoonCopy \u003d new PersonBuilder(PERSON_HOON).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(PERSON_HOON.equals(hoonCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(PERSON_HOON.equals(PERSON_HOON));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PERSON_HOON.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PERSON_HOON.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PERSON_HOON.equals(PATIENT_BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedHoon \u003d new PersonBuilder(PERSON_HOON).withName(VALID_NAME_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(PERSON_HOON.equals(editedHoon));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedHoon \u003d new PersonBuilder(DOCTOR_ALICE).withPhone(VALID_PHONE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(editedHoon));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedHoon \u003d new PersonBuilder(DOCTOR_ALICE).withNric(VALID_NRIC_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(editedHoon));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different person type -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        editedHoon \u003d new PersonBuilder(DOCTOR_ALICE).withType(VALID_TYPE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(DOCTOR_ALICE.equals(editedHoon));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person alice \u003d new PersonBuilder(DOCTOR_ALICE).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(alice.toString().trim() , \"Alice Pauline Person Type: doctor Nric: S1532142A Phone: 94351253\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person alice \u003d new PersonBuilder(DOCTOR_ALICE).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(alice.hashCode(), new PersonBuilder(DOCTOR_ALICE).build().hashCode());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(alice.hashCode(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                new PersonBuilder(DOCTOR_ALICE).withPhone(VALID_PHONE_PATIENT_BOB).build().hashCode());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 22,
      "TheRealRavager": 42,
      "-": 40
    }
  },
  {
    "path": "src/test/java/organice/model/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/organice/model/person/PriorityTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final Priority PRIORITY_HIGH \u003d new Priority(Priority.PRIORITY_HIGH);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final Priority PRIORITY_MEDIUM \u003d new Priority(Priority.PRIORITY_MEDIUM);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final Priority PRIORITY_LOW \u003d new Priority(Priority.PRIORITY_LOW);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final Priority PRIORITY_HIGH_CAPS \u003d new Priority(Priority.PRIORITY_HIGH.toUpperCase());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final Priority PRIORITY_MEDIUM_CAPS \u003d new Priority(Priority.PRIORITY_MEDIUM.toUpperCase());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final Priority PRIORITY_LOW_CAPS \u003d new Priority(Priority.PRIORITY_LOW.toUpperCase());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_invalidType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null type"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"medium high\")); //permutations of high, medium and low"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"highlow\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"high\")); //high is valid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"medium\")); //medium is valid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"low\")); //low is valid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"HIGH\")); //case insensitive"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"MEDIUM\")); //case insensitive"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"LOW\")); //case insensitive"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isHighPriority() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_HIGH.isHighPriority()); //valid case"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_HIGH_CAPS.isHighPriority()); //case insensitive"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_LOW.isHighPriority()); //not valid, is low"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_LOW_CAPS.isHighPriority()); //not valid, is low (caps)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_MEDIUM.isHighPriority()); //not valid, is medium"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_MEDIUM_CAPS.isHighPriority()); //not valid, is medium (caps)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isMediumPriority() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_MEDIUM.isMediumPriority()); //valid case"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_MEDIUM_CAPS.isMediumPriority()); //case insensitive"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_LOW.isMediumPriority()); //not valid, is low"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_LOW_CAPS.isMediumPriority()); //not valid, is low (caps)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_HIGH.isMediumPriority()); //not valid, is high"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_HIGH_CAPS.isMediumPriority()); //not valid, is high (caps)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isLowPriority() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_LOW.isLowPriority()); //valid case"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_LOW_CAPS.isLowPriority()); //case insensitive"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_HIGH.isLowPriority()); //not valid, is high"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_HIGH_CAPS.isLowPriority()); //not valid, is high (caps)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_MEDIUM.isLowPriority()); //not valid, is medium"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_MEDIUM_CAPS.isLowPriority()); //not valid, is medium (caps)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void toString_allValidInputs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PRIORITY_HIGH.toString(), \"high\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PRIORITY_HIGH_CAPS.toString(), \"high\"); //converted to lowercase"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PRIORITY_LOW.toString(), \"low\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PRIORITY_LOW_CAPS.toString(), \"low\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PRIORITY_MEDIUM.toString(), \"medium\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PRIORITY_MEDIUM_CAPS.toString(), \"medium\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void equals_validEquals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_HIGH.equals(PRIORITY_HIGH)); //same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_MEDIUM.equals(PRIORITY_MEDIUM)); //same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(PRIORITY_HIGH.equals(PRIORITY_HIGH_CAPS)); //case insensitive"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_HIGH.equals(null)); //null object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(PRIORITY_LOW.equals(\"low\")); //subject object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PRIORITY_HIGH.hashCode(), PRIORITY_HIGH.hashCode());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PRIORITY_HIGH.hashCode(), PRIORITY_HIGH_CAPS.hashCode());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(PRIORITY_HIGH.hashCode(), PRIORITY_LOW.hashCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertNotEquals(PRIORITY_HIGH.hashCode(), PRIORITY_MEDIUM.hashCode());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 125
    }
  },
  {
    "path": "src/test/java/organice/model/person/StatusTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": "class StatusTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private static final Status STATUS_PROCESSING \u003d new Status(Status.STATUS_PROCESSING);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private static final Status STATUS_NOT_PROCESSING \u003d new Status(Status.STATUS_NOT_PROCESSING);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private static final Status STATUS_DONE \u003d new Status(Status.STATUS_DONE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private static final Status STATUS_PROCESSING_CAP \u003d new Status(Status.STATUS_PROCESSING.toUpperCase());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private static final Status STATUS_NOT_PROCESSING_CAP \u003d new Status(Status.STATUS_NOT_PROCESSING.toUpperCase());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private static final Status STATUS_DONE_CAP \u003d new Status(Status.STATUS_DONE.toUpperCase());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BloodType(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void constructor_invalidBloodType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        String invalidStatus \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Status(invalidStatus));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    void isValidStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // null status"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Status.isValidStatus(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // invalid status"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Status.isValidStatus(\"\")); // empty string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Status.isValidStatus(\" \")); // spaces only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Status.isValidStatus(\"abc\")); // wrong Status"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Status.isValidStatus(\"1\")); // numeric"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Status.isValidStatus(\"not+processing\")); // + within alphabets"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Status.isValidStatus(\"pro cess ing\")); // spaces within alphabets"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Status.isValidStatus(\"procesing\")); // typo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // valid status"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Status.isValidStatus(\"processing\")); //valid case"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Status.isValidStatus(\"not processing\")); //valid case"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Status.isValidStatus(\"done\")); //valid case"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Status.isValidStatus(\"PROCESSING\")); //case insensitive"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Status.isValidStatus(\"NOT PROCESSING\")); //case insensitive"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Status.isValidStatus(\"DONE\")); //case insensitive"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    void isProcessing() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_PROCESSING.isProcessing()); //valid case"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_PROCESSING_CAP.isProcessing()); //case insensitive"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_NOT_PROCESSING.isProcessing()); //not valid case"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_NOT_PROCESSING_CAP.isProcessing()); //case insensitive"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_DONE.isProcessing()); //not valid case"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_DONE_CAP.isProcessing()); //case insensitive"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    void isNotProcessing() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_NOT_PROCESSING.isNotProcessing()); //valid case"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_NOT_PROCESSING_CAP.isNotProcessing()); //case insensitive"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_PROCESSING.isNotProcessing()); //not valid case"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_PROCESSING_CAP.isNotProcessing()); //case insensitive"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_DONE.isNotProcessing()); //not valid case"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_DONE_CAP.isNotProcessing()); //case insensitive"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    void isDone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_DONE.isDone()); //valid case"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_DONE_CAP.isDone()); //case insensitive"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_PROCESSING.isDone()); //not valid case"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_PROCESSING_CAP.isDone()); //case insensitive"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_NOT_PROCESSING.isProcessing()); //not valid case"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_NOT_PROCESSING_CAP.isProcessing()); //case insensitive"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_PROCESSING.toString(), \"processing\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_PROCESSING_CAP.toString(), \"processing\"); //converted to lowercase"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_NOT_PROCESSING.toString(), \"not processing\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_NOT_PROCESSING_CAP.toString(), \"not processing\"); //converted to lowercase"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_DONE.toString(), \"done\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_DONE_CAP.toString(), \"done\"); //converted to lowercase"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_PROCESSING.equals(STATUS_PROCESSING)); //same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_NOT_PROCESSING.equals(STATUS_NOT_PROCESSING)); //same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_DONE.equals(STATUS_DONE)); //same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_PROCESSING.equals(STATUS_PROCESSING_CAP)); //case insensitive"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_NOT_PROCESSING.equals(STATUS_NOT_PROCESSING_CAP)); //case insensitive"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(STATUS_DONE.equals(STATUS_DONE_CAP)); //case insensitive"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_PROCESSING.equals(null)); //null object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_NOT_PROCESSING.equals(null)); //null object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_DONE.equals(null)); //null object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_PROCESSING.equals(\"processing\")); //subject object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_NOT_PROCESSING.equals(\"not processing\")); //subject object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(STATUS_DONE.equals(\"done\")); //subject object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_PROCESSING.hashCode(), STATUS_PROCESSING.hashCode());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_PROCESSING.hashCode(), STATUS_PROCESSING_CAP.hashCode());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_NOT_PROCESSING.hashCode(), STATUS_NOT_PROCESSING.hashCode());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_NOT_PROCESSING.hashCode(), STATUS_NOT_PROCESSING_CAP.hashCode());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_DONE.hashCode(), STATUS_DONE.hashCode());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(STATUS_DONE.hashCode(), STATUS_DONE_CAP.hashCode());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertNotEquals(STATUS_PROCESSING.hashCode(), STATUS_DONE.hashCode());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertNotEquals(STATUS_NOT_PROCESSING.hashCode(), STATUS_DONE.hashCode());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SimNee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SimNee": 138
    }
  },
  {
    "path": "src/test/java/organice/model/person/TissueTypeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": "public class TissueTypeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TissueType(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void constructor_invalidTissuetype_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        String invalidTissueType \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TissueType(invalidTissueType));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void isValidTissuetype() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // null tissue type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TissueType.isValidTissueType(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // invalid tissue type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\"a,b,c,d,e,f\")); // tissue types must be Integers from 1..12."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\"1\")); // single numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\"1,,2,,3,,4,,5,,6\")); // wrong usage of commas"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\"1 2 3 4 5 6\")); // spaces within tissue type"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\"1, 2, 3, 4, 5, 6\")); // spaces within tissue type with commas"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\"13,2,3,4,5,6\")); // tissue types must be Integers from 1..12."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(TissueType.isValidTissueType(\"1,1,1,1,1,1\")); // duplicates"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // valid tissue type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(TissueType.isValidTissueType(\"1,2,3,4,5,6\")); // exactly 6 tissue type"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(TissueType.isValidTissueType(\"12,7,8,9,10,11\")); //2 digits tissue type"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(new TissueType(\"1,2,3,4,5,6\").toString(), \"1,2,3,4,5,6\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(new TissueType(\"10,11,12,3,4,5\").toString(), \"10,11,12,3,4,5\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        TissueType tissueType \u003d new TissueType(\"1,2,3,4,5,6\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(tissueType.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(tissueType.equals(new TissueType(\"1,2,3,4,5,7\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(tissueType.equals(tissueType));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(tissueType.equals(new TissueType(\"1,2,3,4,5,6\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        TissueType tissueType \u003d new TissueType(\"2,4,6,8,10,12\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertEquals(tissueType.hashCode(), new TissueType(\"2,4,6,8,10,12\").hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertNotEquals(tissueType.hashCode(), new TissueType(\"1,3,5,7,9,11\").hashCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SimNee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SimNee": 68
    }
  },
  {
    "path": "src/test/java/organice/model/person/TypeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class TypeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Type(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_invalidType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String invalidType \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Type(invalidType));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isValidType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Type.isValidType(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Type.isValidType(\"patient\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Type.isValidType(\"doctor\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Type.isValidType(\"donor\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void typeCheckTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(new Type(Type.DONOR).isDonor());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(new Type(Type.DOCTOR).isDoctor());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(new Type(Type.PATIENT).isPatient());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Type(Type.PATIENT).toString(), \"patient\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type type \u003d new Type(Type.PATIENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(type.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(type.equals(new Type(Type.DOCTOR)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(type.equals(type));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(type.equals(new Type(Type.PATIENT)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type type \u003d new Type(Type.PATIENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(type.hashCode(), new Type(Type.PATIENT).hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(type.hashCode(), new Type(Type.DOCTOR).hashCode());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 32,
      "C-likethis123": 40,
      "TheRealRavager": 2
    }
  },
  {
    "path": "src/test/java/organice/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_GEORGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertFalse(uniquePersonList.contains(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertTrue(uniquePersonList.contains(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void contains_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.containsDoctor(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void contains_doctorNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(uniquePersonList.containsDoctor(DOCTOR_ALICE.getNric()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void contains_doctorInList_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(uniquePersonList.containsDoctor(DOCTOR_ALICE.getNric()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void contains_doctorWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedAlice \u003d new DoctorBuilder(DOCTOR_ALICE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(uniquePersonList.containsDoctor(editedAlice.getNric()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void containsPatient_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        uniquePersonList.add(PATIENT_IRENE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(uniquePersonList.containsPatient(PATIENT_IRENE.getNric()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void containsPatient_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(uniquePersonList.containsPatient(PATIENT_IRENE.getNric()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void containsPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.containsPatient(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void getPatient_patientInList_returnsPatient() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        uniquePersonList.add(PATIENT_BOB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        uniquePersonList.add(DONOR_GEORGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(PATIENT_BOB, uniquePersonList.getPatient(PATIENT_BOB.getNric()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void getPatient_patientNotInAddressBook_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        uniquePersonList.add(PATIENT_BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        uniquePersonList.add(DONOR_GEORGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.getPatient(PATIENT_IRENE.getNric()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, DOCTOR_ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(DOCTOR_ALICE, null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(DOCTOR_ALICE, DOCTOR_ALICE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.setPerson(DOCTOR_ALICE, DOCTOR_ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        expectedUniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(DOCTOR_ALICE).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.setPerson(DOCTOR_ALICE, editedAlice);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.setPerson(DOCTOR_ALICE, PATIENT_BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        expectedUniquePersonList.add(PATIENT_BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(PATIENT_BOB);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(DOCTOR_ALICE, PATIENT_BOB));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(DOCTOR_ALICE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.remove(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        expectedUniquePersonList.add(PATIENT_BOB);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        uniquePersonList.add(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(PATIENT_BOB);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        expectedUniquePersonList.add(PATIENT_BOB);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePeople \u003d Arrays.asList(DOCTOR_ALICE, DOCTOR_ALICE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePeople));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 25,
      "C-likethis123": 34,
      "TheRealRavager": 38,
      "-": 127
    }
  },
  {
    "path": "src/test/java/organice/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DONOR_JOHN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PATIENT_IRENE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Age;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.BloodType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.DoctorInCharge;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Organ;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.OrganExpiryDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import organice.model.person.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.TissueType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"G123A\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"student\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String INVALID_AGE \u003d \"-28\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"hgh\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_BLOOD_TYPE \u003d \"AB-\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_TISSUE_TYPE \u003d \"1,1,2,3,4,5\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_ORGAN \u003d \"heart\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_DOCTOR_IN_CHARGE \u003d \"S123A\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_ORGAN_EXPIRY_DATE \u003d \"22.01.2020\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"procesing\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String PLACEHOLDER_DOCTOR_IN_CHARGE \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String PLACEHOLDER_ORGAN_EXPIRY_DATE \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static final String VALID_NAME \u003d DOCTOR_BENSON.getName().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static final String VALID_PHONE \u003d DOCTOR_BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static final String VALID_NRIC \u003d DOCTOR_BENSON.getNric().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_TYPE \u003d PATIENT_IRENE.getType().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_AGE \u003d PATIENT_IRENE.getAge().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_PRIORITY \u003d PATIENT_IRENE.getPriority().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_BLOOD_TYPE \u003d PATIENT_IRENE.getBloodType().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_TISSUE_TYPE \u003d PATIENT_IRENE.getTissueType().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_ORGAN \u003d PATIENT_IRENE.getOrgan().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_DOCTOR_IN_CHARGE \u003d PATIENT_IRENE.getDoctorInCharge().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private static final String VALID_STATUS \u003d PATIENT_IRENE.getStatus().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_validDoctorDetails_returnsDoctor() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(DOCTOR_BENSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(DOCTOR_BENSON, person.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_validDonorDetails_returnsDonor() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(DONOR_JOHN);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(DONOR_JOHN, person.toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(PATIENT_IRENE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(PATIENT_IRENE, person.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(INVALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE, VALID_TISSUE_TYPE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE, VALID_STATUS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d Type.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_NRIC, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE, VALID_TISSUE_TYPE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE, VALID_STATUS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, INVALID_NRIC, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE, VALID_TISSUE_TYPE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE, VALID_STATUS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, null, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE, VALID_TISSUE_TYPE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE, VALID_STATUS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, INVALID_NAME,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, null,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                INVALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                null, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, INVALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d Age.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, null, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, INVALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, null, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidBloodType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, INVALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d BloodType.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullBloodType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, null,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BloodType.class.getSimpleName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidTissueType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        INVALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d TissueType.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullTissueType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        null, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TissueType.class.getSimpleName());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidOrgan_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, INVALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d Organ.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullOrgan_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, null, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Organ.class.getSimpleName());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidDoctorInCharge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, INVALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d DoctorInCharge.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullDoctorInCharge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, null, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DoctorInCharge.class.getSimpleName());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidOrganExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String donorType \u003d \"donor\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(donorType, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, PLACEHOLDER_DOCTOR_IN_CHARGE, INVALID_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d OrganExpiryDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullOrganExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String donorType \u003d \"donor\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(donorType, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                        VALID_TISSUE_TYPE, VALID_ORGAN, PLACEHOLDER_DOCTOR_IN_CHARGE, null,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                                VALID_STATUS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OrganExpiryDate.class.getSimpleName());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void toModelType_invalidStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                VALID_PHONE, VALID_AGE, VALID_PRIORITY, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                VALID_TISSUE_TYPE, VALID_ORGAN, VALID_DOCTOR_IN_CHARGE, PLACEHOLDER_ORGAN_EXPIRY_DATE,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                INVALID_STATUS);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 151,
      "C-likethis123": 16,
      "TheRealRavager": 25,
      "-": 55,
      "SimNee": 53
    }
  },
  {
    "path": "src/test/java/organice/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.DOCTOR_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PERSON_HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.PERSON_IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        original.addPerson(PERSON_HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        original.removePerson(DOCTOR_ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        original.addPerson(PERSON_IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 12,
      "-": 98
    }
  },
  {
    "path": "src/test/java/organice/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 6,
      "-": 41
    }
  },
  {
    "path": "src/test/java/organice/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 5,
      "-": 118
    }
  },
  {
    "path": "src/test/java/organice/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 6,
      "-": 62
    }
  },
  {
    "path": "src/test/java/organice/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/organice/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/organice/testutil/DoctorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Doctor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * A utility class to help with building doctor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class DoctorBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DoctorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        type \u003d new Type(\"doctor\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Initializes the DoctorBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DoctorBuilder(Doctor doctorToCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(doctorToCopy);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Sets the {@code Nric} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DoctorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Sets the {@code Name} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DoctorBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Sets the {@code Phone} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DoctorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Doctor build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return new Doctor(type, nric, name, phone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 56
    }
  },
  {
    "path": "src/test/java/organice/testutil/DonorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Age;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.BloodType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Organ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.OrganExpiryDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import organice.model.person.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.TissueType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * A utility class to build Donor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DonorBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"60\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_BLOOD_TYPE \u003d \"A\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_TISSUE_TYPE \u003d \"1,2,3,4,5,6\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_ORGAN \u003d \"kidney\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_ORGAN_EXPIRY_DATE \u003d \"01-Jan-2020\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"not processing\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private BloodType bloodType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private TissueType tissueType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Organ organ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private OrganExpiryDate organExpiryDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type \u003d new Type(\"donor\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        bloodType \u003d new BloodType(DEFAULT_BLOOD_TYPE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        tissueType \u003d new TissueType(DEFAULT_TISSUE_TYPE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organ \u003d new Organ(DEFAULT_ORGAN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organExpiryDate \u003d new OrganExpiryDate(DEFAULT_ORGAN_EXPIRY_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        status \u003d new Status(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Initialises the DonorBuilder with the data of {@code donorToCopy}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder(Donor donorToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(donorToCopy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        age \u003d donorToCopy.getAge();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        bloodType \u003d donorToCopy.getBloodType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        tissueType \u003d donorToCopy.getTissueType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organ \u003d donorToCopy.getOrgan();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organExpiryDate \u003d donorToCopy.getOrganExpiryDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        status \u003d donorToCopy.getStatus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Age} of the {@code Donor} we are building"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withAge(String age) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Nric} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Name} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withName(String name) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Phone} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code BloodType} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withBloodType(String bloodType) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.bloodType \u003d new BloodType(bloodType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code TissueType} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withTissueType(String tissueType) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.tissueType \u003d new TissueType(tissueType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Organ} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withOrgan(String organ) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.organ \u003d new Organ(organ);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code OrganExpiryDate} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withOrganExpiryDate(String organExpiryDate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.organExpiryDate \u003d new OrganExpiryDate(organExpiryDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Sets the {@code Status} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public DonorBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        this.status \u003d new Status(status);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Donor build() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return new Donor(type, nric, name, phone, age, bloodType, tissueType, organ, organExpiryDate, status);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 113,
      "TheRealRavager": 7,
      "SimNee": 14
    }
  },
  {
    "path": "src/test/java/organice/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setType(person.getType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setNric(person.getNric());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Type} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public EditPersonDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setType(new Type(type));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public EditPersonDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 14,
      "TheRealRavager": 7,
      "-": 50
    }
  },
  {
    "path": "src/test/java/organice/testutil/PatientBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Age;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.BloodType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.DoctorInCharge;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.Organ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import organice.model.person.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import organice.model.person.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import organice.model.person.TissueType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * A utility class to build Patient objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class PatientBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"20\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"high\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_BLOOD_TYPE \u003d \"A\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_TISSUE_TYPE \u003d \"1,2,3,4,5,6\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_ORGAN \u003d \"kidney\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_DOCTOR_IN_CHARGE \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"not processing\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private BloodType bloodType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private TissueType tissueType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Organ organ;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private DoctorInCharge doctorInCharge;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        type \u003d new Type(\"patient\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        bloodType \u003d new BloodType(DEFAULT_BLOOD_TYPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        tissueType \u003d new TissueType(DEFAULT_TISSUE_TYPE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organ \u003d new Organ(DEFAULT_ORGAN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        doctorInCharge \u003d new DoctorInCharge(DEFAULT_DOCTOR_IN_CHARGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        status \u003d new Status(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Initialises the PatientBuilder with the data of {@code patientToCopy}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super(patientToCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        age \u003d patientToCopy.getAge();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        priority \u003d patientToCopy.getPriority();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        bloodType \u003d patientToCopy.getBloodType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        tissueType \u003d patientToCopy.getTissueType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        organ \u003d patientToCopy.getOrgan();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        doctorInCharge \u003d patientToCopy.getDoctorInCharge();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        status \u003d patientToCopy.getStatus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Age} of the {@code Patient} we are building"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withAge(String age) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Nric} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Priority} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code BloodType} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PatientBuilder withBloodType(String bloodType) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.bloodType \u003d new BloodType(bloodType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code TissueType} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PatientBuilder withTissueType(String tissueType) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.tissueType \u003d new TissueType(tissueType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Organ} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PatientBuilder withOrgan(String organ) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.organ \u003d new Organ(organ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code DoctorInCharge} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PatientBuilder withDoctorInCharge(String doctorInCharge) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.doctorInCharge \u003d new DoctorInCharge(doctorInCharge);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Sets the {@code Status} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public PatientBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        this.status \u003d new Status(status);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Builds the patient according to the attributes given."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @return new Patient"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return new Patient(type, nric, name, phone, age, priority, bloodType, tissueType, organ, doctorInCharge,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                status);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 52,
      "C-likethis123": 74,
      "TheRealRavager": 7,
      "SimNee": 19
    }
  },
  {
    "path": "src/test/java/organice/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Nric;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * A utility class to help with building person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"doctor\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected Nric nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected Type type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type \u003d new Type(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric \u003d personToCopy.getNric();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type \u003d personToCopy.getType();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Type} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PersonBuilder withType(String type) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.type \u003d new Type(type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Nric} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Person(type, nric, name, phone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 17,
      "C-likethis123": 4,
      "TheRealRavager": 6,
      "-": 50
    }
  },
  {
    "path": "src/test/java/organice/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        sb.append(PREFIX_TYPE + person.getType().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        sb.append(PREFIX_NRIC + person.getNric().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.getType().ifPresent(type -\u003e sb.append(PREFIX_TYPE).append(type.value).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 4,
      "TheRealRavager": 8,
      "-": 35
    }
  },
  {
    "path": "src/test/java/organice/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/organice/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 4,
      "-": 51
    }
  },
  {
    "path": "src/test/java/organice/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/organice/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_DONOR_JOHN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_AGE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_DONOR_JOHN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_DOCTOR_IN_CHARGE_PATIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_DOCTOR_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_DONOR_JOHN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NAME_PATIENT_IRENE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_DOCTOR_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_DONOR_IRENE_DONOR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_DONOR_JOHN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_NRIC_PATIENT_IRENE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_DONOR_JOHN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_EXPIRY_DATE_DONOR_JOHN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_PATIENT_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_ORGAN_PATIENT_IRENE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_DONOR_JOHN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_PHONE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_STATUS_DONOR_JOHN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_STATUS_PATIENT_IRENE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_DONOR_JOHN;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_PATIENT_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static organice.logic.commands.CommandTestUtil.VALID_TISSUE_TYPE_PATIENT_IRENE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.AddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Doctor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Donor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Patient;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Doctor DOCTOR_ALICE \u003d new DoctorBuilder().withNric(\"S1532142A\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Alice Pauline\").withPhone(\"94351253\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Doctor DOCTOR_BENSON \u003d new DoctorBuilder().withNric(\"T5231426Q\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Benson Meier\").withPhone(\"98765432\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Patient PATIENT_CARL \u003d new PatientBuilder().withAge(\"22\").withNric(\"G5642431P\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Carl Kurz\").withPhone(\"95352563\").withPriority(\"high\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withBloodType(\"A\").withTissueType(\"1,2,3,4,5,6\").withOrgan(\"kidney\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withDoctorInCharge(\"S1532142A\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Patient PATIENT_DANIEL \u003d new PatientBuilder().withAge(\"34\").withNric(\"F6423467F\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Daniel Meier\").withPhone(\"87652533\").withPriority(\"low\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            .withBloodType(\"O\").withTissueType(\"10,5,3,1,6,8\").withOrgan(\"kidney\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withDoctorInCharge(\"T5231426Q\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Donor DONOR_ELLE \u003d new DonorBuilder().withAge(\"13\").withNric(\"S9374923S\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            .withName(\"Elle Meyer\").withPhone(\"9482224\").withBloodType(\"O\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withTissueType(\"10,5,3,1,6,8\").withOrgan(\"kidney\").withOrganExpiryDate(\"10-May-2020\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Donor DONOR_FIONA \u003d new DonorBuilder().withAge(\"25\").withNric(\"F9183156L\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            .withName(\"Fiona Kunz\").withPhone(\"9482427\").withBloodType(\"AB\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withTissueType(\"7,2,3,9,6,8\").withOrgan(\"kidney\").withOrganExpiryDate(\"10-Jun-2020\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Donor DONOR_GEORGE \u003d new DonorBuilder().withAge(\"44\").withNric(\"S1234567A\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"George Best\").withPhone(\"9482442\").withBloodType(\"B\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withTissueType(\"9,4,1,6,8,2\").withOrgan(\"kidney\").withOrganExpiryDate(\"10-Dec-2030\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Person PERSON_HOON \u003d new PersonBuilder().withType(\"doctor\").withNric(\"G1245325A\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Hoon Meier\").withPhone(\"8482424\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Person PERSON_IDA \u003d new PersonBuilder().withType(\"doctor\").withNric(\"T1125125L\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Ida Mueller\").withPhone(\"8482131\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //Sample Patients"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Patient PATIENT_IRENE \u003d new PatientBuilder().withAge(VALID_AGE_PATIENT_IRENE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            .withName(VALID_NAME_PATIENT_IRENE).withNric(VALID_NRIC_PATIENT_IRENE).withPhone(VALID_PHONE_PATIENT_IRENE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withBloodType(VALID_BLOOD_TYPE_PATIENT_IRENE).withTissueType(VALID_TISSUE_TYPE_PATIENT_IRENE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .withOrgan(VALID_ORGAN_PATIENT_IRENE).withDoctorInCharge(VALID_DOCTOR_IN_CHARGE_PATIENT_IRENE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .withStatus(VALID_STATUS_PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //Sample Donors"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Donor DONOR_JOHN \u003d new DonorBuilder().withAge(VALID_AGE_DONOR_JOHN)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(VALID_NAME_DONOR_JOHN).withNric(VALID_NRIC_DONOR_JOHN).withPhone(VALID_PHONE_DONOR_JOHN)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withBloodType(VALID_BLOOD_TYPE_DONOR_JOHN).withTissueType(VALID_TISSUE_TYPE_DONOR_JOHN)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .withOrgan(VALID_ORGAN_DONOR_JOHN).withOrganExpiryDate(VALID_ORGAN_EXPIRY_DATE_DONOR_JOHN)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .withStatus(VALID_STATUS_DONOR_JOHN).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //Sample Donor that matches Irene"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Donor DONOR_IRENE_DONOR \u003d new DonorBuilder().withAge(VALID_AGE_PATIENT_IRENE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            .withName(\"Irene Donor\").withNric(VALID_NRIC_DONOR_IRENE_DONOR)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            .withBloodType(VALID_BLOOD_TYPE_PATIENT_IRENE).withTissueType(VALID_TISSUE_TYPE_PATIENT_IRENE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .withOrgan(VALID_ORGAN_PATIENT_IRENE).withOrganExpiryDate(VALID_ORGAN_EXPIRY_DATE_DONOR_JOHN)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            .withStatus(VALID_STATUS_PATIENT_IRENE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    // Manually added - person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Doctor DOCTOR_AMY \u003d new DoctorBuilder().withNric(VALID_NRIC_DOCTOR_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            .withName(VALID_NAME_DOCTOR_AMY).withPhone(CommandTestUtil.VALID_PHONE_DOCTOR_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final Patient PATIENT_BOB \u003d new PatientBuilder().withNric(VALID_NRIC_PATIENT_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(VALID_NAME_PATIENT_BOB).withPhone(VALID_PHONE_PATIENT_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withBloodType(VALID_BLOOD_TYPE_PATIENT_BOB).withTissueType(VALID_TISSUE_TYPE_PATIENT_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withOrgan(VALID_ORGAN_PATIENT_BOB).withDoctorInCharge(VALID_DOCTOR_IN_CHARGE_PATIENT_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DOCTOR_ALICE, DOCTOR_BENSON, PATIENT_CARL, PATIENT_DANIEL, DONOR_ELLE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                DONOR_FIONA, DONOR_GEORGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 33,
      "C-likethis123": 11,
      "TheRealRavager": 37,
      "-": 34,
      "SimNee": 8
    }
  },
  {
    "path": "src/test/java/organice/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/organice/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package organice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static organice.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import organice.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import organice.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003cfx:root type\u003d\"organice.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 1,
      "-": 5
    }
  }
]
